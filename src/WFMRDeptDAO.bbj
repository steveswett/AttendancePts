REM /**
REM  * WFMRDeptDAO.bbj
REM  * @author stevett
REM  *
REM  */


REM  Performance improvements needed.  This does an SQL open, prepare, execute, close each time a config var is requested.
REM  Currently under time constraints, so not done now (7/22/15).


use java.util.LinkedHashMap

declare java.util.LinkedHashMap deptsMap!


rem *- - - - - - - - - - CONSTANTS - - - - - - - - - -*

rem  This section never runs for multi-entry point called programs, so subroutine "setup_constants" is called
rem  for each entry point.


rem *- - - - - - - - - - FUNCTIONS - - - - - - - - - -*

functions:



rem *- - - - - - - - - - ENTRY POINTS - - - - - - - - - -*

entry_points:

get_ids_and_names:

    REM  In the future, may need a way to return values as different data types

    enter deptsMap!
    
    gosub setup_constants
    gosub open_sql_channels
    gosub prepare_sql_stmts
    gosub query_for_depts
    gosub close_sql_channels
    
    exit


rem *- - - - - - - - - - SUBROUTINES - - - - - - - - - -*

subroutines:


REM  ------------------------------
REM  setup_constants
REM  ------------------------------

setup_constants:

    TRUE = 1
    FALSE = 0

    wfmrDataSource$ = ""
    call "ConfigVarsDAO.bbj::get_value", "wfmr.data.source.name", configVarFound, configVarDataType$, wfmrDataSource$
    
    DEPTS_SELECT_STMT$ = "select department_id, name from lab_department where status_code = 'a' order by name"
    
    return


REM  ------------------------------
REM  open_sql_channels
REM  ------------------------------

open_sql_channels:

    deptsChannel = sqlunt
    sqlopen(deptsChannel) wfmrDataSource$
    
    return


REM  ------------------------------
REM  prepare_sql_stmts
REM  ------------------------------

prepare_sql_stmts:

    sqlprep(deptsChannel) DEPTS_SELECT_STMT$

    return


REM  ------------------------------
REM  query_for_depts
REM  ------------------------------

query_for_depts:

    deptsMap!.clear()

    sqlexec(deptsChannel) 
    dim resultRow$:sqltmpl(deptsChannel)
    
    while TRUE
    
        resultRow$ = sqlfetch(deptsChannel,err=*break)
        deptsMap!.put(resultRow.department_id, cvs(resultRow.name$, 2) )
        
    wend
    
    return


REM  ------------------------------
REM  close_sql_channels
REM  ------------------------------

close_sql_channels:

    sqlclose(deptsChannel)

    return    
    
