REM /**
REM  * ETOHistoryDAO.bbj
REM  * @author stevett
REM  *
REM  * Written: August 2015
REM  * 
REM  * Description: Data Access Object for table ETO_HISTORY
REM  *
REM  */

use java.util.HashSet
use java.util.LinkedHashSet

use java.util.HashMap
use java.util.LinkedHashMap


declare java.util.HashSet employeesWithAwardsSet!
declare java.util.LinkedHashSet employeesEarningNewETOSet!

declare java.util.LinkedHashMap employeeRecordsMap!
declare java.util.HashMap employeeDataMap!


rem *- - - - - - - - - - CONSTANTS - - - - - - - - - -*

rem  This section never runs for multi-entry point called programs, so subroutine "setup_constants" is called
rem  for each entry point.


rem *- - - - - - - - - - FUNCTIONS - - - - - - - - - -*

functions:



rem *- - - - - - - - - - ENTRY POINTS - - - - - - - - - -*

entry_points:


get_most_recent_award_date_on_before:

    enter badge5In$, yyyymmddIn$, awardDateOut$
    
    gosub setup_constants
    
    gosub get_most_recent_award_date
    
    exit


add_award_records:

    enter employeesEarningNewETOSet!, awardDateIn$, awardHrsIn
    
    gosub setup_constants
    
    gosub insert_award_records
    
    exit
    

get_employees_with_awards_during_date_range:

    enter yyyymmddFromIn$, yyyymmddToIn$, employeesWithAwardsSet!
    
    gosub setup_constants
    
    gosub get_employees_with_awards
    
    exit
    
    
compute_award_history_for_90_day_window_for_employees:

    enter employeeRecordsMap!, yyyymmddUpThroughIn$
    
    gosub setup_constants
    
    gosub compute_and_store_recent_award_date_for_employees
    
    exit


rem *- - - - - - - - - - SUBROUTINES - - - - - - - - - -*

subroutines:


REM  ------------------------------------------------------------------------------------------
REM  setup_constants
REM  ------------------------------------------------------------------------------------------

setup_constants:

    TRUE = 1
    FALSE = 0

    attendPtsDataSource$ = ""
    call "ConfigVarsDAO.bbj::get_value", "new.attend.pts.files.data.source.name", configVarFound, configVarDataType$, attendPtsDataSource$
    
    RECENT_AWARD_DATE_STMT$ = "select award_date from eto_history where badge = ? and award_date <= ? order by AWARD_DATE desc"
    
    INSERT_AWARD_DATE_STMT$ = "insert into eto_history (badge, award_date, award_hours) values (?, ?, ?)"

    AWARDS_FOR_DATE_RANGE_STMT$ = "select badge from eto_history where award_date >= ? and award_date <= ?"
    
    return


REM  ------------------------------------------------------------------------------------------
REM  Get the most recent ETO award date that is on/before the date passed in
REM  ------------------------------------------------------------------------------------------

get_most_recent_award_date:

    historyChannel = sqlunt
    sqlopen(historyChannel) attendPtsDataSource$

    sqlprep(historyChannel) RECENT_AWARD_DATE_STMT$

    awardDateOut$ = ""

    sqlexec(historyChannel) badge5In$, yyyymmddIn$
    dim resultRow$:sqltmpl(historyChannel)
    
    resultRow$ = sqlfetch(historyChannel,err=no_date_found)
    awardDateOut$ = resultRow.award_date$
    
    no_date_found:
    
    sqlclose(historyChannel)

    return


REM  ------------------------------------------------------------------------------------------
REM  Add award records for all employees in employeesEarningNewETOSet!
REM  ------------------------------------------------------------------------------------------


insert_award_records:

    historyChannel = sqlunt
    sqlopen(historyChannel) attendPtsDataSource$

    sqlprep(historyChannel) INSERT_AWARD_DATE_STMT$
    
    iter! = employeesEarningNewETOSet!.iterator()
    
    while iter!.hasNext()
    
        badgeKey! = iter!.next()
        sqlexec(historyChannel) badgeKey!, awardDateIn$, awardHrsIn
    
    wend
    
    sqlclose(historyChannel)

    return

    
REM  ------------------------------------------------------------------------------------------
REM  Get list of employees with awards during date range and return in employeesWithAwardsSet!
REM  ------------------------------------------------------------------------------------------


get_employees_with_awards:

    employeesWithAwardsSet!.clear()
    
    historyChannel = sqlunt
    sqlopen(historyChannel) attendPtsDataSource$

    sqlprep(historyChannel) AWARDS_FOR_DATE_RANGE_STMT$
    sqlexec(historyChannel) yyyymmddFromIn$, yyyymmddToIn$
    dim resultRow$:sqltmpl(historyChannel)
    
    while TRUE
        resultRow$ = sqlfetch(historyChannel,err=*break)
        employeesWithAwardsSet!.add(cvs(resultRow.badge$, 2))
    wend
    
    sqlclose(historyChannel)

    return
    
    
REM  ------------------------------------------------------------------------------------------
REM  Compute the most recent award history date for each employee in employeeRecordsMap!.  
REM  ------------------------------------------------------------------------------------------


compute_and_store_recent_award_date_for_employees:

    historyChannel = sqlunt
    sqlopen(historyChannel) attendPtsDataSource$
    sqlprep(historyChannel) RECENT_AWARD_DATE_STMT$
    
    iter! = employeeRecordsMap!.keySet().iterator()
    
    while iter!.hasNext()
    
        badgeKey! = iter!.next()
        employeeDataMap! = cast( java.util.HashMap, employeeRecordsMap!.get(badgeKey!) )
        
        sqlexec(historyChannel) badgeKey!, yyyymmddUpThroughIn$
        dim resultRow$:sqltmpl(historyChannel)
        
        resultRow$ = sqlfetch(historyChannel,err=no_award_date_found)
        employeeDataMap!.put("award_date", resultRow.award_date$)
        employeeRecordsMap!.put(badgeKey!, employeeDataMap!) 
        
        no_award_date_found:
    
    wend

    sqlclose(historyChannel)

    return    