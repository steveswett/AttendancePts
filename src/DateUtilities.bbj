REM /**
REM  * DateUtilities.bbj
REM  * @author stevett
REM  *
REM  */


rem * - - - - - - - - - - FUNCTIONS - - - - - - - - - -*

functions:


def fnGetCurrentTimestamp$(aDoIt)

    return date(0:"%Y%Mz%Dz%Hz%mz%sz")

fnend


def fnGetCurrentYYYYMMDD$(aDoIt)

    return date(0:"%Y%Mz%Dz")

fnend


def fnGetYYMDasMDYwithDayAbbrev$(aYYYYMMDD$)
    
    tmpJul = jul( num(aYYYYMMDD$(1,4)), num(aYYYYMMDD$(5,2)), num(aYYYYMMDD$(7,2)) )
    tmpDate$ = date(tmpJul:"%Mz/%Dz/%Yz %Ds")
    if tmpDate$(1,1) = "0" then tmpDate$(1,1) = " "
    return tmpDate$
      
fnend


def fnGetYYMDHMSasMDYwithTime$(aYYYYMMDDHHMMSS$)
    
    tmpJulDate = jul( num(aYYYYMMDDHHMMSS$(1,4)), num(aYYYYMMDDHHMMSS$(5,2)), num(aYYYYMMDDHHMMSS$(7,2)) )
    tmpHrs = num(aYYYYMMDDHHMMSS$(9,2))
    tmpMins$ = aYYYYMMDDHHMMSS$(11,2)
    tmpSecs$ = aYYYYMMDDHHMMSS$(13,2)
    tmpDate$ = date(tmpJulDate,tmpHrs:"%Mz/%D/%Yz %h:" + tmpMins$ + "." + tmpSecs$ + "%p")

REM  The following was expected to work, but doesn't:
REM      
REM     tmpHrsFromMins = num(aYYYYMMDDHHMMSS$(11,2)) / 60
REM     tmpHrsFromSecs = num(aYYYYMMDDHHMMSS$(13,2)) / 360
REM     tmpTotalHrs = tmpHrs + tmpHrsFromMins + tmpHrsFromSecs
REM     tmpDate$ = date(tmpJulDate,tmpTotalHrs:"%Mz/%Dz/%Yz %h:%mz:%sz%p")


    if tmpDate$(1,1) = "0" then tmpDate$(1,1) = " "
    return tmpDate$
      
fnend


def fnGetJulianDateFromYYYYMMDD(aYYYYMMDD$)

    tmpYr = num(aYYYYMMDD$(1,4))
    tmpMo = num(aYYYYMMDD$(5,2))
    tmpDay = num(aYYYYMMDD$(7,2))
    tmpResult = jul(tmpYr, tmpMo, tmpDay)

    return tmpResult

fnend


rem * - - - - - - - - - - ENTRY POINTS - - - - - - - - - -*


entry_points:


get_yymd_as_mdy_with_day_name:

    enter yyyymmddIn$, mdyDayAbbrevOut$
    
    gosub setup_constants
    
    mdyDayAbbrevOut$ = fnGetYYMDasMDYwithDayAbbrev$(yyyymmddIn$)
    
    exit
    
    
get_yymd_as_mdyy_with_slashes:

    enter yyyymmddIn$, trimLeadingZeroIn, mdyyWithSlashesOut$
    
    mdyyWithSlashesOut$ = yyyymmddIn$(5,2) + "/" + yyyymmddIn$(7,2) + "/" + yyyymmddIn$(1,4)
    
    if trimLeadingZeroIn and mdyyWithSlashesOut$(1,1) = "0" then
        mdyyWithSlashesOut$ = " " + mdyyWithSlashesOut$(2)
    endif
    
    exit
    
    
get_yymd_as_mdy_with_slashes:

    enter yyyymmddIn$, trimLeadingZeroIn, mdyWithSlashesOut$
    
    mdyWithSlashesOut$ = yyyymmddIn$(5,2) + "/" + yyyymmddIn$(7,2) + "/" + yyyymmddIn$(3,2)
    
    if trimLeadingZeroIn and mdyWithSlashesOut$(1,1) = "0" then
        mdyWithSlashesOut$ = " " + mdyWithSlashesOut$(2)
    endif
    
    exit


get_yymdhms_as_mdy_with_time:

    enter yyyymmddhhmmssIn$, mdyDayWithTimeOut$
    
    gosub setup_constants
    
    mdyDayWithTimeOut$ = fnGetYYMDHMSasMDYwithTime$(yyyymmddhhmmssIn$)
    
    exit
    
    
get_current_timestamp:

    enter yyyymmddhhmmss$
    
    gosub setup_constants
    
    yyyymmddhhmmss$ = fnGetCurrentTimestamp$(TRUE)
    
    exit
    
    
get_current_yyyymmdd:

    enter yyyymmdd$
    
    gosub setup_constants
    
    yyyymmdd$ = fnGetCurrentYYYYMMDD$(TRUE)
    
    exit
    
    
is_valid_yyyymmdd_date:

    enter yyyymmddTemp$, isValidDate
    
    gosub setup_constants

    isValidDate = TRUE
    
    tmpYr = num(yyyymmddTemp$(1,4))
    tmpMo = num(yyyymmddTemp$(5,2))
    tmpDay = num(yyyymmddTemp$(7,2))
    tmpResult = jul(tmpYr, tmpMo, tmpDay, err=bad_jul_date)
    goto good_jul_date

    bad_jul_date:
    isValidDate = FALSE
    
    good_jul_date:
    
    exit
    
    
get_days_between_inclusive:

    enter yyyymmddFrom$, yyyymmddTo$, daysBetween
    
    gosub setup_constants
    
    tmpFromJul = fnGetJulianDateFromYYYYMMDD(yyyymmddFrom$)
    tmpToJul = fnGetJulianDateFromYYYYMMDD(yyyymmddTo$)
    
    daysBetween = tmpToJul - tmpFromJul + 1
    
    exit
    
    
get_yyyymmdd_relative_to_today:

    enter daysBeforeMinusOrAfterPlusIn, yyyymmddOut$
    
    gosub get_relative_yyyymmdd
    
    exit


rem * - - - - - - - - - - SUBROUTINES - - - - - - - - - -*

subroutines:


REM  ------------------------------------------------------------
REM  Setup constants
REM  ------------------------------------------------------------


setup_constants:

    TRUE = 1
    FALSE = 0

    return

    
REM  ------------------------------------------------------------
REM  Get date relative to today
REM  ------------------------------------------------------------


REM  TODO: This could be replaced in the future with a Java time library like JODA

get_relative_yyyymmdd:

    call "ConfigVarsDAO.bbj::get_value", "wfmr.data.source.name", configVarFound, configVarDataType$, wfmrDataSource$

    wfmrDataChannel = sqlunt
    sqlopen(wfmrDataChannel) wfmrDataSource$

    sqlprep(wfmrDataChannel) "select convert(varchar(10), dateadd(day, ?, getdate()), 120) as relative_date"
    sqlexec(wfmrDataChannel) daysBeforeMinusOrAfterPlusIn
    
    dim resultRow$:sqltmpl(wfmrDataChannel)
    resultRow$ = sqlfetch(wfmrDataChannel,err=row_not_found)
    
    yyyymmddOut$ = resultRow.relative_date$(1,4) + resultRow.relative_date$(6,2) + resultRow.relative_date$(9,2) 
    
    row_not_found:
    
    sqlclose(wfmrDataChannel)

    return