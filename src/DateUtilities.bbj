REM /**
REM  * DateUtilities.bbj
REM  * @author stevett
REM  * 
REM  * Written: July 2015
REM  * 
REM  * Description: Miscellaneous date utilities
REM  *
REM  */

use java.util.Calendar
use java.util.Date
use java.text.SimpleDateFormat

declare java.util.Calendar calendar!
declare java.util.Date date!
declare java.text.SimpleDateFormat formatter!


rem * - - - - - - - - - - FUNCTIONS - - - - - - - - - -*

functions:


def fnGetJulianDateFromYYYYMMDD(aYYYYMMDD$)

    tmpYr = num(aYYYYMMDD$(1,4))
    tmpMo = num(aYYYYMMDD$(5,2))
    tmpDay = num(aYYYYMMDD$(7,2))
    tmpResult = jul(tmpYr, tmpMo, tmpDay)

    return tmpResult

fnend


rem * - - - - - - - - - - ENTRY POINTS - - - - - - - - - -*


entry_points:


get_yyyymmdd_with_hyphen_separators:

    enter yyyymmddIn$, yyyymmddWithHyphensOut$
    
    gosub setup_constants
    
    yyyymmddWithHyphensOut$ = yyyymmddIn$(1,4) + "-" + yyyymmddIn$(5,2) + "-" + yyyymmddIn$(7,2)
    
    exit


get_mdy_with_slashes_added:

    enter mmddyyIn$, mdyWithSlashesOut$
    
    gosub setup_constants
    
    gosub sub_get_mdy_with_slashes_added
    
    exit
    

convert_mmdddyy_to_20yymmdd:

    enter mmddyyIn$, yyyymmddOut$
    
    gosub setup_constants
    
    yyyymmddOut$ = "20" + mmddyyIn$(5,2) + mmddyyIn$(1,4) 
    
    exit
    

get_yymd_as_mdy_with_day_name:

    enter yyyymmddIn$, mdyDayAbbrevOut$
    
    gosub setup_constants
    
    gosub sub_get_yymd_as_mdy_with_day_name
    
    exit
    
    
get_yymd_as_mdyy_with_slashes:

    enter yyyymmddIn$, trimLeadingZeroIn, mdyyWithSlashesOut$
    
    gosub setup_constants
    
    gosub sub_get_yymd_as_mdyy_with_slashes
    
    exit
    
    
get_yymd_as_mdy_with_slashes:

    enter yyyymmddIn$, trimLeadingZeroIn, mdyWithSlashesOut$
    
    gosub setup_constants
    
    gosub sub_get_yymd_as_mdy_with_slashes
    
    exit


get_yymdhms_as_mdy_with_time:

    enter yyyymmddhhmmssIn$, mdyDayWithTimeOut$
    
    gosub setup_constants
    
    gosub sub_get_yymdhms_as_mdy_with_time
    
    exit
    
    
get_current_timestamp:

    enter yyyymmddhhmmss$
    
    gosub setup_constants
    
    yyyymmddhhmmss$ = date(0:"%Y%Mz%Dz%Hz%mz%sz")
    
    exit
    
    
get_timestamp_as_datetime_string:

    enter timestampIn$, datetimeStringOut$
    
    datetimeStringOut$ = timestampIn$(1,4) + "-" + timestampIn$(5,2) + "-" + timestampIn$(7,2) + " " + timestampIn$(9,2) + ":" + timestampIn$(11,2) + ":" + timestampIn$(13,2) 

    exit
    
    
get_current_yyyymmdd:

    enter yyyymmdd$
    
    gosub setup_constants
    
    yyyymmdd$ = date(0:"%Y%Mz%Dz")
    
    exit
    
    
is_valid_yyyymmdd_date:

    enter yyyymmddTemp$, isValidDate
    
    gosub setup_constants
    
    gosub sub_is_valid_yyyymmdd_date
    
    exit
    
    
get_days_between_inclusive:

    enter yyyymmddFrom$, yyyymmddTo$, daysBetween
    
    gosub setup_constants
    
    gosub sub_get_days_between_inclusive
    
    exit
    
    
get_seconds_between:

    enter yyyymmddhhmmssFrom$, yyyymmddhhmmssTo$, secondsBetween
    
    gosub setup_constants
    
    gosub sub_get_seconds_between
    
    exit
    
    
get_yyyymmdd_relative_to_today_in_days:

    enter daysBeforeMinusOrAfterPlusIn, yyyymmddOut$
    
    gosub setup_constants
    
    gosub sub_get_yyyymmdd_relative_to_today_in_days
    
    exit
    
    
get_relative_yyyymmdd_in_months:

    enter yyyymmddIn$, monthsBeforeMinusOrAfterPlusIn, yyyymmddOut$
    
    gosub setup_constants
    
    gosub sub_get_relative_yyyymmdd_in_months
    
    exit


rem * - - - - - - - - - - SUBROUTINES - - - - - - - - - -*

subroutines:


REM  ----------------------------------------------------------------------
REM  Get MMDDYY as MM/DD/YY
REM  ----------------------------------------------------------------------


sub_get_mdy_with_slashes_added:

    if len(mmddyyIn$) = 6 then
        mdyWithSlashesOut$ = mmddyyIn$(1,2) + "/" + mmddyyIn$(3,2) + "/" + mmddyyIn$(5,2)
    else
        mdyWithSlashesOut$ = mmddyyIn$
    endif

    return


REM  ----------------------------------------------------------------------
REM  Get the number of days, inclusive, between 2 YYYYMMDD dates
REM  ----------------------------------------------------------------------


sub_get_days_between_inclusive:
    
    tmpFromJul = fnGetJulianDateFromYYYYMMDD(yyyymmddFrom$)
    tmpToJul = fnGetJulianDateFromYYYYMMDD(yyyymmddTo$)
    
    daysBetween = tmpToJul - tmpFromJul + 1

    return


REM  ----------------------------------------------------------------------
REM  Is YYYYMMDD a valid date?
REM  ----------------------------------------------------------------------


sub_is_valid_yyyymmdd_date:

    isValidDate = TRUE
    
    tmpYr = num(yyyymmddTemp$(1,4))
    tmpMo = num(yyyymmddTemp$(5,2))
    tmpDay = num(yyyymmddTemp$(7,2))
    tmpResult = jul(tmpYr, tmpMo, tmpDay, err=bad_jul_date)
    goto good_jul_date

    bad_jul_date:
    isValidDate = FALSE
    
    good_jul_date:

    return


REM  ----------------------------------------------------------------------
REM  Get YYYYMMDD as MM/DD/YY
REM  ----------------------------------------------------------------------


sub_get_yymd_as_mdy_with_slashes:
    
    mdyWithSlashesOut$ = yyyymmddIn$(5,2) + "/" + yyyymmddIn$(7,2) + "/" + yyyymmddIn$(3,2)
    
    if trimLeadingZeroIn and mdyWithSlashesOut$(1,1) = "0" then
        mdyWithSlashesOut$ = " " + mdyWithSlashesOut$(2)
    endif

    return


REM  ----------------------------------------------------------------------
REM  Get YYYYMMDD as MM/DD/YYYY
REM  ----------------------------------------------------------------------


sub_get_yymd_as_mdyy_with_slashes:
    
    mdyyWithSlashesOut$ = yyyymmddIn$(5,2) + "/" + yyyymmddIn$(7,2) + "/" + yyyymmddIn$(1,4)
    
    if trimLeadingZeroIn and mdyyWithSlashesOut$(1,1) = "0" then
        mdyyWithSlashesOut$ = " " + mdyyWithSlashesOut$(2)
    endif


    return
    

REM  ----------------------------------------------------------------------
REM  Get YYYYMMDD as MM/DD/YY Tue
REM  ----------------------------------------------------------------------


sub_get_yymd_as_mdy_with_day_name:

    tmpJul = jul( num(yyyymmddIn$(1,4)), num(yyyymmddIn$(5,2)), num(yyyymmddIn$(7,2)) )
    tmpDate$ = date(tmpJul:"%Mz/%Dz/%Yz %Ds")
    if tmpDate$(1,1) = "0" then tmpDate$(1,1) = " "
    mdyDayAbbrevOut$ = tmpDate$

    return
    
    
REM  ----------------------------------------------------------------------
REM  Get YYYYMMDDHHMMSS as MM/DD/YY hh:mm.sspm
REM  ----------------------------------------------------------------------


sub_get_yymdhms_as_mdy_with_time:

    tmpJulDate = jul( num(yyyymmddhhmmssIn$(1,4)), num(yyyymmddhhmmssIn$(5,2)), num(yyyymmddhhmmssIn$(7,2)) )
    tmpHrs = num(yyyymmddhhmmssIn$(9,2))
    tmpMins$ = yyyymmddhhmmssIn$(11,2)
    tmpSecs$ = yyyymmddhhmmssIn$(13,2)
    tmpDate$ = date(tmpJulDate,tmpHrs:"%Mz/%D/%Yz %h:" + tmpMins$ + "." + tmpSecs$ + "%p")

REM  The following was expected to work, but doesn't:
REM      
REM     tmpHrsFromMins = num(yyyymmddhhmmssIn$(11,2)) / 60
REM     tmpHrsFromSecs = num(yyyymmddhhmmssIn$(13,2)) / 3600
REM     tmpTotalHrs = tmpHrs + tmpHrsFromMins + tmpHrsFromSecs
REM     tmpDate$ = date(tmpJulDate,tmpTotalHrs:"%Mz/%Dz/%Yz %h:%mz:%sz%p")


    if tmpDate$(1,1) = "0" then tmpDate$(1,1) = " "
    mdyDayWithTimeOut$ = tmpDate$

    return

    
REM  ----------------------------------------------------------------------
REM  Get YYYYMMDD date relative to today using months (plus/minus)
REM  ----------------------------------------------------------------------


sub_get_relative_yyyymmdd_in_months:

        calendar! = Calendar.getInstance()
        
        tmpYr = num(yyyymmddIn$(1,4))
        tmpMo = num(yyyymmddIn$(5,2))
        tmpDay = num(yyyymmddIn$(7,2))
        
        calendar!.set(tmpYr, tmpMo - 1, tmpDay)
        calendar!.add(Calendar.MONTH, monthsBeforeMinusOrAfterPlusIn)

        date! = calendar!.getTime()
        formatter! = new SimpleDateFormat("yyyyMMdd")
        yyyymmddOut$ = formatter!.format(date!)

        return


REM  ----------------------------------------------------------------------
REM  Get the number of seconds, inclusive, between 2 YYYYMMDDHHMMSS dates
REM  ----------------------------------------------------------------------


sub_get_seconds_between:

    REM  inputs: yyyymmddhhmmssFrom$, yyyymmddhhmmssTo$
    
        argInYyyymmddhhmmss$ = yyyymmddhhmmssFrom$
        gosub sub_get_ms_for_yyyymmddhhmmss
        msFrom = argOutMsForYyyymmddhhmmss
    
        argInYyyymmddhhmmss$ = yyyymmddhhmmssTo$
        gosub sub_get_ms_for_yyyymmddhhmmss
        msTo = argOutMsForYyyymmddhhmmss
        
        msDiff = msTo - msFrom
        
        if msDiff > 0 then
            secondsBetween = round(msDiff / 1000, 0)
        else
          secondsBetween = 0
        endif

    return


REM  ----------------------------------------------------------------------
REM  Get the number of milliseconds in an "argInYyyymmddhhmmss$"
REM  ----------------------------------------------------------------------


sub_get_ms_for_yyyymmddhhmmss:
    
        calendar! = Calendar.getInstance()
        
        yr = num(argInYyyymmddhhmmss$(1,4))
        mo = num(argInYyyymmddhhmmss$(5,2))
        dy = num(argInYyyymmddhhmmss$(7,2))
        hr = num(argInYyyymmddhhmmss$(9,2))
        mn = num(argInYyyymmddhhmmss$(11,2))
        sec = num(argInYyyymmddhhmmss$(13,2))
        
        rem  set(int year, int month, int date, int hourOfDay, int minute, int second)
        rem  Sets the values for the fields YEAR, MONTH, DAY_OF_MONTH, HOUR, MINUTE, and SECOND.
        
        calendar!.set(yr, mo - 1, dy, hr, mn, sec)
        
        argOutMsForYyyymmddhhmmss = calendar!.getTimeInMillis()

return

    
REM  ----------------------------------------------------------------------
REM  Get YYYYMMDD date relative to today using days (plus/minus)
REM  ----------------------------------------------------------------------


sub_get_yyyymmdd_relative_to_today_in_days:

REM     New Way:

        calendar! = Calendar.getInstance()
        calendar!.add(Calendar.DAY_OF_YEAR, daysBeforeMinusOrAfterPlusIn)

        date! = calendar!.getTime()
        formatter! = new SimpleDateFormat("yyyyMMdd")
        yyyymmddOut$ = formatter!.format(date!)

REM     Old Way:

REM     call "ConfigVarsDAO.bbj::get_value", "wfmr.data.source.name", configVarFound, configVarDataType$, wfmrDataSource$
REM 
REM     wfmrDataChannel = sqlunt
REM     sqlopen(wfmrDataChannel) wfmrDataSource$
REM 
REM     sqlprep(wfmrDataChannel) "select convert(varchar(10), dateadd(day, ?, getdate()), 120) as relative_date"
REM     sqlexec(wfmrDataChannel) daysBeforeMinusOrAfterPlusIn
REM     
REM     dim resultRow$:sqltmpl(wfmrDataChannel)
REM     resultRow$ = sqlfetch(wfmrDataChannel,err=row_not_found)
REM     
REM     yyyymmddOut$ = resultRow.relative_date$(1,4) + resultRow.relative_date$(6,2) + resultRow.relative_date$(9,2) 
REM     
REM     row_not_found:
REM     
REM     sqlclose(wfmrDataChannel)

    return


REM  ----------------------------------------------------------------------
REM  Setup constants
REM  ----------------------------------------------------------------------


setup_constants:

    TRUE = 1
    FALSE = 0

    return
    