REM /**
REM  * LoadLicenseUsage.bbj
REM  * @author stevett
REM  *
REM  * Written: December 4, 2015
REM  * 
REM  * Description: Load License Usage into database for later analysis
REM  * 
REM  */


use java.util.HashMap
use java.lang.String
use org.apache.commons.codec.binary.Base64

declare java.util.HashMap recordsMap!
declare java.util.HashMap oneRecordMap!


declare java.lang.String encodedEncrypted!
declare java.lang.String decoded!
declare java.lang.String decrypted!



begin


rem *- - - - - - - - - - CONSTANTS - - - - - - - - - -*

constants:


    TRUE = 1
    FALSE = 0


rem *- - - - - - - - - - FUNCTIONS - - - - - - - - - -*

functions:


rem *- - - - - - - - - - MAIN ROUTINE - - - - - - - - - -*

main_routine:

    call "DateUtilities.bbj::get_current_timestamp", currentTimestamp$


    REM  Process licenses:

        gosub prep_and_open_lmstat_file
        gosub process_lmstat_input_records
        gosub close_lmstat_file

    REM  Process database connections:
    
        gosub load_database_connections



rem *- - - - - - - - - - EOJ - - - - - - - - - -*

eoj:

    release
    
    end


rem *- - - - - - - - - - SUBROUTINES - - - - - - - - - -*


    rem ------------------------------------------------------------------------------------------
    rem  Load database connections into BasisConnectionStatistics table
    rem ------------------------------------------------------------------------------------------
    
load_database_connections:

    call "ConfigVarsDAO.bbj::get_value", "cryptpass", configVarFound, configVarDataType$, cryptpass$

    call "ConfigVarsDAO.bbj::get_value", "bbj.services.admin.user", configVarFound, configVarDataType$, adminUser$

    call "ConfigVarsDAO.bbj::get_value", "bbj.services.admin.hex.encrypted.password", configVarFound, configVarDataType$, adminEncryptedPwd$
    
    hexEncrypted$ = ath(adminEncryptedPwd$)
    adminDecryptedPwd$ = decrypt(hexEncrypted$,mode="cryptpass=" + cryptpass$)
    admin!=BBjAPI().getAdmin(adminUser$, adminDecryptedPwd$)

    connectionsVector! = admin!.getJdbcOdbcConnections()
    
    connectionCount = connectionsVector!.size()
    
    if connectionCount > 0 then
    
        recordsMap! = new java.util.HashMap()
    
        for i = 0 to connectionCount - 1
        
            connectionInfo! = connectionsVector!.get(i)
    
            oneRecordMap! = new java.util.HashMap()
            
            connectionId = num(connectionInfo!.getID())
            user$ = str(connectionInfo!.getUser())
            host$ = str(connectionInfo!.getHost())
            dbName$ = str(connectionInfo!.getDatabase())
            connectTime$ = str(connectionInfo!.getConnectTime())
            connectTime$ = connectTime$(1, 19)
            
            oneRecordMap!.put("user", user$)
            oneRecordMap!.put("host", host$)
            oneRecordMap!.put("db_name", dbName$)
            oneRecordMap!.put("connect_time", connectTime$)
            
            recordsMap!.put(connectionId, oneRecordMap!)
            
        next i
        
        REM  Write connection info to database:
        
        call "BasisConnectionStatisticsDAO.bbj::add_connection_records", currentTimestamp$, recordsMap!

        
    endif


    return
    

    rem ------------------------------------------------------------------------------------------
    rem  Prepare and open "lmstat" file
    rem ------------------------------------------------------------------------------------------
    
prep_and_open_lmstat_file:

    removeCmd$ = "rm -f /tmp/lmstat-*" 
    returnCode = scall(removeCmd$)
    
    lmstatCmdOutputFile$ = "/tmp/lmstat-" + currentTimestamp$ + ".txt"

    lmstatCmd$ = "ssh nmcaold ""/usr/local/bbj/blm/lmutil lmstat -a | grep ', start' > " + lmstatCmdOutputFile$ + """" 
    returnCode = scall(lmstatCmd$)
    
    scpCmd$ = "scp nmcaold:" + lmstatCmdOutputFile$ + " " + lmstatCmdOutputFile$
    returnCode = scall(scpCmd$)
    
    lmstatCmdChannel = unt
    open (lmstatCmdChannel) lmstatCmdOutputFile$

    return


    rem ------------------------------------------------------------------------------------------
    rem  Close the "lmstat" file
    rem ------------------------------------------------------------------------------------------
    
close_lmstat_file:

    close (lmstatCmdChannel)

    return

    
    rem ------------------------------------------------------------------------------------------
    rem  Process records in the input file from the Linux "lmstat" command.  Put them in the
    rem  recordsMap! for sending to the database.
    rem ------------------------------------------------------------------------------------------
    
process_lmstat_input_records:

    recordsMap! = new java.util.HashMap()

    recordNo = 0

    while TRUE
    
        read (lmstatCmdChannel,err=*break) inputRecord$
        REM print "inputRecord$ = ", inputRecord$
        
        recordNo = recordNo + 1
        
        gosub read_one_lmstat_record
    
    wend
    
    if recordsMap!.size() > 0 then
        call "BasisLicenseUsageDAO.bbj::add_license_records", currentTimestamp$, recordsMap!
    endif

    return

    
    rem ------------------------------------------------------------------------------------------
    rem  Read one record
    rem ------------------------------------------------------------------------------------------
    
read_one_lmstat_record:

    REM  Sample record: 
    REM  
    REM  aalcum nmcanew5 /dev/pts/847 (v11.0) (nmcaold/27000 54000), start Fri 12/4 11:10
    
    REM  Another sample record (slightly different; see right edge)
    REm  root 0a0a0136 BASIS15131f019e7X (v15.0) (nmcaold/27000 92113), start Sat 12/5 6:49, 356 licenses

    gosub init_input_fields
    
    rawFieldList! = java.util.Arrays.asList(new java.lang.String(inputRecord$).split(" "))
    iter! = rawFieldList!.iterator()
    fieldNo = 0
    
    while iter!.hasNext()
    
        field! = iter!.next()
        
        if len ( cvs(field!, 3) )
        
            fieldNo = fieldNo + 1
            
            switch fieldNo
            
                case 1
                    user$ = field!
                    break
            
                case 2
                    server$ = field!
                    break
            
                case 3
                    device$ = field!
                    break
            
                case 4
                    version$ = field!
                    break
            
                case 5
                    portInfo1of2$ = field!
                    break
            
                case 6
                    portInfo2of2$ = field!
                    break
            
                case 7
                    startConstant$ = field!
                    break
            
                case 8
                    startDayName$ = field!
                    break
            
                case 9
                    startDate$ = field!
                    break
            
                case 10
                    startTime$ = field!
                    break
            
                case 11
                    groupedCount$ = field!
                    break
            
            swend
            
        endif
    
    wend
    
    
    REM  Calculated fields:
    
    trimmedVersion$ = version$( 3, len(version$) - 3 )
    
    portInfo$ = portInfo1of2$ + " " + portInfo2of2$
    
    portInfo$ = portInfo$( 2, len(portInfo$) - 3 )
    
    startInfo$ = startDayName$ + " " + startDate$ + " " + startTime$  
    
    if startInfo$( len(startInfo$), 1 ) = "," then
        startInfo$ = startInfo$(1, len(startInfo$) - 1)
    endif


    REM  Use -1 to turn off this output
    
    if recordNo = -1 then
        gosub print_input_fields
        gosub print_computed_fields
        REM  input "hit any key to continue", ignoreInput$    
    endif
    
    oneRecordMap! = new java.util.HashMap()
    
    oneRecordMap!.put("user", user$)
    oneRecordMap!.put("server", server$)
    oneRecordMap!.put("device", device$)
    oneRecordMap!.put("version", trimmedVersion$)
    oneRecordMap!.put("port_info", portInfo$)
    oneRecordMap!.put("start_info", startInfo$)  
    oneRecordMap!.put("grouped_count", groupedCount$)
    
    recordsMap!.put(recordNo, oneRecordMap!)

    return

    
    rem ------------------------------------------------------------------------------------------
    rem  Initialize input fields
    rem ------------------------------------------------------------------------------------------
    
init_input_fields:

    user$ = ""
    server$ = ""
    device$ = ""
    version$ = ""
    portInfo1of2$ = ""
    portInfo2of2$ = ""
    startConstant$ = ""
    startDayName$ = ""
    startDate$ = ""
    startTime$ = ""
    groupedCount$ = "1"

    return
    
    
    rem ------------------------------------------------------------------------------------------
    rem  Print input fields
    rem ------------------------------------------------------------------------------------------
    
print_input_fields:

    print ""
    print "recordNo = ", recordNo
    print "user$ = ", user$
    print "server$ = ", server$
    print "device$ = ", device$
    print "version$ = ", version$
    print "portInfo1of2$ = ", portInfo1of2$
    print "portInfo2of2$ = ", portInfo2of2$
    print "startConstant$ = ", startConstant$
    print "startDayName$ = ", startDayName$
    print "startDate$ = ", startDate$
    print "startTime$ = ", startTime$ 
    print "groupedCount$ = ", groupedCount$

    return
    
    
    rem ------------------------------------------------------------------------------------------
    rem  Print computed fields
    rem ------------------------------------------------------------------------------------------
    
print_computed_fields:

    print ""
    print "trimmedVersion$ = ", trimmedVersion$
    print "portInfo$ = ", portInfo$
    print "startInfo$ = ", startInfo$

    return
