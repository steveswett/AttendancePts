REM /**
REM  * AttendPtsStsPrompt.bbj
REM  * @author stevett
REM  *
REM  * Written: September 2015
REM  * 
REM  * Description: Attendance Points Status Inquiry - prompt screen.
REM  * 
REM  */


use java.util.LinkedHashMap

declare java.util.LinkedHashMap deptsMap!
declare java.util.LinkedHashMap levelsMap!


begin


rem *- - - - - - - - - - CONSTANTS - - - - - - - - - -*

constants:


TRUE = 1
FALSE = 0

SHOW_FIELD_TERMINATOR_PRESSED = FALSE

SHIFT_FIELD_NO = 1
PTS_FROM_FIELD_NO = 2
PTS_TO_FIELD_NO = 3
DATE_FROM_FIELD_NO = 4
DATE_TO_FIELD_NO = 5
ORDER_BY_FIELD_NO = 6

FIRST_FIELD_NO = SHIFT_FIELD_NO
LAST_FIELD_NO =  ORDER_BY_FIELD_NO

F2_PROMPT$ = "F2=Prompt"


REM     Note about INPUTE:
REM     
REM     Any value less than 63 will cause the input function to exit setting the CTL value to the function value. 
REM     The "help" function causes an exit with CTL=-1.

REM     For consistency across programs regarding function keys (not edit keys):
REM     Input values: F1, F2, F3 ... F10 = $11$, $12$, $13$ ... $1A$
REM     Output values: F1, F2, F3 ... F10 = $01$, $02$, $03$ ... $0A$

F2_CUSTOM_INPUT_VALUE$ = $12$
F2_CTL_OUTPUT_VALUE$ = $02$

F4_CUSTOM_INPUT_VALUE$ = $14$
F4_CTL_OUTPUT_VALUE$ = $04$

TAB_CUSTOM_INPUT_VALUE$ = $09$
TAB_CTL_OUTPUT_VALUE$ = $19$

BACKTAB_CUSTOM_INPUT_VALUE$ = $83$
BACKTAB_CTL_OUTPUT_VALUE$ = $1A$

PAGE_UP_CUSTOM_INPUT_VALUE$ = $84$
PAGE_UP_CTL_OUTPUT_VALUE$ = $1B$

PAGE_DOWN_CUSTOM_INPUT_VALUE$ = $85$
PAGE_DOWN_CTL_OUTPUT_VALUE$ = $1C$


rem *- - - - - - - - - - FUNCTIONS - - - - - - - - - -*

functions:


def fnHasRecordsBefore%(aDoIt)

    return topLeftMapIndex > 1

fnend


def fnHasRecordsAfter%(aDoIt)

    return topLeftMapIndex + RECORDS_PER_PAGE - 1 < deptsMapSize

fnend


rem *- - - - - - - - - - MAIN ROUTINE - - - - - - - - - -*

main_routine:

    gosub init
    
    gosub display_screen_headings
    
    gosub display_data
    
    gosub handle_input


rem *- - - - - - - - - - EOJ - - - - - - - - - -*

eoj:

    release
    end


rem *- - - - - - - - - - SUBROUTINES - - - - - - - - - -*


    rem ------------------------------------------------------------------------------------------
    rem  One-time intialization
    rem ------------------------------------------------------------------------------------------

    
init:

        rem  The 'ET' (end type ahead control) below is VERY IMPORTANT when using SHIFT+TAB.  Without it, each
        rem  SHIFT+TAB would actually be treated as two inputs: SHIFT+TAB followed by TAB.

    print 'UC', 'CS', 'ET'
    
        rem Set color.  In the following, $03$ is the background (blue) and $3F$ is the foreground (white).
        rem The bits for that were: 0 0 1 1 1 1 1 1  (<-- foreground)   0 0 0 0 0 0 1 1  (<-- background)
        
    print 'RGB'($033F$);   rem blue background, white foreground
    rem print 'RGB'($033C$);   rem blue background, yellow foreground
    rem print 'RGB'($0330$);   rem blue background, red foreground
    
    print 'CURSOR'("rep_block");   rem This only works in BBj -- not Pro/5


        rem For info on function key programming, see this article: http://www.basis.com/kb00025
        rem Also see Basis help: PRO/5 > User's Ref > Character Devices > Terminals > Function and Edit Keys
    
        rem Below is how the 'FL' (function keys) and 'EL' (edit keys) mnemonics are used to assign a key a value
        
        rem "2" - load only one key
        rem $01$ - means the F2 key (0-based)
        rem chr(1) - means the custom value of the function key is 1 byte long
        rem F2_CUSTOM_INPUT_VALUE$ - is the custom INPUT value of the key
        
    print 'FL', "2", $01$, chr(1), F2_CUSTOM_INPUT_VALUE$,
    print 'FL', "2", $03$, chr(1), F4_CUSTOM_INPUT_VALUE$,
    print 'FL', "2", $05$, chr(1), F6_CUSTOM_INPUT_VALUE$,

    rem print 'EL', "2", $3C$, chr(1), BACKTAB_CUSTOM_INPUT_VALUE$,
      
rem    Try Unix ($0B$ instead of $3C$) -- didn't work              
rem    print 'EL', "2", $0B$, chr(1), BACKTAB_CUSTOM_INPUT_VALUE$,

    print 'EL', "2", $3C$, chr(1), BACKTAB_CUSTOM_INPUT_VALUE$,    
    print 'EL', "2", $06$, chr(1), PAGE_UP_CUSTOM_INPUT_VALUE$,
    print 'EL', "2", $07$, chr(1), PAGE_DOWN_CUSTOM_INPUT_VALUE$,
    
    f2Pair$ = F2_CUSTOM_INPUT_VALUE$ + F2_CTL_OUTPUT_VALUE$
    f4Pair$ = F4_CUSTOM_INPUT_VALUE$ + F4_CTL_OUTPUT_VALUE$
    pageupPair$ = PAGE_UP_CUSTOM_INPUT_VALUE$ + PAGE_UP_CTL_OUTPUT_VALUE$
    pagedownPair$ = PAGE_DOWN_CUSTOM_INPUT_VALUE$ + PAGE_DOWN_CTL_OUTPUT_VALUE$
    tabPair$ = TAB_CUSTOM_INPUT_VALUE$ + TAB_CTL_OUTPUT_VALUE$
    backtabPair$ = BACKTAB_CUSTOM_INPUT_VALUE$ + BACKTAB_CTL_OUTPUT_VALUE$
    
    resultIgnored$ = stbl("!TERMS", f2Pair$ + f4Pair$ + pageupPair$ + pagedownPair$ + tabPair$ + backtabPair$ + stbl("!TERMS"))
    resultIgnored$ = stbl("!EDIT", f2Pair$ + f4Pair$ + pageupPair$ + pagedownPair$ + tabPair$ + backtabPair$ + stbl("!EDIT"))
    
    deptsMap! = new java.util.LinkedHashMap()
    call "WFMRDeptDAO.bbj::get_ids_and_names", deptsMap!
    
    levelsMap! = new java.util.LinkedHashMap()
    call "AttendPtsLevDAO.bbj::get_thresholds_and_descrs", levelsMap! 
    
    deptName$ = ""
    deptId = 0
    shift$ = "1"
    ptsFrom = .1
    ptsTo = 10
    
    fromDate$ = "000000"
    toDate$ = "000000"
    
    orderBy$ = "1"
    
    return


    rem ------------------------------------------------------------------------------------------
    rem  Display the screen headings
    rem ------------------------------------------------------------------------------------------


display_screen_headings:

    call "TerminalUtilities.bbj::display_screen_headings", pgm(-2), "ATTENDANCE POINTS STATUS" 

    return

    
    rem ------------------------------------------------------------------------------------------
    rem  Display data on page, besides page headings
    rem ------------------------------------------------------------------------------------------

    
display_data:

    print @(0,0), 'CE', 'UC'
    
    gosub display_screen_headings
    
    print @(2, 3), "Records to list:"
    
    print @(20, 3), "Dept:   ", cvs(deptName$, 2), "    (F2=prompt)"
    
    print @(20, 4), "Shift:  ", 'BU', shift$, 'EU'
    print @(32, 4), "(1, 2, 3)"
    
    print @(20, 5), "Points: ", 'BU', str(ptsFrom:"##.0"), 'EU', " - ", 'BU', str(ptsTo:"##.0"), 'EU'
    
    if len(fromDate$) < 6 then
        fromDate$ = pad(fromDate$, 6, "0")
    endif
    
    if len(toDate$) < 6 then
        toDate$ = pad(toDate$, 6, "0")
    endif
    
    call "DateUtilities.bbj::get_mdy_with_slashes_added", fromDate$, fmtFromDate$
    call "DateUtilities.bbj::get_mdy_with_slashes_added", toDate$, fmtToDate$

    print @(20, 6), "Dates:  ", 'BU', fmtFromDate$, 'EU', " - ", 'BU', fmtToDate$, 'EU', "  (optional)"
    
    print @(20, 8), "(Can leave above fields blank to list all records.)"
    
    print @(9, 10), "Order by:  ", 'BU', orderBy$, 'EU'
    print @(20, 11), "1 - Points total (high to low)"
    print @(20, 12), "2 - Employee name"
    
    print @(0,14), "FYI - the warning levels are as follows:"
    
    row = 15
    
    iter! = levelsMap!.keySet().iterator()
    
    while iter!.hasNext()
    
      level! = iter!.next()
      row = row + 1
      
      print @(19, row), str(level!:"#0")
      print @(22, row), "="
      print @(24, row), levelsMap!.get(level!)
      
    wend

    
    actionLabel$ = "F4=Exit   Enter=Continue"
    
    print @(0,21), actionLabel$ 
    
    if SHOW_FIELD_TERMINATOR_PRESSED then print @(5,22), 'CL', "Field terminator (savedCTL): ", savedCTL

    return

    
    rem ------------------------------------------------------------------------------------------
    rem  Handle input, which will be F4 or Page Up or Page Down
    rem ------------------------------------------------------------------------------------------

    
handle_input:

    currentFieldNo = SHIFT_FIELD_NO

    while TRUE
        
        switch currentFieldNo

            case SHIFT_FIELD_NO
                print @(28, 4), 'BU'
                inpute 28, 4, 1, "", shift$
                print @(29, 4), 'EU'
                break
            
            case PTS_FROM_FIELD_NO
                print @(28, 5), 'BU'
                inputn 28, 5, "##.0", "##.0", "", 5, ptsFrom
                print @(32, 5), 'EU'
                break
            
            case PTS_TO_FIELD_NO
                print @(35, 5), 'BU'
                inputn 35, 5, "##.0", "##.0", "", 5, ptsTo
                print @(39, 5), 'EU'
                break
            
            case ORDER_BY_FIELD_NO
                print @(20, 10), 'BU'
                inpute 20, 10, 1, "", orderBy$
                print @(21, 10), 'EU'
                break

            case DATE_FROM_FIELD_NO
                print @(28, 6), 'BU'
                inpute 28, 6, "00/00/00", "", fromDate$
                print @(36, 6), 'EU' 
                break

            case DATE_TO_FIELD_NO
                print @(39, 6), 'BU'
                inpute 39, 6, "00/00/00", "", toDate$
                print @(47, 6), 'EU' 
                break

        swend
            
        gosub clear_err_msg

        savedCTL = CTL
        isTabbing = FALSE
        needToBreak = FALSE
        
        switch savedCTL
        
            case ASC(F2_CTL_OUTPUT_VALUE$)

                    call "WFMRDeptPopup.bbj::show_popup", 3, 5, deptId, deptName$
                    print @(32, 4), cvs(deptName$, 2), "    (F2=prompt)"
        
                    break

            case ASC(F4_CTL_OUTPUT_VALUE$)
                    needToBreak = TRUE
        
                    break
        
            case ASC(TAB_CTL_OUTPUT_VALUE$)
                    isTabbing = TRUE
                    gosub set_field_no_after_tabbing
                    
                    break
                    
            case ASC(BACKTAB_CTL_OUTPUT_VALUE$)
                    isTabbing = TRUE
                    gosub set_field_no_after_back_tabbing
                    
                    break
                    
            case 0
                    gosub validate_input
                    
                    if len(errMsg$) > 0 then
                        gosub display_err_msg
                    else
                        call "AttendPtsStsList.bbj", deptId, deptName$, shift$, ptsFrom, ptsTo, orderBy$, levelsMap!, datesEntered, fromDate$, toDate$ 
                    endif
                    
                    break
        swend

        if needToBreak then break

        if isTabbing and SHOW_FIELD_TERMINATOR_PRESSED then
            print @(55,21), 'CL', "CTL, savedCTL: ", CTL, ", ", savedCTL
        endif

        if !(isTabbing) and len(errMsg$) = 0 then
            gosub display_data
        endif
        
    wend
    
    return

    
    rem ------------------------------------------------------------------------------------------
    rem  set_field_no_after_tabbing
    rem ------------------------------------------------------------------------------------------
    
    
set_field_no_after_tabbing:

    currentFieldNo = currentFieldNo + 1
    if currentFieldNo > LAST_FIELD_NO then currentFieldNo = FIRST_FIELD_NO
    
    return
    
    
    rem ------------------------------------------------------------------------------------------
    rem  set_field_no_after_back_tabbing
    rem ------------------------------------------------------------------------------------------
    
    
set_field_no_after_back_tabbing:

    currentFieldNo = currentFieldNo - 1
    if currentFieldNo < FIRST_FIELD_NO then currentFieldNo = LAST_FIELD_NO
    
    return
    
    
    rem ------------------------------------------------------------------------------------------
    rem  clear_err_msg
    rem ------------------------------------------------------------------------------------------
    
    
clear_err_msg:

    print @(0,22), 'CL'
    errMsg$ = ""
        
    return
    
    
    rem ------------------------------------------------------------------------------------------
    rem  display_err_msg
    rem ------------------------------------------------------------------------------------------
    
    
display_err_msg:

    print @(0,22), 'CL', 'BR', pad(errMsg$, 80, "L", " "), 'ER'
        
    return
    
    
    rem ------------------------------------------------------------------------------------------
    rem  validate_input
    rem ------------------------------------------------------------------------------------------
    
    
validate_input:

    REM  Validate Shift

    if len( cvs(shift$, 3) ) > 0 and shift$ <> "1" and shift$ <> "2" and shift$ <> "3" then
        errMsg$ = "Shift must be 1, 2 or 3."
        currentFieldNo = SHIFT_FIELD_NO
        goto end_validate
    endif
    
    
    REM  Validate Points

    if ptsFrom < 0 or ptsFrom > 99 then
        errMsg$ = "Points (from) must be a value between 0 and 99."
        currentFieldNo = PTS_FROM_FIELD_NO
        goto end_validate
    endif

    if ptsTo < 0 or ptsTo > 99 then
        errMsg$ = "Points (to) must be a value between 0 and 99."
        currentFieldNo = PTS_TO_FIELD_NO
        goto end_validate
    endif
    
    if ptsFrom > ptsTo then
        errMsg$ = "The points ""from"" value cannot be greater than the ""to"" value."
        currentFieldNo = PTS_FROM_FIELD_NO
        goto end_validate
    endif


    REM  Validate Dates
    
    call "StringUtilities.bbj::replace_all_in_string", fromDate$, "0", " ", fromTest$ 
    call "StringUtilities.bbj::replace_all_in_string", toDate$, "0", " ", toTest$
    fromTest$ = cvs(fromTest$,3) 
    toTest$ = cvs(toTest$,3) 

    datesEntered = len(fromTest$) > 0 or len(toTest$) > 0
    
    if datesEntered then

        if len(fromDate$) < 6 then
            errMsg$ = "The From Date must contain 6 digits (MM/DD/YY)."
            currentFieldNo = DATE_FROM_FIELD_NO
            goto end_validate
        endif
        
        fromYyyymmddTemp$ = "20" + fromDate$(5,2) + fromDate$(1,4) 
        call "DateUtilities.bbj::is_valid_yyyymmdd_date", fromYyyymmddTemp$, isValidDate 
    
        if !(isValidDate) then
            errMsg$ = "From Date is not valid (MM/DD/YY)."
            currentFieldNo = DATE_FROM_FIELD_NO
            goto end_validate
        endif
        
        if len(toDate$) < 6 then
            errMsg$ = "The To Date must contain 6 digits (MM/DD/YY)."
            currentFieldNo = DATE_TO_FIELD_NO
            goto end_validate
        endif
        
        toYyyymmddTemp$ = "20" + toDate$(5,2) + toDate$(1,4) 
        call "DateUtilities.bbj::is_valid_yyyymmdd_date", toYyyymmddTemp$, isValidDate 
    
        if !(isValidDate) then
            errMsg$ = "To Date is not valid (MM/DD/YY)."
            currentFieldNo = DATE_TO_FIELD_NO
            goto end_validate
        endif
        
        if num(fromYyyymmddTemp$) > num(toYyyymmddTemp$) then
            errMsg$ = "The From Date cannot be after the To Date."
            currentFieldNo = DATE_FROM_FIELD_NO
            goto end_validate
        endif 

    endif
    
    
    
    REM  Validate Order By

    if orderBy$ <> "1" and orderBy$ <> "2" then
        errMsg$ = "Order by must be 1 or 2."
        currentFieldNo = ORDER_BY_FIELD_NO
        goto end_validate
    endif
    
  
    end_validate:
        
    return
