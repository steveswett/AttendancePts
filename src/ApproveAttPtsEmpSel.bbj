REM /**
REM  * ApproveAttPtsEmpSel.bbj
REM  * @author stevett
REM  *
REM  * Written: July 2015
REM  * 
REM  * Description: Employee selection screen for Supervisor Approval of Attendance Points.
REM  *
REM  */

use java.util.LinkedHashMap
use java.util.HashMap
use java.util.Vector

declare java.util.LinkedHashMap workDateRows!
declare java.util.HashMap dateQtys!

declare java.util.LinkedHashMap employeesMap!
declare java.util.HashMap employeeDataMap!

declare java.util.LinkedHashMap exceptionDefsMap!

declare java.util.Vector attPtsWorkIds!


enter shiftIn$, deptIdIn, deptNameIn$, dateIn!, dateQtys!, overallSavedAnyRecordsOut


rem *- - - - - - - - - - CONSTANTS - - - - - - - - - -*

constants:


TRUE = 1
FALSE = 0

RECORDS_PER_PAGE = 5
COLUMNS_PER_PAGE = 1
RECORDS_PER_COLUMN = 5
ROWS_PER_RECORD = 2
START_ROW_FOR_LIST = 10
END_ROW_FOR_LIST = START_ROW_FOR_LIST + RECORDS_PER_COLUMN - 1 
SHOW_FIELD_TERMINATOR_PRESSED = FALSE

LINE_FIELD_NO = 1



REM     Note about INPUTE:
REM     
REM     Any value less than 63 will cause the input function to exit setting the CTL value to the function value. 
REM     The "help" function causes an exit with CTL=-1.


F2_CUSTOM_INPUT_VALUE$ = $81$
F2_CTL_OUTPUT_VALUE$ = $02$

F4_CUSTOM_INPUT_VALUE$ = $82$
F4_CTL_OUTPUT_VALUE$ = $04$

F6_CUSTOM_INPUT_VALUE$ = $83$
F6_CTL_OUTPUT_VALUE$ = $06$

TAB_CUSTOM_INPUT_VALUE$ = $09$
TAB_CTL_OUTPUT_VALUE$ = $19$

BACKTAB_CUSTOM_INPUT_VALUE$ = $15$
BACKTAB_CTL_OUTPUT_VALUE$ = $1A$

PAGE_UP_CUSTOM_INPUT_VALUE$ = $84$
PAGE_UP_CTL_OUTPUT_VALUE$ = $1B$

PAGE_DOWN_CUSTOM_INPUT_VALUE$ = $85$
PAGE_DOWN_CTL_OUTPUT_VALUE$ = $1C$


rem *- - - - - - - - - - FUNCTIONS - - - - - - - - - -*

functions:


def fnHasRecordsBefore%(aDoIt)

    return topLeftMapIndex > 1

fnend


def fnHasRecordsAfter%(aDoIt)

    return topLeftMapIndex + RECORDS_PER_PAGE - 1 < employeesMapSize

fnend


rem *- - - - - - - - - - MAIN ROUTINE - - - - - - - - - -*

main_routine:

    gosub init
    
    gosub load_employees_map
    
    gosub display_data
    
    gosub handle_input


rem *- - - - - - - - - - EOJ - - - - - - - - - -*

eoj:

    exit


rem *- - - - - - - - - - SUBROUTINES - - - - - - - - - -*


    rem ------------------------------------------------------------------------------------------
    rem  One-time intialization
    rem ------------------------------------------------------------------------------------------

    
init:

        rem  The 'ET' (end type ahead control) below is VERY IMPORTANT when using SHIFT+TAB.  Without it, each
        rem  SHIFT+TAB would actually be treated as two inputs: SHIFT+TAB followed by TAB.

    print 'UC', 'CS', 'ET'
    
        rem Set color.  In the following, $03$ is the background (blue) and $3F$ is the foreground (white).
        rem The bits for that were: 0 0 1 1 1 1 1 1  (<-- foreground)   0 0 0 0 0 0 1 1  (<-- background)
        
    print 'RGB'($033F$);   rem blue background, white foreground
    rem print 'RGB'($033C$);   rem blue background, yellow foreground
    rem print 'RGB'($0330$);   rem blue background, red foreground
    
    print 'CURSOR'("rep_block");   rem This only works in BBj -- not Pro/5


        rem For info on function key programming, see this article: http://www.basis.com/kb00025
        rem Also see Basis help: PRO/5 > User's Ref > Character Devices > Terminals > Function and Edit Keys
    
        rem Below is how the 'FL' (function keys) and 'EL' (edit keys) mnemonics are used to assign a key a value
        
        rem "2" - load only one key
        rem $01$ - means the F2 key (0-based)
        rem chr(1) - means the custom value of the function key is 1 byte long
        rem F2_CUSTOM_INPUT_VALUE$ - is the custom INPUT value of the key
        
    print 'FL', "2", $01$, chr(1), F2_CUSTOM_INPUT_VALUE$,
    print 'FL', "2", $03$, chr(1), F4_CUSTOM_INPUT_VALUE$,
    print 'FL', "2", $05$, chr(1), F6_CUSTOM_INPUT_VALUE$,
    print 'EL', "2", $3C$, chr(1), BACKTAB_CUSTOM_INPUT_VALUE$,    
    print 'EL', "2", $06$, chr(1), PAGE_UP_CUSTOM_INPUT_VALUE$,
    print 'EL', "2", $07$, chr(1), PAGE_DOWN_CUSTOM_INPUT_VALUE$,
    
    f2Pair$ = F2_CUSTOM_INPUT_VALUE$ + F2_CTL_OUTPUT_VALUE$
    f4Pair$ = F4_CUSTOM_INPUT_VALUE$ + F4_CTL_OUTPUT_VALUE$
    f6Pair$ = F6_CUSTOM_INPUT_VALUE$ + F6_CTL_OUTPUT_VALUE$
    pageupPair$ = PAGE_UP_CUSTOM_INPUT_VALUE$ + PAGE_UP_CTL_OUTPUT_VALUE$
    pagedownPair$ = PAGE_DOWN_CUSTOM_INPUT_VALUE$ + PAGE_DOWN_CTL_OUTPUT_VALUE$
    tabPair$ = TAB_CUSTOM_INPUT_VALUE$ + TAB_CTL_OUTPUT_VALUE$
    backtabPair$ = BACKTAB_CUSTOM_INPUT_VALUE$ + BACKTAB_CTL_OUTPUT_VALUE$
    
    resultIgnored$ = stbl("!TERMS", f2Pair$ + f4Pair$ + f6Pair$ + pageupPair$ + pagedownPair$ + tabPair$ + backtabPair$ + stbl("!TERMS"))
    resultIgnored$ = stbl("!EDIT", f2Pair$ + f4Pair$ + f6Pair$ + pageupPair$ + pagedownPair$ + tabPair$ + backtabPair$ + stbl("!EDIT"))
    
    exceptionDefsMap! = new java.util.LinkedHashMap()
    call "WFMRExceptionDefsDAO.bbj::get_ids_and_names", exceptionDefsMap!
    
    topLeftMapIndex = 1
    
    overallSavedAnyRecordsOut = FALSE
    
    return


    rem ------------------------------------------------------------------------------------------
    rem  load_employees_map
    rem ------------------------------------------------------------------------------------------


load_employees_map:

    call "TerminalUtilities.bbj::display_please_wait", "loading"

    employeesMap! = new java.util.LinkedHashMap()
    call "AttendPtsWorkDAO.bbj::get_employees_for_date", shiftIn$, deptIdIn, dateIn!, employeesMap!
    employeesMapSize = employeesMap!.size()
    
    return


    rem ------------------------------------------------------------------------------------------
    rem  reload_date_qtys
    rem ------------------------------------------------------------------------------------------


reload_date_qtys:

    workDateRows! = new java.util.LinkedHashMap()
    tmpDate = num(dateIn!)
    call "AttendPtsWorkDAO.bbj::get_dates_with_totals", shiftIn$, deptIdIn, tmpDate, tmpDate, workDateRows!
    dateQtys! = cast( java.util.HashMap, workDateRows!.get(dateIn!) )
    
    return
    
    


    rem ------------------------------------------------------------------------------------------
    rem  Display the screen headings
    rem ------------------------------------------------------------------------------------------


display_screen_headings:

    call "TerminalUtilities.bbj::display_screen_headings", pgm(-2), "SUPERVISOR APPROVAL OF POINTS" 

    return

    
    rem ------------------------------------------------------------------------------------------
    rem  Display data on page, besides page headings
    rem ------------------------------------------------------------------------------------------

    
display_data:

    print @(0,0), 'CE', 'UC'
    
    gosub display_screen_headings
    
    print @(0,3), "Dept: ", deptNameIn$
    print @(71,3), "Shift: ", shiftIn$
      
    unformattedDate$ = dateIn!
    call "DateUtilities.bbj::get_yymd_as_mdy_with_day_name", unformattedDate$, formattedDate$
    
    print @(0,5), formattedDate$ 
    
    qtyTotal = dateQtys!.get("total")
    qtyPosted = dateQtys!.get("posted")
    qtyNotPosted = qtyTotal - qtyPosted
    qtyApproved = dateQtys!.get("A")
    qtyEdited = dateQtys!.get("E")
    qtyFMLAPending = dateQtys!.get("F")
    qtyNotHandled = dateQtys!.get("N")
    
    print @(23, 5), "Total:", str(qtyTotal:"##0")
    print @(37, 5), "Posted:", str(qtyPosted:"##0")
    print @(53, 5), "Unposted:", str(qtyNotPosted:"##0")
    
    print @(14, 6), "DISP:  Approved:", str(qtyApproved:"##0")
    print @(35, 6), "Edited:", str(qtyEdited:"##0")
    print @(47, 6), "FMLA Pend:", str(qtyFMLAPending:"##0")
    print @(62, 6), "Not Handled:", str(qtyNotHandled:"##0")
    
    print @(0, 8), "LIN  EMPLOYEE"
    print @(25, 8), "DISPOSITION  SYSTEM  CODE  PTS  DESCRIPTION"
    print @(74, 8), "POSTED"
    
    count = 0
    displayedCount = 0
    anyChangedSincedPosted = FALSE
    
    dim idsArray![1:RECORDS_PER_PAGE]
    
    iter! = employeesMap!.keySet().iterator()
    
    while iter!.hasNext()
    
      idKey! = iter!.next()
      count = count + 1
      
      if count < topLeftMapIndex then continue
      if count > topLeftMapIndex + RECORDS_PER_PAGE - 1 then break
      
      displayedCount = displayedCount + 1
      
      idsArray![displayedCount] = idKey!

      employeeDataMap! = cast( java.util.HashMap, employeesMap!.get(idKey!) )
      
      empName$ = employeeDataMap!.get("last_first_mi")
      if len(empName$) > 20 then empName$ = empName$(1, 20)
      
      wfmrExceptionId! = employeeDataMap!.get("wfmr_exc_def_id")
      wfmrExceptionDescr$ = exceptionDefsMap!.get(wfmrExceptionId!)
      if len(wfmrExceptionDescr$) > 17 then wfmrExceptionDescr$ = wfmrExceptionDescr$(1, 17)
      
      erpNote$ = employeeDataMap!.get("erp_note")
      if len(erpNote$) > 17 then erpNote$ = erpNote$(1, 17)
      
      trimmedWFMRLastMod$ = cvs(employeeDataMap!.get("wfmr_exc_lastmod"), 3)
      trimmedPostedTimestamp$ = cvs(employeeDataMap!.get("posted_timestamp"), 3)
      wasPosted = len(trimmedPostedTimestamp$) > 0

      row = START_ROW_FOR_LIST + displayedCount * ROWS_PER_RECORD - ROWS_PER_RECORD
      
      print @(0, row), pad( str(displayedCount), 2, "R"), "." 
      print @(5, row), empName$
      print @(32, row), employeeDataMap!.get("disp_cd")
      print @(38, row), "WFMR"
      print @(46, row), wfmrExceptionId!
      print @(52, row), str( employeeDataMap!.get("wfmr_pts_assess"):"#.0" )
      print @(57, row), wfmrExceptionDescr$
      print @(78, row), iff(wasPosted, "Y", "N")
      
      
      rem str(qtyPosted:"##0")
      
      if wasPosted and trimmedWFMRLastMod$ > trimmedPostedTimestamp$ then
        print @(79, row), "*"
        anyChangedSincedPosted = TRUE
      endif 
      
      print @(38, row + 1), "ERP"
      print @(47, row + 1), employeeDataMap!.get("erp_cd")
      print @(52, row + 1), str( employeeDataMap!.get("erp_pts_assessed"):"#.0" )
      print @(57, row + 1), erpNote$
      
    wend

    print @(0, 21), "Line: ", 'BU', " ", 'EU', " (A=All)"
    
    canPageUp = fnHasRecordsBefore%(TRUE)
    canPageDown = fnHasRecordsAfter%(TRUE)
    
    actionLabel$ = "F4=Exit   "
    
    if canPageUp then actionLabel$ = actionLabel$ + "Page Up=Prev Page   " 
    if canPageDown then actionLabel$ = actionLabel$ + "Page Down=Next Page   "
    
    if anyChangedSincedPosted then
        actionLabel$ = actionLabel$ + "   *changed since posted"
    endif
    
    print @(17,21), actionLabel$ 
    
    if SHOW_FIELD_TERMINATOR_PRESSED then print @(5,22), 'CL', "Field terminator (savedCTL): ", savedCTL

    return

    
    rem ------------------------------------------------------------------------------------------
    rem  Handle input, which will be F4 or Page Up or Page Down
    rem ------------------------------------------------------------------------------------------

    
handle_input:

    currentFieldNo = LINE_FIELD_NO

    while TRUE
        
        if currentFieldNo = LINE_FIELD_NO then
            print @(6, 21), 'BU'
            inpute 6, 21, 1, "", line$ 
            print @(7, 21), 'EU' 
        endif
            
        gosub clear_err_msg

        savedCTL = CTL
        isTabbing = FALSE
        needToBreak = FALSE
        
        switch savedCTL
        
            case ASC(F4_CTL_OUTPUT_VALUE$)
                    needToBreak = TRUE
        
                    break
        
            case ASC(PAGE_UP_CTL_OUTPUT_VALUE$)
                    if canPageUp then
                        gosub set_top_left_map_index_for_page_up
                    endif
        
                    break
                    
            case ASC(PAGE_DOWN_CTL_OUTPUT_VALUE$)
                    if canPageDown then
                        gosub set_top_left_map_index_for_page_down
                    endif
                    
                    break
                    
            case ASC(TAB_CTL_OUTPUT_VALUE$)
                    isTabbing = TRUE
                    gosub set_field_no_after_tabbing
                    
                    break
                    
            case ASC(BACKTAB_CTL_OUTPUT_VALUE$)
                    isTabbing = TRUE
                    gosub set_field_no_after_back_tabbing
                    
                    break
                    
            case 0
                    gosub validate_input
                    
                    if len(errMsg$) > 0 then
                        gosub display_err_msg
                    else
                        attPtsWorkIds! = new java.util.Vector()
                        
                        if line$ = "A" then
                            iter! = employeesMap!.keySet().iterator()
                            
                            while iter!.hasNext()
                                idKey! = iter!.next()
                                attPtsWorkIds!.add(idKey!)
                            wend
                        else
                            attPtsWorkIds!.add( idsArray![ num(line$) ] )
                        endif
   
                        call "ApproveAttPtsEdits.bbj", shiftIn$, deptIdIn, deptNameIn$, dateIn!, attPtsWorkIds!, savedAnyRecords
                        
                        if savedAnyRecords then
                            overallSavedAnyRecordsOut = TRUE
                            gosub load_employees_map
                            gosub reload_date_qtys
                        endif
                        
                    endif
                    
                    break
        swend

        if needToBreak then break

        if isTabbing and SHOW_FIELD_TERMINATOR_PRESSED then
            print @(55,21), 'CL', "CTL, savedCTL: ", CTL, ", ", savedCTL
        endif

        if !(isTabbing) and len(errMsg$) = 0 then
            gosub display_data
        endif
        
    wend
    
    return

    
    rem ------------------------------------------------------------------------------------------
    rem  When Page Up is pressed, calculate a new topLeftMapIndex
    rem ------------------------------------------------------------------------------------------
    
    
set_top_left_map_index_for_page_up:

    topLeftMapIndex = topLeftMapIndex - RECORDS_PER_PAGE
    
    if topLeftMapIndex < 1 then topLeftMapIndex = 1

    return

    
    rem ------------------------------------------------------------------------------------------
    rem  When Page Down is pressed, calculate a new topLeftMapIndex
    rem ------------------------------------------------------------------------------------------
    
    
set_top_left_map_index_for_page_down:

    topLeftMapIndex = topLeftMapIndex + RECORDS_PER_PAGE
    
    if topLeftMapIndex > employeesMapSize then topLeftMapIndex = employeesMapSize

    return    
    
    
    rem ------------------------------------------------------------------------------------------
    rem  set_field_no_after_tabbing
    rem ------------------------------------------------------------------------------------------
    
    
set_field_no_after_tabbing:

    currentFieldNo = currentFieldNo + 1
    if currentFieldNo > 2 then currentFieldNo = 1
    
    return
    
    
    rem ------------------------------------------------------------------------------------------
    rem  set_field_no_after_back_tabbing
    rem ------------------------------------------------------------------------------------------
    
    
set_field_no_after_back_tabbing:

    currentFieldNo = currentFieldNo - 1
    if currentFieldNo < 1 then currentFieldNo = 2
    
    return
    
    
    rem ------------------------------------------------------------------------------------------
    rem  clear_err_msg
    rem ------------------------------------------------------------------------------------------
    
    
clear_err_msg:

    print @(0,22), 'CL'
    errMsg$ = ""
        
    return
    
    
    rem ------------------------------------------------------------------------------------------
    rem  display_err_msg
    rem ------------------------------------------------------------------------------------------
    
    
display_err_msg:

    print @(0,22), 'CL', 'BR', pad(errMsg$, 80, "L", " "), 'ER'
        
    return
    
    
    rem ------------------------------------------------------------------------------------------
    rem  validate_input
    rem ------------------------------------------------------------------------------------------
    
    
validate_input:

    hasLineErr = FALSE
    
    if line$ = "A" then goto end_validate_input
    
    line = num(line$,err=invalid_line_no_format)
    
    if line < 1 or line > displayedCount then
        hasLineErr = TRUE
    endif
    
    remainder = mod(line, 1)
    
    if remainder <> 0 then
        hasLineErr = TRUE
    endif
    
    goto skip_line_no_format
    
    invalid_line_no_format:
        hasLineErr = TRUE
    
    skip_line_no_format:
    
    if hasLineErr then
        errMsg$ = "Invalid line number."
        currentFieldNo = LINE_FIELD_NO
    endif
    
    end_validate_input:
  
        
    return
