REM /**
REM  * WFMRReasonDAO.bbj
REM  * @author stevett
REM  *
REM  * Written: August 2015
REM  * 
REM  * Description: Data Access Object for WFMR table reason
REM  *
REM  */


use java.util.LinkedHashMap

declare java.util.LinkedHashMap reasonsMap!


rem *- - - - - - - - - - CONSTANTS - - - - - - - - - -*

rem  This section never runs for multi-entry point called programs, so subroutine "setup_constants" is called
rem  for each entry point.


rem *- - - - - - - - - - FUNCTIONS - - - - - - - - - -*

functions:



rem *- - - - - - - - - - ENTRY POINTS - - - - - - - - - -*

entry_points:

get_ids_and_names:

    enter reasonsMap!
    
    gosub setup_constants
    
    gosub load_defs_map
    
    exit


rem *- - - - - - - - - - SUBROUTINES - - - - - - - - - -*

subroutines:


REM  ------------------------------
REM  setup_constants
REM  ------------------------------

setup_constants:

    TRUE = 1
    FALSE = 0

    wfmrDataSource$ = ""
    call "ConfigVarsDAO.bbj::get_value", "wfmr.data.source.name", configVarFound, configVarDataType$, wfmrDataSource$
    
    REASONS_SELECT_STMT$ = "select reason_id, name from reason order by name"
    
    return


REM  ------------------------------
REM  load_defs_map
REM  ------------------------------

load_defs_map:

    defsChannel = sqlunt
    sqlopen(defsChannel) wfmrDataSource$

    sqlprep(defsChannel) REASONS_SELECT_STMT$

    reasonsMap!.clear()

    sqlexec(defsChannel) 
    dim resultRow$:sqltmpl(defsChannel)
    
    while TRUE
    
        resultRow$ = sqlfetch(defsChannel,err=*break)
        reasonsMap!.put(resultRow.reason_id, cvs(resultRow.name$, 2) )
        
    wend
    
    sqlclose(defsChannel)

    return
