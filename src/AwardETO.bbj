REM /**
REM  * AwardETO.bbj
REM  * @author stevett
REM  * 
REM  * Written: August 2015
REM  * 
REM  * Description: Scheduled job used to award Earned Time Off.
REM  *
REM  */


use java.util.HashMap
use java.util.LinkedHashMap
use java.util.HashSet
use java.util.LinkedHashSet

declare java.util.LinkedHashMap noTimeOffEmployeeRecordsMap!
declare java.util.LinkedHashMap someTimeOffEmployeeRecordsMap!
declare java.util.LinkedHashMap combinedEmployeeRecordsMap!

declare java.util.HashMap employeeDataMap!

declare java.util.HashSet employeesWithZeroPtsSet!
declare java.util.HashSet employeesWithETOAwardsSet!

declare java.util.LinkedHashSet employeesEarningNewETOSet!


begin


rem *- - - - - - - - - - CONSTANTS - - - - - - - - - -*

constants:

TRUE = 1
FALSE = 0

OUTPUT_FILE_MIME_TYPE$ = "text/csv"


rem *- - - - - - - - - - FUNCTIONS - - - - - - - - - -*


rem *- - - - - - - - - - MAIN ROUTINE - - - - - - - - - -*

main_routine:

    gosub init
    
    gosub award_eto
    
    release

end


rem *- - - - - - - - - - SUB-ROUTINES - - - - - - - - - -*


REM  --------------------------------------------------------------------------------
REM  init
REM  --------------------------------------------------------------------------------

init:

    call "ConfigVarsDAO.bbj::get_value", "eto.first.eligible.award.date", configVarFound, configVarDataType$, firstEligibleAwardDate$

    call "ConfigVarsDAO.bbj::get_value", "eto.award.hours", configVarFound, configVarDataType$, etoAwardHrs$
    
    call "ConfigVarsDAO.bbj::get_value", "use.windows.mailsend", configVarFound, configVarDataType$, useWindowsMailSend$
    useWindowsMailSend = num(useWindowsMailSend$)
    
    call "ConfigVarsDAO.bbj::get_value", "mail.recipients.eto.awards", configVarFound, configVarDataType$, mailRecipients$
    
    call "ConfigVarsDAO.bbj::get_value", "adp.company.code", configVarFound, configVarDataType$, adpCompanyCode$
    
    call "ConfigVarsDAO.bbj::get_value", "eto.award.lag.days", configVarFound, configVarDataType$, etoAwardLagDays$
    etoAwardLagDays = num(etoAwardLagDays$)

    return


REM  --------------------------------------------------------------------------------
REM  Award ETO to eligible employees
REM  --------------------------------------------------------------------------------


award_eto:


    REM  Skip processing if first eligible award date hasn't been reached
    
    call "DateUtilities.bbj::get_current_timestamp", currentTimeStamp$
    
    yyyymmddCurrent$ = currentTimeStamp$(1,8)
    
    if yyyymmddCurrent$ < firstEligibleAwardDate$ then
        goto skip_eto_awarding
    endif

    
    REM  Compute date range for "90 day window"
    
    fromRelativeDays = 0 - 90 - etoAwardLagDays
    toRelativeDays = 0 - etoAwardLagDays

    call "DateUtilities.bbj::get_yyyymmdd_relative_to_today_in_days", fromRelativeDays, yyyymmddFrom$
    call "DateUtilities.bbj::get_yyyymmdd_relative_to_today_in_days", toRelativeDays, yyyymmddTo$
    
    
    gosub do_standard_90_day_window_group
    
    gosub do_non_standard_90_plus_day_window_group
    
    gosub combine_and_process_qualified_eto_awardees 
    
    
    skip_eto_awarding:

    return


REM  --------------------------------------------------------------------------------
REM  Do processing for employees who are in the standard 90-day window (no time off requests)
REM  --------------------------------------------------------------------------------


do_standard_90_day_window_group:

    REM  Step 1. Get a list of employees having NO time off requests in the past 90 days
    
    noTimeOffEmployeeRecordsMap! = new java.util.LinkedHashMap()

    call "WFMREmployeeTimeOffDAO.bbj::get_employees_with_no_time_off", noTimeOffEmployeeRecordsMap!, yyyymmddFrom$, yyyymmddTo$

    
    REM  Step 2. Get a list of employees having NO attendance pts in the past 90 days
    
    employeesWithZeroPtsSet! = new java.util.HashSet()
    
    call "AttendPtsDAO.bbj::get_employees_with_zero_pts_for_date_range", yyyymmddFrom$, yyyymmddTo$, employeesWithZeroPtsSet!

    
    REM  Step 3. Get a list of employees having any ETO awards in the past 90 days
    
    employeesWithETOAwardsSet! = new java.util.HashSet()
    
    call "ETOHistoryDAO.bbj::get_employees_with_awards_during_date_range", yyyymmddFrom$, yyyymmddTo$, employeesWithETOAwardsSet!
    
    
    REM Step 4. Build list of eligible employees and flag the "...EmployeeRecordsMap!" as "qualifies" when it does

    iter! = noTimeOffEmployeeRecordsMap!.keySet().iterator()
    
    while iter!.hasNext()
    
        badgeKey! = iter!.next()
        
        if !(employeesWithZeroPtsSet!.contains(badgeKey!)) then continue
        
        if employeesWithETOAwardsSet!.contains(badgeKey!) then continue
        
        employeeDataMap! = cast( java.util.HashMap, noTimeOffEmployeeRecordsMap!.get(badgeKey!) )
        employeeDataMap!.put("qualifies", TRUE)
        employeeDataMap!.put("std", TRUE)
        noTimeOffEmployeeRecordsMap!.put(badgeKey!, employeeDataMap!) 
    
    wend
    

    return


REM  --------------------------------------------------------------------------------
REM  Do processing for employees who have SOME time off requests and more than 90 days need to be considered
REM  --------------------------------------------------------------------------------


do_non_standard_90_plus_day_window_group:

    REM  Step 1. Get a list of employees having SOME time off requests in the past 90 days
    
    someTimeOffEmployeeRecordsMap! = new java.util.LinkedHashMap()

    call "WFMREmployeeTimeOffDAO.bbj::get_employees_with_some_time_off", someTimeOffEmployeeRecordsMap!, yyyymmddFrom$, yyyymmddTo$
    
    
    REM  Step 2. Compute and tack on "custom" start date (prior to the standard 90-day window) for each employee -- 
    REM          depending on how much time off they had.  Each start date is stored as an entry with key "start_date"
    REM          in the HashMap within someTimeOffEmployeeRecordsMap! 
    
    call "WFMREmployeeTimeOffDAO.bbj::compute_start_date_for_90_day_window_for_employees", someTimeOffEmployeeRecordsMap!, yyyymmddFrom$, yyyymmddTo$, fromRelativeDays


    REM  Step 3. Compute and tack on attendance pts during the 90-day+ custom window for each employee.  The number of
    REM          attendance points is stored as an entry with key "attend_pts"
    REM          in the HashMap within someTimeOffEmployeeRecordsMap!   
    
    call "AttendPtsDAO.bbj::compute_pts_for_90_day_window_for_employees", someTimeOffEmployeeRecordsMap!, yyyymmddTo$


    REM  Step 4. Compute and tack on most recent ETO award history date for each employee.  The date is stored 
    REM          as an entry with key "award_history_date"
    REM          in the HashMap within someTimeOffEmployeeRecordsMap!   

    call "ETOHistoryDAO.bbj::compute_award_history_for_90_day_window_for_employees", someTimeOffEmployeeRecordsMap!, yyyymmddTo$


    REM Step 5. Build list of eligible employees and flag the "...EmployeeRecordsMap!" as "qualifies" when it does

    iter! = someTimeOffEmployeeRecordsMap!.keySet().iterator()
    
    while iter!.hasNext()
    
        badgeKey! = iter!.next()
        employeeDataMap! = cast( java.util.HashMap, someTimeOffEmployeeRecordsMap!.get(badgeKey!) )
        
        attendPts! = employeeDataMap!.get("attend_pts")
        if attendPts! > 0 then continue

        if employeeDataMap!.containsKey("award_date") then
            awardDate$ = employeeDataMap!.get("award_date")
            startDate90DayWindow$ = employeeDataMap!.get("start_date")
            if awardDate$ >= startDate90DayWindow$ then continue
        endif
        
        employeeDataMap!.put("qualifies", TRUE)
        employeeDataMap!.put("std", FALSE)
        someTimeOffEmployeeRecordsMap!.put(badgeKey!, employeeDataMap!) 
    
    wend

    return
    

REM  --------------------------------------------------------------------------------
REM  Combine and process all employees who have qualified to receive an ETO award
REM  --------------------------------------------------------------------------------


combine_and_process_qualified_eto_awardees:

    combinedEmployeeRecordsMap! = new java.util.LinkedHashMap()
    combinedEmployeeRecordsMap!.putAll(noTimeOffEmployeeRecordsMap!)
    combinedEmployeeRecordsMap!.putAll(someTimeOffEmployeeRecordsMap!)
    
    employeesEarningNewETOSet! = new java.util.LinkedHashSet()
    
    call "DateUtilities.bbj::get_yymd_as_mdy_with_slashes", yyyymmddFrom$, FALSE, formattedFromDate$
    call "DateUtilities.bbj::get_yymd_as_mdy_with_slashes", yyyymmddTo$, FALSE, formattedToDate$

    call "DateUtilities.bbj::get_yymd_as_mdyy_with_slashes", yyyymmddTo$, FALSE, formattedADPDate$
    
    lineFeed$ = iff(useWindowsMailSend, "<br/>", $0A$)
    bodyDetail$ = ""
    prevStd = -1
    
    iter! = combinedEmployeeRecordsMap!.keySet().iterator()
    
    while iter!.hasNext()
    
        badgeKey! = iter!.next()
        employeeDataMap! = cast( java.util.HashMap, combinedEmployeeRecordsMap!.get(badgeKey!) )
        
        if employeeDataMap!.containsKey("qualifies") then
            std = employeeDataMap!.get("std")

            employeesEarningNewETOSet!.add(badgeKey!)
            
            if std <> prevStd then
                bodyDetail$ = bodyDetail$ + lineFeed$ + "The following employees had " + iff(std, "NO", "SOME") + " time off requests during the 90-day period" + iff(std, "", " (and therefore have various ""from"" dates)") + ":" + lineFeed$ + lineFeed$
                prevStd = std
            endif
            
            bodyDetail$ = bodyDetail$ + cvs(employeeDataMap!.get("last_name"), 2) + ", " + cvs(employeeDataMap!.get("first_name"), 2) + " (" + badgeKey! + ") has no attend pts from " 

            if std then
                bodyDetail$ = bodyDetail$ + formattedFromDate$ + " through " + formattedToDate$
            else
                yyyymmddStartDate$ = employeeDataMap!.get("start_date")
                call "DateUtilities.bbj::get_yymd_as_mdy_with_slashes", yyyymmddStartDate$, FALSE, formattedStartDate$
                bodyDetail$ = bodyDetail$ + formattedStartDate$ + " through " + formattedToDate$
            endif
            
            bodyDetail$ = bodyDetail$ + lineFeed$
             
        endif
    
    wend
    
    numberOfEmployeesEarningNewETO = employeesEarningNewETOSet!.size() 
    
    if numberOfEmployeesEarningNewETO > 0 then
    
        REM  Step 1. Fetch ADP employee numbers:
        
        call "EmployeeMasterDAO.bbj::append_empno_to_map_of_maps", combinedEmployeeRecordsMap!
    
        REM  Step 2. Write output file for ADP 

        outputFileName$="/usr/tmpfiles/eto_awards_" + yyyymmddTo$ + ".csv"
        erase outputFileName$,ERR=*next
        string outputFileName$
        
        outputFileChannel = unt
        open(outputFileChannel) outputFileName$
        
        print(outputFileChannel) "TransactionType,PositionID,TimeOffPolicyName,ReasonCodes,TransactionStartDate,TransactionStartTime,TransactionAmount,TransactonUnit,SendToPayroll"

        iter! = employeesEarningNewETOSet!.iterator()
        
        while iter!.hasNext()
        
            badgeKey! = iter!.next()
            employeeDataMap! = cast( java.util.HashMap, combinedEmployeeRecordsMap!.get(badgeKey!) )
            empNo$ = employeeDataMap!.get("empno")
            
            positionID$ = adpCompanyCode$ + pad(empno$, 6, "R", "0")
            
            print(outputFileChannel) "External Awards,", positionID$, ",ETO,,", formattedADPDate$, ",," + etoAwardHrs$ + ",hours,"
        
        wend

        close(outputFileChannel)
        
        
        REM  Step 3. Write award history records
        
        call "ETOHistoryDAO.bbj::add_award_records", employeesEarningNewETOSet!, yyyymmddTo$, 8

    endif

    
    REM  Send an e-mail -- even if nobody qualifies.
        
    subject$ = "ETO awards for " + formattedADPDate$ + iff(numberOfEmployeesEarningNewETO = 0, " (none)", "")
    
    if numberOfEmployeesEarningNewETO > 0 then
        body$ = "The following " + str(numberOfEmployeesEarningNewETO) + " employee(s) were awarded ETO.  " 
        body$ = body$ + "Please use the attached file to import these awards into ADP." + lineFeed$ + bodyDetail$
    else
        body$ = "No employees were awarded ETO."
    endif
        
    body$ = body$ + lineFeed$ + lineFeed$ + "Generated from ETO Awards program (" + pgm(-2) + ") by user " + info(3, 2) + "."

    if numberOfEmployeesEarningNewETO > 0 then
        call "MailUtilities.bbj::send_email_msg_with_attachment", mailRecipients$, subject$, body$, outputFileName$, OUTPUT_FILE_MIME_TYPE$, mailReturnCode
    else
        call "MailUtilities.bbj::send_simple_email_msg", mailRecipients$, subject$, body$, mailReturnCode
    endif
    

    return