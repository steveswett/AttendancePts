REM /**
REM  * AwardETO.bbj
REM  * @author stevett
REM  *
REM  */


use java.util.HashMap
use java.util.LinkedHashMap
use java.util.HashSet
use java.util.LinkedHashSet

declare java.util.LinkedHashMap noTimeOffEmployeeRecordsMap!
declare java.util.LinkedHashMap someTimeOffEmployeeRecordsMap!
declare java.util.LinkedHashMap combinedEmployeeRecordsMap!

declare java.util.HashSet employeesWithZeroPtsSet!
declare java.util.HashSet employeesWithETOAwardsSet!

declare java.util.LinkedHashSet employeesEarningNewETOSet!


begin


rem *- - - - - - - - - - CONSTANTS - - - - - - - - - -*


rem *- - - - - - - - - - FUNCTIONS - - - - - - - - - -*


rem *- - - - - - - - - - MAIN ROUTINE - - - - - - - - - -*

    gosub init
    
    gosub award_eto

end


rem *- - - - - - - - - - SUB-ROUTINES - - - - - - - - - -*


REM  --------------------------------------------------------------------------------
REM  init
REM  --------------------------------------------------------------------------------

init:

    call "ConfigVarsDAO.bbj::get_value", "eto.first.eligible.award.date", configVarFound, configVarDataType$, firstEligibleAwardDate$

    return


REM  --------------------------------------------------------------------------------
REM  Award ETO to eligible employees
REM  --------------------------------------------------------------------------------


award_eto:


    REM  Step 1. Skip processing if first eligible award date hasn't been reached
    
    call "DateUtilities.bbj::get_current_timestamp", currentTimeStamp$
    
    yyyymmddCurrent$ = currentTimeStamp$(1,8)
    
    if yyyymmddCurrent$ < firstEligibleAwardDate$ then
        goto skip_eto_awarding
    endif 
    
    
    REM  Step 2. Get "90 days ago" date

    call "DateUtilities.bbj::get_yyyymmdd_relative_to_today", -90, yyyymmddNinetyDaysAgo$


    REM  Step 3. Get a list of employees having NO attendance pts in the past 90 days
    
    employeesWithZeroPtsSet! = new java.util.HashSet()
    
    call "AttendPtsDAO.bbj::get_employees_with_zero_pts_for_date_range", yyyymmddNinetyDaysAgo$, yyyymmddCurrent$, employeesWithZeroPtsSet!

    
    REM Step 4. Get a list of employees having any ETO awards in the past 90 days
    
    employeesWithETOAwardsSet! = new java.util.HashSet()
    
    call "ETOHistoryDAO.bbj::get_employees_with_awards_during_date_range", yyyymmddNinetyDaysAgo$, yyyymmddCurrent$, employeesWithETOAwardsSet!
    
    
    REM  Step 5. Get a list of employees having NO time off requests in the past 90 days
    
    noTimeOffEmployeeRecordsMap! = new java.util.LinkedHashMap()

    call "WFMREmployeeTimeOffDAO.bbj::get_employees_with_no_time_off", noTimeOffEmployeeRecordsMap!
    
    
    REM  Step 6. Get a list of employees having SOME time off requests in the past 90 days

    someTimeOffEmployeeRecordsMap! = new java.util.LinkedHashMap()
    
    
    REM  Step 7. Do special handline for "SOME time off" folks
    
    
    REM Step 8. Combine "NO time off" and "SOME time off" structures
    
    combinedEmployeeRecordsMap! = new java.util.LinkedHashMap(noTimeOffEmployeeRecordsMap!)
    combinedEmployeeRecordsMap!.putAll(someTimeOffEmployeeRecordsMap!)
    
    REM Step 9. Build list of eligible employees (combined structures, no attendance pts, no ETO awards)
    
    employeesEarningNewETOSet! = new java.util.LinkedHashSet()
    
    iter! = combinedEmployeeRecordsMap!.keySet().iterator()
    
    while iter!.hasNext()
    
        badgeKey! = iter!.next()
        
        if !(employeesWithZeroPtsSet!.contains(badgeKey!)) then continue
        
        if employeesWithETOAwardsSet!.contains(badgeKey!) then continue
        
        employeesEarningNewETOSet!.add(badgeKey!)
    
    wend
    
    if employeesEarningNewETOSet!.size() > 0 then
        gosub process_qualified_eto_awardees
    endif     
    
    
    skip_eto_awarding:

    return


REM  --------------------------------------------------------------------------------
REM  Process all employees who have qualified to receive an ETO award
REM  --------------------------------------------------------------------------------


process_qualified_eto_awardees:


    call "ETOHistoryDAO.bbj::add_award_records", employeesEarningNewETOSet!, yyyymmddCurrent$, 8
    
    print "Number of ETO awardees = ", employeesEarningNewETOSet!.size()
     

REM     iter! = employeesEarningNewETOSet!.iterator()
REM     
REM     while iter!.hasNext()
REM     
REM         badgeKey! = iter!.next()
REM         
REM         print "badge = ", badgeKey!
REM     
REM     wend
    
    return