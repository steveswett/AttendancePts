REM /**
REM  * AttendPtsDAO.bbj
REM  * @author stevett
REM  *
REM  */


use java.util.LinkedHashMap
use java.util.HashMap

declare java.util.LinkedHashMap attPtsWorkRecordsToPostMap!
declare java.util.HashMap attPtsWorkDataMap!
declare java.util.HashMap postingStatsMap!
declare java.util.HashMap qtysInsertedMap!
declare java.util.HashMap qtysUpdatedMap!


rem *- - - - - - - - - - CONSTANTS - - - - - - - - - -*

rem  This section never runs for multi-entry point called programs, so subroutine "setup_constants" is called
rem  for each entry point.


rem *- - - - - - - - - - FUNCTIONS - - - - - - - - - -*

functions:



rem *- - - - - - - - - - ENTRY POINTS - - - - - - - - - -*

entry_points:

post_work_records:

    enter attPtsWorkRecordsToPostMap!, postingStatsMap!
    
    gosub setup_constants
    
    gosub post_work_records_map
    
    exit


rem *- - - - - - - - - - SUBROUTINES - - - - - - - - - -*

subroutines:


REM  ------------------------------
REM  setup_constants
REM  ------------------------------

setup_constants:

    TRUE = 1
    FALSE = 0

    attendPtsDataSource$ = ""
    call "ConfigVarsDAO.bbj::get_value", "new.attend.pts.files.data.source.name", configVarFound, configVarDataType$, attendPtsDataSource$
    
    POSTING_CHECK_EXIST_STMT$ = "select count(*) as hit_count from atnd where work_file_id = ?"
    
    POSTING_UPDATE_STMT$ = 
:       "update atnd " +
:       "set pts = ?, cd = ?, stat = ?, text = ?, chgdt = ?, chgby = ?, " +
:       "wfmr_exc_def_id = ?, disp_cd = ? " +
:       "where work_file_id = ?"
    
    POSTING_INSERT_STMT$ = 
:       "insert into atnd " +
:       "(badg, ptdt, pts, cd, stat, text, adddt, chgdt, addby, chgby, lvar, work_file_id, wfmr_exc_def_id, disp_cd) " +
:       "values " +
:       "(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)"

    
    return


REM  ------------------------------
REM  post_work_records_map
REM  ------------------------------

post_work_records_map:

    postingStatsMap!.clear()
    qtysInsertedMap! = new java.util.HashMap() 
    qtysUpdatedMap! = new java.util.HashMap()
    
    qtysInsertedMap!.put("A", 0)
    qtysInsertedMap!.put("E", 0)
    qtysInsertedMap!.put("F", 0)
    qtysUpdatedMap!.put("A", 0)
    qtysUpdatedMap!.put("E", 0)
    qtysUpdatedMap!.put("F", 0)
    qtySaved! = 0
    qtyPosted! = 0 

    postingCheckExistChannel = sqlunt
    sqlopen(postingCheckExistChannel) attendPtsDataSource$
    postingUpdateChannel = sqlunt
    sqlopen(postingUpdateChannel) attendPtsDataSource$
    postingInsertChannel = sqlunt
    sqlopen(postingInsertChannel) attendPtsDataSource$

    sqlprep(postingCheckExistChannel) POSTING_CHECK_EXIST_STMT$
    sqlprep(postingUpdateChannel) POSTING_UPDATE_STMT$
    sqlprep(postingInsertChannel) POSTING_INSERT_STMT$
    
    iter! = attPtsWorkRecordsToPostMap!.keySet().iterator()
    
    while iter!.hasNext()
    
        idKey! = iter!.next()
        attPtsWorkDataMap! = cast( java.util.HashMap, attPtsWorkRecordsToPostMap!.get(idKey!) )
        dataWasSaved! = attPtsWorkDataMap!.get("saved")
        if dataWasSaved! = null() then continue
        
        qtySaved! = qtySaved! + 1  

        REM  Determine whether to do insert or update
        
        doUpdate = FALSE
    
        sqlexec(postingCheckExistChannel) idKey!
        dim resultRow$:sqltmpl(postingCheckExistChannel)
        resultRow$ = sqlfetch(postingCheckExistChannel,err=end_check_exist)
        if resultRow.hit_count > 0 then doUpdate = TRUE
        
        end_check_exist:
        
        lastModTimestamp$ = attPtsWorkDataMap!.get("last_mod")
        lastModDateMDY$ = lastModTimestamp$(5,2) + "/" + lastModTimestamp$(7,2) + "/" + lastModTimestamp$(3,2)
        lastModByUserUC$ = cvs(attPtsWorkDataMap!.get("last_mod_user"), 4)
        dispCode$ = attPtsWorkDataMap!.get("disp_cd")
             
        if doUpdate then
        
            sqlexec(postingUpdateChannel) 
:               attPtsWorkDataMap!.get("erp_pts_assessed"), 
:               attPtsWorkDataMap!.get("erp_cd"),
:               attPtsWorkDataMap!.get("erp_sts_cd"),
:               attPtsWorkDataMap!.get("erp_note"), 
:               lastModDateMDY$, 
:               lastModByUserUC$,
:               attPtsWorkDataMap!.get("wfmr_exc_def_id"), 
:               dispCode$, 
:               idKey!
        
            qtyPosted! = qtyPosted! + 1  
            qty! = qtysUpdatedMap!.get(dispCode$) + 1
            qtysUpdatedMap!.put(dispCode$, qty!)
            
        else
        
REM :       "(badg, ptdt, pts, cd, stat, text, adddt, chgdt, addby, chgby, lvar, work_file_id, 
REM             wfmr_exc_def_id, disp_cd) " +
REM :       "values " +
REM :       "(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)"

            trimmedBadge$ = cvs(attPtsWorkDataMap!.get("emp_badge_no"), 3) 
            paddedBadge$ = pad(trimmedBadge$, 6, "R", "0" )

            sqlexec(postingInsertChannel)
:               paddedBadge$,
:               attPtsWorkDataMap!.get("wfmr_exc_date"),
:               attPtsWorkDataMap!.get("erp_pts_assessed"), 
:               attPtsWorkDataMap!.get("erp_cd"),
:               attPtsWorkDataMap!.get("erp_sts_cd"),
:               attPtsWorkDataMap!.get("erp_note"), 
:               lastModDateMDY$, 
:               "",        
:               lastModByUserUC$,
:               "",
:               "",
:               idKey!,        
:               attPtsWorkDataMap!.get("wfmr_exc_def_id"), 
:               dispCode$ 
        
            qtyPosted! = qtyPosted! + 1  
            qty! = qtysInsertedMap!.get(dispCode$) + 1
            qtysInsertedMap!.put(dispCode$, qty!)

        endif
        
    wend
    
    sqlclose(postingCheckExistChannel)
    sqlclose(postingUpdateChannel)
    sqlclose(postingInsertChannel)

    postingStatsMap!.put("qtys_inserted_map", qtysInsertedMap!)
    postingStatsMap!.put("qtys_updated_map", qtysUpdatedMap!)
    postingStatsMap!.put("qty_saved", qtySaved!)
    postingStatsMap!.put("qty_posted", qtyPosted!)
    
    return
