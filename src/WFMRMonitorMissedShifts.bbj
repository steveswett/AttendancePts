REM /**
REM  * WFMRMonitorMissedShifts.bbj
REM  * @author stevett
REM  *
REM  */


begin


rem *- - - - - - - - - - FUNCTIONS - - - - - - - - - -*

functions:



rem *- - - - - - - - - - MAIN ROUTINE - - - - - - - - - -*

main_routine:

    gosub setup_constants
    
    gosub init
    
    gosub query_for_missed_shifts


rem *- - - - - - - - - - EOJ - - - - - - - - - -*

eoj:

    release
    end


rem *- - - - - - - - - - SUBROUTINES - - - - - - - - - -*


    rem ------------------------------------------------------------------------------------------
    rem  One-time intialization
    rem ------------------------------------------------------------------------------------------

    
init:

    wfmrDataSource$ = ""
    call "ConfigVarsDAO.bbj::get_value", "wfmr.data.source.name", configVarFound, configVarDataType$, wfmrDataSource$
    
    call "ConfigVarsDAO.bbj::get_value", "use.windows.mailsend", configVarFound, configVarDataType$, useWindowsMailSend$
    useWindowsMailSend = num(useWindowsMailSend$)
    
    call "ConfigVarsDAO.bbj::get_value", "mail.recipients.wfmr.missed.shift.monitor", configVarFound, configVarDataType$, mailRecipients$
    
    return


    rem ------------------------------------------------------------------------------------------
    rem  Query for missed shifts and e-mail them to Steve and Eric A
    rem ------------------------------------------------------------------------------------------
    
    
query_for_missed_shifts:

    wfmrChannel = sqlunt
    sqlopen(wfmrChannel) wfmrDataSource$
    sqlprep(wfmrChannel) QUERY_STMT$
    sqlexec(wfmrChannel) 
    dim resultRow$:sqltmpl(wfmrChannel)

    count = 0
    lineFeed$ = iff(useWindowsMailSend, "<br/>", $0A$)
    bodyDetail$ = ""

    
    while TRUE
    
        resultRow$ = sqlfetch(wfmrChannel,err=*break)
        count = count + 1
        
        lastName$ = cvs(resultRow.last_name$, 2)
        firstName$ = cvs(resultRow.first_name$, 2)
        type$ = cvs(resultRow.type_code$, 2)
        badge$ = cvs(resultRow.badge_number$, 2)
        
        bodyDetail$ = bodyDetail$ + lastName$ + ", " + firstName$ + " / " + type$ + " / " + badge$ + " / " + str(resultRow.employee_id) + lineFeed$

        REM  Linux needs an extra line feed to actually trigger a line feed
        if !(useWindowsMailSend) then
            bodyDetail$ = bodyDetail$ + lineFeed$
        endif
        
    wend
    
    sqlclose(wfmrChannel)
    
    call "DateUtilities.bbj::get_current_timestamp", curTimeStamp$
    
    fmtTimeStamp$ = curTimeStamp$(1,4) + "/" + curTimeStamp$(5,2) + "/" + curTimeStamp$(7,2) + " " + curTimeStamp$(9,2) + ":" + curTimeStamp$(11,2) + "." + curTimeStamp$(13,2)

    subject$ = "WFMR Monitor Missed Shifts - " + fmtTimeStamp$ + " (" + str(count) + " records)" 
    
    body$ = "Current timestamp: " + fmtTimeStamp$ + lineFeed$ + lineFeed$
    
    body$ = body$ + "Number of missed shift records fetched for this one date: " + str(count) + lineFeed$ + lineFeed$ 
    
    body$ = body$ + bodyDetail$
    
    body$ = body$ + lineFeed$ + lineFeed$ + "Generated by program WFMRMonitorMissedShifts.bbj."
    
    
    REM  Send e-mail:
    
    call "MailUtilities.bbj::send_simple_email_msg", mailRecipients$, subject$, body$, mailReturnCode

    
    return


    rem ------------------------------------------------------------------------------------------
    rem  Setup constants - made last subroutine due to line continuations
    rem ------------------------------------------------------------------------------------------


setup_constants:

    TRUE = 1
    FALSE = 0

    QUERY_STMT$ =
:    "declare " +
:    "@today varchar(10) = convert(varchar(10), getdate(), 120) " +
:    "" +
:    "select  " +
:    "convert(varchar(19), Lab_Employee_Missed_Shifts.in_timestamp, 120) as in_timestamp,  " +
:    "Lab_Employee_Missed_Shifts.business_unit_id,  " +
:    "Lab_Job.department_id,  " +
:    "Lab_Employee_Custom_Column.column_value as shift,  " +
:    "Lab_Employee_Missed_Shifts.employee_id,  " +
:    "Employee.badge_number,  " +
:    "Lab_Employee_Missed_Shifts.scheduled_shift_id,  " +
:    "Lab_Employee_Missed_Shifts.job_id,  " +
:    "convert(varchar(8), Lab_Employee_Missed_Shifts.business_date, 112) as missed_shift_date,  " +
:    "Lab_Employee_Missed_Shifts.type_code,  " +
:    "convert(varchar(19), Lab_Employee_Missed_Shifts.last_modified_timestamp, 120) as missed_shift_last_mod,  " +
:    "Rad_Sys_User.last_name,  " +
:    "Rad_Sys_User.first_name,  " +
:    "case when Lab_Employee_Missed_Shifts.reason_id is null then 0 else Lab_Employee_Missed_Shifts.reason_id end as reason_id,  " +
:    "case when Reason.name is null then '' else Reason.name end as reason_name  " +
:    "from Lab_Employee_Missed_Shifts  " +
:    "inner join Rad_Sys_User on Lab_Employee_Missed_Shifts.employee_id = Rad_Sys_User.user_id  " +
:    "inner join Employee on Lab_Employee_Missed_Shifts.employee_id = Employee.employee_id  " +
:    "inner join Lab_Job on Lab_Employee_Missed_Shifts.job_id = Lab_Job.job_id  " +
:    "inner join Lab_Employee_Custom_Column on Lab_Employee_Missed_Shifts.employee_id = Lab_Employee_Custom_Column.employee_id  " +
:    "left join Reason on Lab_Employee_Missed_Shifts.reason_id = Reason.reason_id  " +
:    "where  " +
:    "Lab_Employee_Missed_Shifts.business_date between @today and @today  " +
:    "and Lab_Employee_Custom_Column.custom_column_def_id = 1000102  " +
:    "and Lab_Employee_Missed_Shifts.type_code in('c','n')  " +
:    "and Lab_Job.name not like '%Supervisor%'  " +
:    "order by  " +
:    "last_name,  " +
:    "first_name "

    return