REM /**
REM  * ProcessLockStatsDAO.bbj
REM  * @author stevett
REM  *
REM  * Written: December 22, 2015
REM  * 
REM  * Description: Data Access Object for table ProcessLockStats
REM  *
REM  */

use java.util.HashMap

declare java.util.HashMap recordsMapIn!
declare java.util.HashMap oneRecordMap!


rem *- - - - - - - - - - CONSTANTS - - - - - - - - - -*

rem  This section never runs for multi-entry point called programs, so subroutine "setup_constants" is called
rem  for each entry point.


rem *- - - - - - - - - - FUNCTIONS - - - - - - - - - -*

functions:



rem *- - - - - - - - - - ENTRY POINTS - - - - - - - - - -*

entry_points:


add_lock_records:

    enter timestampIn$, recordsMapIn!

    call "DateUtilities.bbj::get_timestamp_as_datetime_string", timestampIn$, sqlTimeStamp$
    
    gosub setup_constants
    
    gosub insert_lock_records
    
    exit


rem *- - - - - - - - - - SUBROUTINES - - - - - - - - - -*

subroutines:


REM  ------------------------------------------------------------------------------------------
REM  Add stat rows for all records in recordsMapIn!
REM  ------------------------------------------------------------------------------------------


insert_lock_records:

    cmdsChannel = sqlunt
    sqlopen(cmdsChannel) dataWarehouseDataSource$
    sqlprep(cmdsChannel) GET_CMDS_STMT$
    
    statsChannel = sqlunt
    sqlopen(statsChannel) dataWarehouseDataSource$
    sqlprep(statsChannel) INSERT_STATS_STMT$
    
    iter! = recordsMapIn!.keySet().iterator()
    
    while iter!.hasNext()
    
        pidKey! = iter!.next()
        oneRecordMap! = cast( java.util.HashMap, recordsMapIn!.get(pidKey!) )
        
        REM  If a process ended between the lslk and ps commands, then don't write the lock record:
        
        if oneRecordMap!.get("cmd") = null() then
            continue
        endif
        
        cmd$ = oneRecordMap!.get("cmd")

        REM  Get overridden command(s) from ProcessStatistics table:
        
            REM  Defaults:
            statsCmd$ = cmd$
            statsOrigCmd$ = ""
            
            sqlexec(cmdsChannel) serverName$, pidKey!, sqlTimeStamp$
            dim cmdsResultRow$:sqltmpl(cmdsChannel)
            
            cmdsResultRow$ = sqlfetch(cmdsChannel,err=cmds_record_not_found)
            
            statsCmd$ = cvs(cmdsResultRow.Command$, 2)
            statsOrigCmd$ = cvs(cmdsResultRow.OrigCommand$, 2)
            
            cmds_record_not_found:

        user$ = oneRecordMap!.get("user")
        fileName$ = oneRecordMap!.get("file_name")
        lockType$ = oneRecordMap!.get("lock_type")

        sqlexec(statsChannel) serverName$, pidKey!, sqlTimeStamp$, statsCmd$, statsOrigCmd$, user$, fileName$, lockType$     
    
    wend
    
    sqlclose(cmdsChannel)
    sqlclose(statsChannel)

    return


REM  ------------------------------------------------------------------------------------------
REM  setup_constants
REM  ------------------------------------------------------------------------------------------

setup_constants:

    TRUE = 1
    FALSE = 0
    
    serverName$ = serverenv("HOSTNAME")

    dataWarehouseDataSource$ = ""
    call "ConfigVarsDAO.bbj::get_value", "erp.performance.data.source.name", configVarFound, configVarDataType$, dataWarehouseDataSource$

    GET_CMDS_STMT$ = "select Command, OrigCommand from ProcessStatistics where ServerName = ? and ProcessId = ? and CollectionTime = ?"
    
    INSERT_STATS_STMT$ = "insert into ProcessLockStats (ServerName, ProcessId, CollectionTime, Command, OrigCommand, UserId, FileName, LockType) " +
:                        "values (?, ?, ?, ?, ?, ?, ?, ?)"
    
    return
