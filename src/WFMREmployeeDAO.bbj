REM /**
REM  * WFMREmployeeDAO.bbj
REM  * @author stevett
REM  *
REM  * Written: September 2015
REM  * 
REM  * Description: Data Access Object for WFMR table Employee
REM  *
REM  */


use java.util.LinkedHashMap
use java.util.HashMap

declare java.util.LinkedHashMap employeeRecordsMap!
declare java.util.HashMap employeeDataMap!


rem *- - - - - - - - - - CONSTANTS - - - - - - - - - -*

rem  This section never runs for multi-entry point called programs, so subroutine "setup_constants" is called
rem  for each entry point.


rem *- - - - - - - - - - FUNCTIONS - - - - - - - - - -*

functions:



rem *- - - - - - - - - - ENTRY POINTS - - - - - - - - - -*

entry_points:


get_operations_employees_by_dept_shift:

    enter deptId, shift$, employeeRecordsMap!
    
    gosub setup_constants
    
    gosub load_operations_employees_by_dept_shift
    
    exit


get_active_operations_employees:

    enter yyyymmddFromIn$, yyyymmddToIn$, employeeRecordsMap!
    
    gosub setup_constants
    
    gosub load_active_operations_employees
    
    exit


get_dept_name_for_employee:

    enter badgeIn$, deptNameOut$
    
    gosub setup_constants
    
    gosub query_for_employee_dept_name
    
    exit


rem *- - - - - - - - - - SUBROUTINES - - - - - - - - - -*

subroutines:


REM  ------------------------------------------------------------------------------------------
REM  Load active operations employees -- during a date range: yyyymmddFromIn$ - yyyymmddToIn$
REM  ------------------------------------------------------------------------------------------


load_active_operations_employees:

    employeeRecordsMap!.clear()
    
    sqlFrom$ = yyyymmddFromIn$(1,4) + "-" + yyyymmddFromIn$(5,2) + "-" + yyyymmddFromIn$(7,2)
    sqlTo$ = yyyymmddToIn$(1,4) + "-" + yyyymmddToIn$(5,2) + "-" + yyyymmddToIn$(7,2)

    employeeChannel = sqlunt
    sqlopen(employeeChannel) wfmrDataSource$
    sqlprep(employeeChannel) GET_ACTIVE_EMPLOYEES_STMT$

    sqlexec(employeeChannel) sqlFrom$, sqlTo$, opsBusinessUnit$ 

    dim resultRow$:sqltmpl(employeeChannel)
    
    while TRUE
    
        resultRow$ = sqlfetch(employeeChannel,err=*break)
        
        employeeDataMap! = new java.util.HashMap()
        employeeDataMap!.put("employee_id", resultRow.employee_id)
        employeeDataMap!.put("badge_number", resultRow.badge_number$)
        employeeDataMap!.put("last_name", cvs(resultRow.last_name$, 2))
        employeeDataMap!.put("first_name", cvs(resultRow.first_name$, 2))
        employeeDataMap!.put("hrs_worked", resultRow.hrs_worked)
        employeeDataMap!.put("sched_shifts", resultRow.sched_shifts)
        
        employeeRecordsMap!.put(cvs(resultRow.badge_number$, 2), employeeDataMap! )
        
    wend
    
    sqlclose(employeeChannel)

    return


REM  ------------------------------------------------------------------------------------------
REM  setup_constants
REM  ------------------------------------------------------------------------------------------

setup_constants:

    TRUE = 1
    FALSE = 0

    wfmrDataSource$ = ""
    call "ConfigVarsDAO.bbj::get_value", "wfmr.data.source.name", configVarFound, configVarDataType$, wfmrDataSource$

    call "ConfigVarsDAO.bbj::get_value", "wfmr.ops.business.unit", configVarFound, configVarDataType$, opsBusinessUnit$

    call "ConfigVarsDAO.bbj::get_value", "use.custom.column.table.for.shift", configVarFound, configVarDataType$, useCustomColumnTableForShift$
    useCustomColumnTableForShift = num(useCustomColumnTableForShift$)

    if useCustomColumnTableForShift then
        call "ConfigVarsDAO.bbj::get_value", "custom.column.def.id.for.shift", configVarFound, configVarDataType$, customColumnDefIdForShift$
    endif
    
    GET_DEPT_NAME_STMT$ =
:       "select " + 
:       "lab_department.name " +
:       "from employee " + 
:       "join lab_employee_primary_job on lab_employee_primary_job.employee_id = employee.employee_id " + 
:       "inner join Rad_Sys_User on employee.employee_id = Rad_Sys_User.user_id " + 
:       "inner join lab_department on lab_department.department_id = lab_employee_primary_job.department_id " +
:       "where " + 
:       "employee.badge_number = ? " +
:       "and lab_employee_primary_job.department_id is not null"

    GET_ACTIVE_EMPLOYEES_STMT$ =
:       "declare " +
:       "@fromDate varchar(10) = ?, " +
:       "@toDate varchar(10) = ?, " +
:       "@businessUnit int = ? " +
:       "" +
:       "select * from " +
:       "" +
:       "( " +
:       "select " + 
:       "employee.employee_id, " +
:       "employee.badge_number, " +
:       "employee.hire_date, " +
:       "rad_sys_user.last_name, " +
:       "rad_sys_user.first_name, " +
:       "rad_sys_user.status_code, " +
:       "rad_sys_user.date_status_code_last_changed, " +
:       "" +
:       "( " +
:       "select sum(week_to_date_hours) " +
:       "from " +
:       "lab_pay_week_period_total " +
:       "where " +
:        "lab_pay_week_period_total.business_unit_id = employee.home_business_unit_id " +
:        "and lab_pay_week_period_total.employee_id = employee.employee_id " +
:        "and lab_pay_week_period_total.labor_week_start between @fromDate and @toDate " +
:        "group by lab_pay_week_period_total.employee_id " +
:        ") " + 
:        "as hrs_worked, " +
:        "" +
:        "( " +
:        "select count(*) " +
:        "from " +
:        "lab_sched_shift " +
:        "where " + 
:        "lab_sched_shift.business_unit_id = employee.home_business_unit_id " +
:        "and lab_sched_shift.employee_id = employee.employee_id " +
:        "and ( (lab_sched_shift.in_timestamp between @fromDate and @toDate) or (lab_sched_shift.out_timestamp between @fromDate and @toDate) ) " +
:        ") " +
:        "as sched_shifts " +
:        "" +
:        "from employee " +
:        "join rad_sys_user on rad_sys_user.user_id = employee.employee_id " +
:       "" +
:        "where " + 
:        "employee.home_business_unit_id = @businessUnit " +
:       "" + 
:       " ) inlineView " +
:       "" +
:   "where " + 
:   "hrs_worked is not null " +
:   "and ( status_code = 'a' or (status_code = 'i' and date_status_code_last_changed >= @fromDate) ) " +
:   "and hire_date <= @toDate " +
:   "" +
:   "order by " +
:   "last_name, " +
:   "first_name"
    
    REM  Note: prior to a change/fix for ERP-2161 on 11/17/15, the line above, just below "hrs_worked is not null"
    REM        used to be the following:
    
    REM  "and ( (status_code = 'a' and date_status_code_last_changed <= @toDate) or (status_code = 'i' and date_status_code_last_changed >= @fromDate) ) "  
    
    return


REM  ------------------------------------------------------------------------------------------
REM  load_operations_employees_by_dept_shift
REM  ------------------------------------------------------------------------------------------


load_operations_employees_by_dept_shift:

    employeeRecordsMap!.clear()
    
    
    employeesByDeptShiftStmt$ = 
:       "select " +
:       "employee.employee_id, " + 
:       "employee.badge_number, " +
:       "Rad_Sys_User.last_name, " +
:       "Rad_Sys_User.first_name, " +
:       "lab_employee_primary_job.department_id, "

    if useCustomColumnTableForShift then
        employeesByDeptShiftStmt$ = employeesByDeptShiftStmt$ +
:           "Lab_Employee_Custom_Column.column_value as shift "
    else
        employeesByDeptShiftStmt$ = employeesByDeptShiftStmt$ +
:           "Lab_Employee_Attribute.attribute_code as shift "
    endif

    employeesByDeptShiftStmt$ = employeesByDeptShiftStmt$ +
:       "from employee " +
:       "join lab_employee_primary_job on lab_employee_primary_job.employee_id = employee.employee_id " +
:       "inner join Rad_Sys_User on employee.employee_id = Rad_Sys_User.user_id "

    if useCustomColumnTableForShift then
        employeesByDeptShiftStmt$ = employeesByDeptShiftStmt$ +
:           "join Lab_Employee_Custom_Column on employee.employee_id = Lab_Employee_Custom_Column.employee_id " +
:           "and Lab_Employee_Custom_Column.custom_column_def_id = " + customColumnDefIdForShift$ + " "
    else
        employeesByDeptShiftStmt$ = employeesByDeptShiftStmt$ +
:           "inner join Lab_Employee_Attribute_List on employee.employee_id = Lab_Employee_Attribute_List.employee_id " +
:           "inner join Lab_Employee_Attribute on Lab_Employee_Attribute_List.employee_attribute_id = Lab_Employee_Attribute.employee_attribute_id "
    endif

    employeesByDeptShiftStmt$ = employeesByDeptShiftStmt$ +
:       "where " + 
:       "employee.home_business_unit_id = ? " +
:       "and employee.manager_level_flag <> 'y' " +
:       "and rad_sys_user.status_code = 'a' " +
:       "and lab_employee_primary_job.department_id is not null "

    if !(useCustomColumnTableForShift) then
        employeesByDeptShiftStmt$ = employeesByDeptShiftStmt$ +
:       "and Lab_Employee_Attribute_List.employee_attribute_id in " +
:       "  (select Lab_Employee_Attribute.employee_attribute_id from Lab_Employee_Attribute " +
:       "   where Lab_Employee_Attribute.attribute_code in ('1','2','3')" +
:       "  ) " +
:       "and lab_employee_attribute_list.end_date is null "
    endif

    if deptId > 0 then
        employeesByDeptShiftStmt$ = employeesByDeptShiftStmt$ + "and lab_employee_primary_job.department_id = " + str(deptId) + " "
    endif
    
    trimmedShift$ = cvs(shift$,3)
     
    if len(trimmedShift$) > 0 then
        if (useCustomColumnTableForShift) then
            employeesByDeptShiftStmt$ = employeesByDeptShiftStmt$ + "and Lab_Employee_Custom_Column.column_value = '" + trimmedShift$ + "' " 
        else
            employeesByDeptShiftStmt$ = employeesByDeptShiftStmt$ + "and Lab_Employee_Attribute.attribute_code = '" + trimmedShift$ + "' " 
        endif
    endif
    

    employeeChannel = sqlunt
    sqlopen(employeeChannel) wfmrDataSource$
    sqlprep(employeeChannel) employeesByDeptShiftStmt$

    sqlexec(employeeChannel) opsBusinessUnit$ 

    dim resultRow$:sqltmpl(employeeChannel)
    
    while TRUE
    
        resultRow$ = sqlfetch(employeeChannel,err=*break)
        
        employeeDataMap! = new java.util.HashMap()
        employeeDataMap!.put("employee_id", resultRow.employee_id)
        employeeDataMap!.put("badge_number", resultRow.badge_number$)
        employeeDataMap!.put("last_name", cvs(resultRow.last_name$, 2))
        employeeDataMap!.put("first_name", cvs(resultRow.first_name$, 2))
        employeeDataMap!.put("department_id", resultRow.department_id)
        employeeDataMap!.put("shift", cvs(resultRow.shift$, 2))
        
        employeeRecordsMap!.put(cvs(resultRow.badge_number$, 2), employeeDataMap! )
        
    wend
    
    sqlclose(employeeChannel)

    return

    
REM  ------------------------------------------------------------------------------------------
REM  Given a badge number, get the department name
REM  ------------------------------------------------------------------------------------------

query_for_employee_dept_name:

    employeeChannel = sqlunt
    sqlopen(employeeChannel) wfmrDataSource$

    sqlprep(employeeChannel) GET_DEPT_NAME_STMT$

    deptNameOut$ = ""

    sqlexec(employeeChannel) badgeIn$
    dim resultRow$:sqltmpl(employeeChannel)
    
    resultRow$ = sqlfetch(employeeChannel,err=dept_name_not_found)
    deptNameOut$ = cvs(resultRow.name$, 2)
    
    dept_name_not_found:
    
    sqlclose(employeeChannel)

    return
    