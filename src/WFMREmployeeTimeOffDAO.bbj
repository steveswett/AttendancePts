REM /**
REM  * WFMREmployeeTimeOffDAO.bbj
REM  * @author stevett
REM  *
REM  * Written: August 2015
REM  * 
REM  * Description: Data Access Object for WFMR table lab_employee_time_off
REM  *
REM  */


use java.util.HashMap
use java.util.LinkedHashMap

declare java.util.LinkedHashMap employeeRecordsMap!
declare java.util.HashMap employeeDataMap!


rem *- - - - - - - - - - CONSTANTS - - - - - - - - - -*

rem  This section never runs for multi-entry point called programs, so subroutine "setup_constants" is called
rem  for each entry point.


rem *- - - - - - - - - - FUNCTIONS - - - - - - - - - -*

functions:



rem *- - - - - - - - - - ENTRY POINTS - - - - - - - - - -*

entry_points:

get_employees_with_no_time_off:

    enter employeeRecordsMap!
    
    gosub setup_constants
    
    gosub load_records_for_employees_with_no_time_off
    
    exit


get_employees_with_some_time_off:

    enter employeeRecordsMap!
    
    gosub setup_constants
    
    gosub load_records_for_employees_with_some_time_off
    
    exit


compute_start_date_for_90_day_window_for_employees:

    enter employeeRecordsMap!, defaultStartDateIn$
    
    gosub setup_constants
    
    gosub compute_and_store_90_day_start_date
    
    exit


rem *- - - - - - - - - - SUBROUTINES - - - - - - - - - -*

subroutines:


REM  ------------------------------------------------------------------------------------------
REM  Load records for employees with NO time off requests in the past 90 days
REM  ------------------------------------------------------------------------------------------

load_records_for_employees_with_no_time_off:

    employeeRecordsMap!.clear()

    timeOffChannel = sqlunt
    sqlopen(timeOffChannel) wfmrDataSource$

    sqlprep(timeOffChannel) EMPLOYEES_WITH_NO_TIME_OFF_STMT$

    sqlexec(timeOffChannel) opsBusinessUnit$, adminBusinessUnit$, customColumnIdForStatus$
    dim resultRow$:sqltmpl(timeOffChannel)
    
    while TRUE
    
        resultRow$ = sqlfetch(timeOffChannel,err=*break)
        employeeDataMap! = new java.util.HashMap()
        employeeDataMap!.put("last_name", cvs(resultRow.last_name$, 2))
        employeeDataMap!.put("first_name", cvs(resultRow.first_name$, 2))
        employeeDataMap!.put("employee_id", resultRow.employee_id)
        employeeRecordsMap!.put(cvs(resultRow.badge_number$, 2), employeeDataMap! )
        
    wend
    
    sqlclose(timeOffChannel)

    return


REM  ------------------------------------------------------------------------------------------
REM  Load records for employees with SOME time off requests in the past 90 days
REM  ------------------------------------------------------------------------------------------

load_records_for_employees_with_some_time_off:

    employeeRecordsMap!.clear()

    timeOffChannel = sqlunt
    sqlopen(timeOffChannel) wfmrDataSource$

    sqlprep(timeOffChannel) EMPLOYEES_WITH_SOME_TIME_OFF_STMT$

    sqlexec(timeOffChannel) opsBusinessUnit$, adminBusinessUnit$, customColumnIdForStatus$
    dim resultRow$:sqltmpl(timeOffChannel)
    
    while TRUE
    
        resultRow$ = sqlfetch(timeOffChannel,err=*break)
        employeeDataMap! = new java.util.HashMap()
        employeeDataMap!.put("last_name", cvs(resultRow.last_name$, 2))
        employeeDataMap!.put("first_name", cvs(resultRow.first_name$, 2))
        employeeDataMap!.put("employee_id", resultRow.employee_id)
        employeeRecordsMap!.put(cvs(resultRow.badge_number$, 2), employeeDataMap! )
        
    wend
    
    sqlclose(timeOffChannel)

    return

    
REM  ------------------------------------------------------------------------------------------
REM  Compute and store the start date for 90-day window per employee.  Store inside employeeRecordsMap!
REM  ------------------------------------------------------------------------------------------


compute_and_store_90_day_start_date:

    timeOffChannel = sqlunt
    sqlopen(timeOffChannel) wfmrDataSource$
    sqlprep(timeOffChannel) ONE_EMPLOYEE_TIME_OFF_RECORDS_STMT$

    relativeDayChannel = sqlunt
    sqlopen(relativeDayChannel) wfmrDataSource$
    sqlprep(relativeDayChannel) FIND_ONE_EMPLOYEE_ONE_DATE_STMT$
    
    iter! = employeeRecordsMap!.keySet().iterator()
    
    while iter!.hasNext()
    
        badgeKey! = iter!.next()
        employeeDataMap! = cast( java.util.HashMap, employeeRecordsMap!.get(badgeKey!) )
        
        employeeId! = employeeDataMap!.get("employee_id")
        
        
        REM  Step 1. Compute number of days off for one employee
        
        daysOff = 0
        
        sqlexec(timeOffChannel) employeeId!
        dim resultRow$:sqltmpl(timeOffChannel)
        
        while TRUE
            resultRow$ = sqlfetch(timeOffChannel,err=*break)
            yyyymmddStart$ = resultRow.start_date$(1,4) + resultRow.start_date$(6,2) + resultRow.start_date$(9,2)  
            yyyymmddEnd$ = resultRow.end_date$(1,4) + resultRow.end_date$(6,2) + resultRow.end_date$(9,2)  
            call "DateUtilities.bbj::get_days_between_inclusive", yyyymmddStart$, yyyymmddEnd$, noOfDays
            daysOff = daysOff + noOfDays  
        wend
        
        
        REM  Step 2. Compute start date for one employee
        
        startDate$ = defaultStartDateIn$
        
        if daysOff > 0 then
        
            relativeDayNumber = -90
            daysOn = 0
            
            REM  Look back up to 365 days prior to standard 90-day window.  This is mostly a protection to avoid an endless loop.  
            REM  Normally shouldn't have to read back very many days.
            
            for dayNumber = 1 to 365
                
                relativeDayNumber = relativeDayNumber - 1
                sqlexec(relativeDayChannel) relativeDayNumber, employeeId!, relativeDayNumber, relativeDayNumber
                dim resRow$:sqltmpl(relativeDayChannel)
                resRow$ = sqlfetch(relativeDayChannel,err=*break)
                
                if resRow.hit_count = 0 then
                    daysOn = daysOn + 1
                    
                    if daysOn = daysOff then
                    
                        REM  We have read far enough back and have a valid start date.
                        
                        startDate$ = resRow.find_date$(1,4) + resRow.find_date$(6,2) + resRow.find_date$(9,2)
                        break
                        
                    endif
                    
                endif
                 
            next dayNumber
        
        endif
        
        employeeDataMap!.put("start_date", startDate$)
        employeeRecordsMap!.put(badgeKey!, employeeDataMap!) 
    
    wend

    sqlclose(relativeDayChannel)
    sqlclose(timeOffChannel)

    return


REM  ------------------------------------------------------------------------------------------
REM  setup_constants
REM  ------------------------------------------------------------------------------------------

setup_constants:

    TRUE = 1
    FALSE = 0

    call "ConfigVarsDAO.bbj::get_value", "wfmr.data.source.name", configVarFound, configVarDataType$, wfmrDataSource$

    call "ConfigVarsDAO.bbj::get_value", "wfmr.ops.business.unit", configVarFound, configVarDataType$, opsBusinessUnit$

    call "ConfigVarsDAO.bbj::get_value", "wfmr.admin.business.unit", configVarFound, configVarDataType$, adminBusinessUnit$

    call "ConfigVarsDAO.bbj::get_value", "eto.time.off.ids", configVarFound, configVarDataType$, timeOffIdsNoETO$

    call "ConfigVarsDAO.bbj::get_value", "wfmr.custom.col.def.id.status", configVarFound, configVarDataType$, customColumnIdForStatus$

    
    REM  In below queries, "Lab_Employee_Custom_Column.column_value not in('D','F')" means exclude seasonal (D) and 
    REM  temporary (F) employees
    
    EMPLOYEES_WITH_NO_TIME_OFF_STMT$ = 
:       "declare " +
:       "@opsBusinessUnit int = ?, " +
:       "@adminBusinessUnit int = ?, " +
:       "@customColumnIdForStatus int = ? " +
:       "" +
:       "select " +
:       "rad_sys_user.last_name, " +
:       "rad_sys_user.first_name, " +
:       "employee.employee_id, " +
:       "employee.badge_number " +
:       "from employee " +
:       "left join rad_sys_user on rad_sys_user.user_id = employee.employee_id " +
:       "inner join Lab_Employee_Custom_Column on employee.employee_id = Lab_Employee_Custom_Column.employee_id " +  
:       "where employee.home_business_unit_id in(@opsBusinessUnit,@adminBusinessUnit) " +
:       "and employee.generate_exceptions_flag = 'y' " +
:       "and employee.manager_level_flag <> 'y' " +
:       "and rad_sys_user.status_code = 'a' " +
:       "and hire_date <= convert(varchar(10), dateadd(day, -90, getdate()), 120) " +
:       "and Lab_Employee_Custom_Column.custom_column_def_id = @customColumnIdForStatus " +
:       "and Lab_Employee_Custom_Column.column_value not in('D','F') " +
:       "and employee.employee_id not " +
:       "in(" +
:           "select " + 
:           "lab_employee_time_off.employee_id " +
:           "from lab_employee_time_off " + 
:           "join employee on employee.employee_id = lab_employee_time_off.employee_id " +
:           "where " + 
:           "employee.home_business_unit_id in(@opsBusinessUnit,@adminBusinessUnit) and " +
:           "employee.generate_exceptions_flag = 'y' and " +
:           "lab_employee_time_off.status_code = 'a' and " +
:           "lab_employee_time_off.start_timestamp <= convert(varchar(10), getdate(), 120) + ' 23:59:59' and " +
:           "lab_employee_time_off.end_timestamp >= convert(varchar(10), dateadd(day, -90, getdate()), 120) + ' 00:00:00' and " +
:           "lab_employee_time_off.pay_adjustment_id in(" + timeOffIdsNoETO$ + ") " +
:       ") " +
:       "order by rad_sys_user.last_name, rad_sys_user.first_name"

    
    EMPLOYEES_WITH_SOME_TIME_OFF_STMT$ =
:       "declare " +
:       "@opsBusinessUnit int = ?, " +
:       "@adminBusinessUnit int = ?, " +
:       "@customColumnIdForStatus int = ? " +
:       "" +
:       "select " +
:       "rad_sys_user.last_name, " +
:       "rad_sys_user.first_name, " +
:       "employee.employee_id, " +
:       "employee.badge_number " +
:       "from employee " +
:       "left join rad_sys_user on rad_sys_user.user_id = employee.employee_id " +
:       "inner join Lab_Employee_Custom_Column on employee.employee_id = Lab_Employee_Custom_Column.employee_id " +  
:       "where employee.home_business_unit_id in(@opsBusinessUnit,@adminBusinessUnit) " +
:       "and employee.generate_exceptions_flag = 'y' " +
:       "and employee.manager_level_flag <> 'y' " +
:       "and rad_sys_user.status_code = 'a' " +
:       "and hire_date <= convert(varchar(10), dateadd(day, -90, getdate()), 120) " +
:       "and Lab_Employee_Custom_Column.custom_column_def_id = @customColumnIdForStatus " +
:       "and Lab_Employee_Custom_Column.column_value not in('D','F') " +
:       "and employee.employee_id " +
:       "in(" +
:           "select " + 
:           "lab_employee_time_off.employee_id " +
:           "from lab_employee_time_off " + 
:           "join employee on employee.employee_id = lab_employee_time_off.employee_id " +
:           "where " + 
:           "employee.home_business_unit_id in(@opsBusinessUnit,@adminBusinessUnit) and " +
:           "employee.generate_exceptions_flag = 'y' and " +
:           "lab_employee_time_off.status_code = 'a' and " +
:           "lab_employee_time_off.start_timestamp <= convert(varchar(10), getdate(), 120) + ' 23:59:59' and " +
:           "lab_employee_time_off.end_timestamp >= convert(varchar(10), dateadd(day, -90, getdate()), 120) + ' 00:00:00' and " +
:           "lab_employee_time_off.pay_adjustment_id in(" + timeOffIdsNoETO$ + ") " +
:       ") " +
:       "order by rad_sys_user.last_name, rad_sys_user.first_name"
    
    ONE_EMPLOYEE_TIME_OFF_RECORDS_STMT$ =
:       "select " +
:       "lab_employee_time_off.employee_id, " +
:       "convert(varchar(10), lab_employee_time_off.start_timestamp, 120) as start_date, " +
:       "convert(varchar(10), lab_employee_time_off.end_timestamp, 120) as end_date " +
:       "from lab_employee_time_off " + 
:       "where " + 
:       "lab_employee_time_off.employee_id = ? and " +
:       "lab_employee_time_off.status_code = 'a' and " +
:       "lab_employee_time_off.start_timestamp <= convert(varchar(10), getdate(), 120) + ' 23:59:59' and " +
:       "lab_employee_time_off.end_timestamp >= convert(varchar(10), dateadd(day, -90, getdate()), 120) + ' 00:00:00' and " +
:       "lab_employee_time_off.pay_adjustment_id in(" + timeOffIdsNoETO$ + ") " +
:       "order by lab_employee_time_off.employee_id, lab_employee_time_off.start_timestamp"
    
    FIND_ONE_EMPLOYEE_ONE_DATE_STMT$ =
:       "select " + 
:       "count(*) as hit_count, convert(varchar(10), dateadd(day, ?, getdate()), 120) as find_date " +
:       "from lab_employee_time_off " + 
:       "where " + 
:       "lab_employee_time_off.employee_id = ? " +
:       "and lab_employee_time_off.status_code = 'a' " +
:       "and convert(varchar(10), dateadd(day, ?, getdate()), 120) >= lab_employee_time_off.start_timestamp " +
:       "and convert(varchar(10), dateadd(day, ?, getdate()), 120) <= lab_employee_time_off.end_timestamp and " +
:       "lab_employee_time_off.pay_adjustment_id in(" + timeOffIdsNoETO$ + ") "

    return
    