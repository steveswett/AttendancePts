REM /**
REM  * LoadHeavyHitters.bbj
REM  * @author stevett
REM  *
REM  * Written: December 2, 2015
REM  * 
REM  * Description: Load Heavy Hitter production process into database for later analysis
REM  * 
REM  * Revised: 11/25/16 by S Swett to more robustly handle when lslk reports no locks.
REM  * 
REM  */


use java.util.HashMap

declare java.util.HashMap recordsMap!
declare java.util.HashMap oneRecordMap!


begin


rem *- - - - - - - - - - CONSTANTS - - - - - - - - - -*

constants:


    TRUE = 1
    FALSE = 0


rem *- - - - - - - - - - FUNCTIONS - - - - - - - - - -*

functions:


def fnGetTimeInSeconds%(aTimeField$)

    tmpTimeField$ = aTimeField$
    
    if len(tmpTimeField$) = 5 then
        tmpTimeField$ = "00:" + tmpTimeField$ 
    endif

    dashPos = pos("-" = tmpTimeField$)
    
    if dashPos then
        accumulatedHrs = num( tmpTimeField$(1, dashPos - 1) )
        subTimeField$ = tmpTimeField$(dashPos + 1)
    else
        accumulatedHrs = 0
        subTimeField$ = tmpTimeField$
    endif
    
    hrs = num( subTimeField$(1, 2) )
    mins = num( subTimeField$(4, 2) )
    secs = num( subTimeField$(7, 2) )
    
    totalSecs = secs + (mins * 60) + (hrs * 60 * 60) + (accumulatedHrs * 60 * 60)
    
    return totalSecs 

fnend


rem *- - - - - - - - - - MAIN ROUTINE - - - - - - - - - -*

main_routine:

    while TRUE

        gosub get_options_for_this_collection

        call "DateUtilities.bbj::get_current_timestamp", currentTimestamp$
        
        if len(terminateAfterTimestamp$) = 14 and currentTimestamp$ >= terminateAfterTimestamp$ then
            break
        endif


        REM  Process CPU:
        
        if collectCPU then
            gosub prep_and_open_ps_file
            gosub process_ps_records
            gosub close_ps_file
        endif


        REM Process I/O:
        
        if collectIO then
            gosub prep_and_open_io_file
            gosub process_io_records
            gosub close_io_file
        endif


        REM Wait between CPU and I/O collections (but do Lock collections within this loop)
        
        bailCompletely = FALSE
        
        for i = 1 to collectionIntervalMins

            gosub get_options_for_this_collection
    
            call "DateUtilities.bbj::get_current_timestamp", currentTimestamp$
            
            if len(terminateAfterTimestamp$) = 14 and currentTimestamp$ >= terminateAfterTimestamp$ then
                bailCompletely = TRUE
                break
            endif
    
            REM Process Locks:
            
            if collectLocks then
                gosub prep_and_open_lslk_file
                gosub process_lslk_records
                gosub close_lslk_file
            endif

            REM print "Wait 60 secs.  i=", i, " collectionIntervalMins=", collectionIntervalMins, ", Java curr ms=", System.currentTimeMillis()
            
            REM  For some reason "wait 60" in this "complex loop" isn't working well on Linux production.  It's
            REM  only waiting about 30 seconds.  Made BBj forum post on topic.
            
            wait 60
        next i
        
        if bailCompletely then
            break
        endif
         
    wend


rem *- - - - - - - - - - EOJ - - - - - - - - - -*

eoj:

    release
    
    end


rem *- - - - - - - - - - SUBROUTINES - - - - - - - - - -*


    rem ------------------------------------------------------------------------------------------
    rem  Get options (config var settings) for this collection
    rem ------------------------------------------------------------------------------------------
    
get_options_for_this_collection:

    call "ConfigVarsDAO.bbj::get_value", "process.stats.terminate.on.or.after.timestamp", configVarFound, configVarDataType$, terminateAfterTimestamp$
    
    call "ConfigVarsDAO.bbj::get_value", "process.stats.collection.interval.mins", configVarFound, configVarDataType$, collectionIntervalMins$
    collectionIntervalMins = num(collectionIntervalMins$)
    
    call "ConfigVarsDAO.bbj::get_value", "process.stats.include.zero.cpu.processes", configVarFound, configVarDataType$, includeZeroCPUProcesses$
    includeZeroCPUProcesses = num(includeZeroCPUProcesses$)
    
    call "ConfigVarsDAO.bbj::get_value", "process.stats.collect.cpu", configVarFound, configVarDataType$, collectCPU$
    collectCPU = num(collectCPU$)
    
    call "ConfigVarsDAO.bbj::get_value", "process.stats.collect.io", configVarFound, configVarDataType$, collectIO$
    collectIO = num(collectIO$)
    
    call "ConfigVarsDAO.bbj::get_value", "process.stats.collect.locks", configVarFound, configVarDataType$, collectLocks$
    collectLocks = num(collectLocks$)
    
    call "ConfigVarsDAO.bbj::get_value", "process.stats.include.zero.io.processes", configVarFound, configVarDataType$, includeZeroIOProcesses$
    includeZeroIOProcesses = num(includeZeroIOProcesses$)
    
    call "ConfigVarsDAO.bbj::get_value", "is.windows.environment", configVarFound, configVarDataType$, isWindowsEnv$
    isWindowsEnv = num(isWindowsEnv$)

    return


    rem ------------------------------------------------------------------------------------------
    rem  Prepare and open "ps" file
    rem ------------------------------------------------------------------------------------------
    
prep_and_open_ps_file:
    
    psCmdOutputFile$ = "/tmp/heavy-hitters-ps.txt"

    psCmd$ = "ps -Ao pid,etime,time,%cpu,user,tty,m_drs,m_trs,state,cmd | grep pro5 > " + psCmdOutputFile$ 

    returnCode = scall(psCmd$)

    psCmdChannel = unt
    open (psCmdChannel) psCmdOutputFile$

    return


    rem ------------------------------------------------------------------------------------------
    rem  Close the "ps" file
    rem ------------------------------------------------------------------------------------------
    
close_ps_file:

    close (psCmdChannel)

    return

    
    rem ------------------------------------------------------------------------------------------
    rem  Process records in the input file from the Linux "ps" command.  Put them in the
    rem  recordsMap! for sending to the database.
    rem ------------------------------------------------------------------------------------------
    
process_ps_records:

    recordsMap! = new java.util.HashMap()

    recordNo = 0

    while TRUE
    
        read (psCmdChannel,err=*break) inputRecord$
        REM print "inputRecord$ = ", inputRecord$
        
        recordNo = recordNo + 1
        
        gosub read_one_ps_record
    
    wend
    
    if recordsMap!.size() > 0 then
        call "ProcessStatsDAO.bbj::add_stat_records", currentTimestamp$, recordsMap!
    endif

    return

    
    rem ------------------------------------------------------------------------------------------
    rem  Read one "ps" record
    rem ------------------------------------------------------------------------------------------
    
read_one_ps_record:

    gosub init_ps_input_fields
    
    rawFieldList! = java.util.Arrays.asList(new java.lang.String(inputRecord$).split(" "))
    iter! = rawFieldList!.iterator()
    fieldNo = 0
    
    while iter!.hasNext()
    
        field! = iter!.next()
        
        if len ( cvs(field!, 3) )
        
            fieldNo = fieldNo + 1
            
            switch fieldNo
            
                case 1
                    pid$ = field!
                    break
            
                case 2
                    elapsedTime$ = field!
                    break
            
                case 3
                    cpuTime$ = field!
                    break
            
                case 4
                    cpuPercent$ = field!
                    break
            
                case 5
                    user$ = field!
                    break
            
                case 6
                    tty$ = field!
                    break
            
                case 7
                    memoryData$ = field!
                    break
            
                case 8
                    memoryCode$ = field!
                    break
            
                case 9
                    state$ = field!
                    break
            
            swend
    
            if fieldNo > 9 then
                cmd$ = cmd$ + " " + field!
            endif
            
        endif
    
    wend
    
    
    REM  Calculated fields:

    elapsedTimeInSeconds = fnGetTimeInSeconds%(elapsedTime$)
    cpuTimeInSeconds = fnGetTimeInSeconds%(cpuTime$)
    
    if elapsedTimeInSeconds > 0 and cpuTimeInSeconds > 0 then
        cpuTimePerSecond = cpuTimeInSeconds / elapsedTimeInSeconds  
    else
        cpuTimePerSecond = 0
    endif 

    REM  Use -1 to turn off this output
    
    if recordNo = -1 then
        gosub print_ps_input_fields
        gosub print_ps_computed_fields    
    endif
    
    REM  Consider CPU time before storing record, but always store records for root 
    
    if includeZeroCPUProcesses or cpuTimeInSeconds > 0 or user$ = 'root' then
    
        REM  See if a "RUN" program can be gleaned from program run log:
        call "ProgramRunLogDAO.bbj::get_prog_name_and_elapsed_time_if_active_process", pid$, elapsedTimeInSeconds, runProgramName$, runElapsedTimeInSeconds
        
        if len(runProgramName$) > 0 then
            origCmd$ = cmd$
            cmd$ = runProgramName$
            origElapsedTimeInSeconds = elapsedTimeInSeconds
            elapsedTimeInSeconds = runElapsedTimeInSeconds 
        else
            origCmd$ = ""
            origElapsedTimeInSeconds = 0
        endif
            
        oneRecordMap! = new java.util.HashMap()
        
        oneRecordMap!.put("cmd", cmd$)
        oneRecordMap!.put("orig_cmd", origCmd$)
        oneRecordMap!.put("user", user$)
        oneRecordMap!.put("tty", tty$)
        oneRecordMap!.put("state", state$)
        oneRecordMap!.put("cpu_pct", cpuPercent$)
        oneRecordMap!.put("elapsed_tm_secs", elapsedTimeInSeconds)
        oneRecordMap!.put("orig_elapsed_tm_secs", origElapsedTimeInSeconds)
        oneRecordMap!.put("cpu_time_secs", cpuTimeInSeconds)  
        oneRecordMap!.put("cpu_time_per_sec", cpuTimePerSecond)
        oneRecordMap!.put("data_memory_kb", memoryData$)
        
        recordsMap!.put(pid$, oneRecordMap!)
    endif
    

    return

    
    rem ------------------------------------------------------------------------------------------
    rem  Initialize "ps" input fields
    rem ------------------------------------------------------------------------------------------
    
init_ps_input_fields:

    pid$ = ""
    elapsedTime$ = ""
    cpuTime$ = ""
    cpuPercent$ = ""
    user$ = ""
    tty$ = ""
    memoryData$ = ""
    memoryCode$ = ""
    state$ = ""
    cmd$ = ""

    return
    
    
    rem ------------------------------------------------------------------------------------------
    rem  Print "ps" input fields
    rem ------------------------------------------------------------------------------------------
    
print_ps_input_fields:

    print ""
    print "recordNo = ", recordNo
    print "pid$ = ", pid$
    print "elapsedTime$ = ", elapsedTime$
    print "cpuTime$ = ", cpuTime$
    print "cpuPercent$ = ", cpuPercent$
    print "user$ = ", user$
    print "tty$ = ", tty$
    print "memoryData$ = ", memoryData$
    print "memoryCode$ = ", memoryCode$
    print "state$ = ", state$
    print "cmd$ = ", cmd$

    return
    
    
    rem ------------------------------------------------------------------------------------------
    rem  Print "ps" computed fields
    rem ------------------------------------------------------------------------------------------
    
print_ps_computed_fields:

    print ""
    print "elapsedTimeInSeconds = ", elapsedTimeInSeconds
    print "cpuTimeInSeconds = ", cpuTimeInSeconds
    print "cpuTimePerSecond = ", cpuTimePerSecond

    return


    rem ------------------------------------------------------------------------------------------
    rem  Prepare and open "io" file
    rem ------------------------------------------------------------------------------------------
    
prep_and_open_io_file:
    
    ioCmdOutputFile$ = "/tmp/heavy-hitters-io.txt"

    ioCmd$ = "iotop -obPk -n 1 | grep pro5 > " + ioCmdOutputFile$ 

    returnCode = scall(ioCmd$)

    ioCmdChannel = unt
    open (ioCmdChannel) ioCmdOutputFile$

    return

    
    rem ------------------------------------------------------------------------------------------
    rem  Process records in the input file from the Linux "iotop" command.  Put them in the
    rem  recordsMap! for sending to the database.
    rem ------------------------------------------------------------------------------------------
    
process_io_records:

    recordsMap! = new java.util.HashMap()

    recordNo = 0

    while TRUE
    
        read (ioCmdChannel,err=*break) inputRecord$
        REM print "inputRecord$ = ", inputRecord$
        
        recordNo = recordNo + 1
        
        gosub read_one_io_record
    
    wend
    
    if recordsMap!.size() > 0 then
        call "ProcessIOStatsDAO.bbj::add_stat_records", currentTimestamp$, recordsMap!
    endif

    return

    
    rem ------------------------------------------------------------------------------------------
    rem  Read one "iotop" record
    rem ------------------------------------------------------------------------------------------
    
read_one_io_record:

    gosub init_io_input_fields
    
    rawFieldList! = java.util.Arrays.asList(new java.lang.String(inputRecord$).split(" "))
    iter! = rawFieldList!.iterator()
    fieldNo = 0
    
    while iter!.hasNext()
    
        field! = iter!.next()
        
        if len ( cvs(field!, 3) )
        
            fieldNo = fieldNo + 1
            
            switch fieldNo
            
                case 1
                    pid$ = field!
                    break
            
                case 2
                    priority$ = field!
                    break
            
                case 3
                    user$ = field!
                    break
            
                case 4
                    diskRead$ = field!
                    break
            
                case 5
                    diskReadUnit$ = field!
                    break
            
                case 6
                    diskWrite$ = field!
                    break
            
                case 7
                    diskWriteUnit$ = field!
                    break
            
                case 8
                    swapIn$ = field!
                    break
            
                case 9
                    swapInUnit$ = field!
                    break
            
                case 10
                    io$ = field!
                    break
            
                case 11
                    ioUnit$ = field!
                    break
            
            swend
    
            if fieldNo > 11 then
                cmd$ = cmd$ + " " + field!
            endif
            
        endif
    
    wend

    REM  Use -1 to turn off this output
    
    if recordNo = -1 then
        gosub print_io_input_fields
    endif
    
    anyIO = num(diskRead$) + num(diskWrite$) + num(swapIn$) + num(io$)

    if includeZeroCPUProcesses or anyIO > 0 or user$ = 'root' then
        
        oneRecordMap! = new java.util.HashMap()
        
        oneRecordMap!.put("cmd", cmd$)
        oneRecordMap!.put("priority", priority$)
        oneRecordMap!.put("user", user$)
        oneRecordMap!.put("disk_read", diskRead$)
        oneRecordMap!.put("disk_write", diskWrite$)
        oneRecordMap!.put("swap_in", swapIn$)
        oneRecordMap!.put("io", io$)  
        
        recordsMap!.put(pid$, oneRecordMap!)
    
    endif
    

    return

    
    rem ------------------------------------------------------------------------------------------
    rem  Initialize "iotop" input fields
    rem ------------------------------------------------------------------------------------------
    
init_io_input_fields:

    pid$ = ""
    priority$ = ""
    user$ = ""
    diskRead$ = ""
    diskWrite$ = ""
    swapIn$ = ""
    io$ = ""
    cmd$ = ""

    return
    
    
    rem ------------------------------------------------------------------------------------------
    rem  Print "iotop" input fields
    rem ------------------------------------------------------------------------------------------
    
print_io_input_fields:

    print ""
    print "recordNo = ", recordNo
    print "pid$ = ", pid$
    print "priority$ = ", priority$
    print "user$ = ", user$
    print "diskRead$ = ", diskRead$
    print "diskWrite$ = ", diskWrite$
    print "swapIn$ = ", swapIn$
    print "io$ = ", io$
    print "cmd$ = ", cmd$

    return


    rem ------------------------------------------------------------------------------------------
    rem  Close the "iotop" file
    rem ------------------------------------------------------------------------------------------
    
close_io_file:

    close (ioCmdChannel)

    return


    rem ------------------------------------------------------------------------------------------
    rem  Prepare and open "lslk" file
    rem ------------------------------------------------------------------------------------------
    
prep_and_open_lslk_file:

    if isWindowsEnv then
        lslkCmdOutputFile$ = "/tmp/lslkout.txt"
    else
        lslkCmdOutputFile$ = "/tmp/heavy-hitters-lock-lslk.txt"
    
        lslkCmd$ = "/usr/sbin/lslk | grep ""pro5"" | grep "" w \| W \| rw \| RW "" > " + lslkCmdOutputFile$ 
    
        returnCode = scall(lslkCmd$)
    endif


    lslkCmdChannel = unt
    open (lslkCmdChannel) lslkCmdOutputFile$

    return

    
    rem ------------------------------------------------------------------------------------------
    rem  Process records in the input file from the Linux "lslk" command.  Put them in the
    rem  recordsMap! for sending to the database.
    rem ------------------------------------------------------------------------------------------
    
process_lslk_records:

    recordsMap! = new java.util.HashMap()

    recordNo = 0
    pidList$ = ""

    while TRUE
    
        read (lslkCmdChannel,err=*break) inputRecord$
        REM print "inputRecord$ = ", inputRecord$
        
        recordNo = recordNo + 1
        
        gosub read_one_lslk_record
    
    wend
    
    if recordsMap!.size() > 0 then

        REM  Now we need to add User and Command to the recordsMap! structure
        
        gosub prep_and_open_lock_ps_file
        gosub process_lock_ps_records
        gosub close_lock_ps_file
    
        call "ProcessLockStatsDAO.bbj::add_lock_records", currentTimestamp$, recordsMap!
        
    endif

    return

    
    rem ------------------------------------------------------------------------------------------
    rem  Read one "lslk" record
    rem ------------------------------------------------------------------------------------------
    
read_one_lslk_record:

    gosub init_lslk_input_fields
    
    rawFieldList! = java.util.Arrays.asList(new java.lang.String(inputRecord$).split(" "))
    iter! = rawFieldList!.iterator()
    fieldNo = 0
    
    while iter!.hasNext()
    
        field! = iter!.next()
        
        if len ( cvs(field!, 3) )
        
            fieldNo = fieldNo + 1
            
            switch fieldNo
            
                case 2
                    pid$ = field!
                    break
            
                case 6
                    lockType$ = field!
                    break
            
                case 12
                    fileName$ = field!
                    break
            
            swend
            
        endif
    
    wend

    REM  Use -1 to turn off this output
    
    if recordNo = -1 then
        gosub print_lslk_input_fields
    endif
    
    REM  Limit to valid lock types.  Sometimes the grep'd records pick up something unexpected.
    
    if lockType$ = "r" or lockType$ = "rw" or lockType$ = "w" or lockType$ = "?" then
        oneRecordMap! = new java.util.HashMap()
        
        oneRecordMap!.put("lock_type", lockType$)
        oneRecordMap!.put("file_name", fileName$)
        
        recordsMap!.put(pid$, oneRecordMap!)
        
        if len(pidList$) then
            pidList$ = pidList$ + "," + pid$
        else
            pidList$ = pid$
        endif
    endif
    

    return

    
    rem ------------------------------------------------------------------------------------------
    rem  Initialize "lock" input fields
    rem ------------------------------------------------------------------------------------------
    
init_lslk_input_fields:

    pid$ = ""
    lockType$ = ""
    fileName$ = ""

    return
    
    
    rem ------------------------------------------------------------------------------------------
    rem  Print "lock" input fields
    rem ------------------------------------------------------------------------------------------
    
print_lslk_input_fields:

    print "recordNo=", recordNo, ", pid$=", pid$, ", lockType$=", lockType$, ", fileName$=", fileName$

    return


    rem ------------------------------------------------------------------------------------------
    rem  Close the "lock" file
    rem ------------------------------------------------------------------------------------------
    
close_lslk_file:

    close (lslkCmdChannel)

    return


    rem ------------------------------------------------------------------------------------------
    rem  Prepare and open locks "ps" file
    rem ------------------------------------------------------------------------------------------
    
prep_and_open_lock_ps_file:

    if isWindowsEnv then
        lockPsCmdOutputFile$ = "/tmp/psout.txt"
    else
        lockPsCmdOutputFile$ = "/tmp/heavy-hitters-lock-ps.txt"
    
        lockPsCmd$ = "ps --no-headers -fp " + pidList$ + " > " + lockPsCmdOutputFile$ 
    
        returnCode = scall(lockPsCmd$)
    endif

    lockPsCmdChannel = unt
    open (lockPsCmdChannel) lockPsCmdOutputFile$

    return

    
    rem ------------------------------------------------------------------------------------------
    rem  Process records in the input file from the Linux locks "ps" command.  Put them in the
    rem  recordsMap! for sending to the database.
    rem ------------------------------------------------------------------------------------------
    
process_lock_ps_records:

    psRecordNo = 0
    
    while TRUE
    
        read (lockPsCmdChannel,err=*break) inputRecord$
        REM print "inputRecord$ = ", inputRecord$
        
        psRecordNo = psRecordNo + 1
        
        gosub read_one_lock_ps_record
    
    wend

    return

    
    rem ------------------------------------------------------------------------------------------
    rem  Read one lock "ps" record
    rem ------------------------------------------------------------------------------------------
    
read_one_lock_ps_record:

    gosub init_lock_ps_input_fields
    
    rawFieldList! = java.util.Arrays.asList(new java.lang.String(inputRecord$).split(" "))
    iter! = rawFieldList!.iterator()
    fieldNo = 0
    
    while iter!.hasNext()
    
        field! = iter!.next()
        
        if len ( cvs(field!, 3) )
        
            fieldNo = fieldNo + 1
            
            switch fieldNo
            
                case 1
                    user$ = field!
                    break
            
                case 2
                    psPid$ = field!
                    break
            
            swend
    
            if fieldNo > 7 then
                cmd$ = cmd$ + " " + field!
            endif
            
        endif
    
    wend

    REM  Use -1 to turn off this output
    
    if psRecordNo = -1 then
        gosub print_lock_ps_input_fields
    endif

    oneRecordMap! = cast( java.util.HashMap, recordsMap!.get(psPid$) ) 
    
    oneRecordMap!.put("user", user$)
    oneRecordMap!.put("cmd", cmd$)
    
    REM  recordsMap!.put(pid$, oneRecordMap!)

    return

    
    rem ------------------------------------------------------------------------------------------
    rem  Initialize lock "ps" input fields
    rem ------------------------------------------------------------------------------------------
    
init_lock_ps_input_fields:

    psPid$ = ""
    user$ = ""
    cmd$ = ""

    return
    
    
    rem ------------------------------------------------------------------------------------------
    rem  Print "lock ps" input fields
    rem ------------------------------------------------------------------------------------------
    
print_lock_ps_input_fields:

    print "psRecordNo=", psRecordNo, ", psPid$=", psPid$, ", user$=", user$, ", cmd$=", cmd$

    return


    rem ------------------------------------------------------------------------------------------
    rem  Close the "lock ps" file
    rem ------------------------------------------------------------------------------------------
    
close_lock_ps_file:

    close (lockPsCmdChannel)

    return

    
    