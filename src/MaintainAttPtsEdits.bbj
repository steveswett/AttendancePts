REM /**
REM  * MaintainAttPtsEdits.bbj
REM  * @author stevett
REM  *
REM  * Written: August 2015
REM  * 
REM  * Description: Edits (record changes) screen of Attendance Pts Maintenance/Inquiry.
REM  *
REM  * Revised: October 2016 - use ASCII 0-127 for function/edit key inputs.  See ERP-5239.
REM  * 
REM  */

use java.util.LinkedHashMap
use java.util.HashMap

declare java.util.HashMap pointDataMap!

declare java.util.LinkedHashMap exceptionDefsMap!
declare java.util.LinkedHashMap wfmrReasonsMap!


enter isInquiryMode, isAddMode, badge5In$, employeeNameIn$, pointsDate!, pointDataMap!, anyDataSaved


rem *- - - - - - - - - - CONSTANTS - - - - - - - - - -*

constants:


TRUE = 1
FALSE = 0

RGB_WHITE_ON_BLUE$= $033F$
RGB_YELLOW_ON_BLUE$ = $033C$

dim ROW_OF_BLANKS$(80, " ")

RECORDS_PER_PAGE = 1
COLUMNS_PER_PAGE = 1
RECORDS_PER_COLUMN = 1
ROWS_PER_RECORD = 1
START_ROW_FOR_LIST = 0
END_ROW_FOR_LIST = START_ROW_FOR_LIST + RECORDS_PER_COLUMN - 1 
SHOW_FIELD_TERMINATOR_PRESSED = FALSE

PTS_DATE_FIELD_NO = 1
PTS_FIELD_NO = 2
STS_FIELD_NO = 3
CODE_FIELD_NO = 4
NOTES1_FIELD_NO = 5
NOTES2_FIELD_NO = 6
NOTES3_FIELD_NO = 7
HIDDEN_FIELD_NO = 8


REM     Note about INPUTE:
REM     
REM     Any value less than 63 will cause the input function to exit setting the CTL value to the function value. 
REM     The "help" function causes an exit with CTL=-1.

REM     For consistency across programs regarding function keys (not edit keys):
REM     Input values: F1, F2, F3 ... F10 = $11$, $12$, $13$ ... $1A$
REM     Output values: F1, F2, F3 ... F10 = $01$, $02$, $03$ ... $0A$


F2_CUSTOM_INPUT_VALUE$ = $12$
F2_CTL_OUTPUT_VALUE$ = $02$

F4_CUSTOM_INPUT_VALUE$ = $14$
F4_CTL_OUTPUT_VALUE$ = $04$

F9_CUSTOM_INPUT_VALUE$ = $19$
F9_CTL_OUTPUT_VALUE$ = $09$

TAB_CUSTOM_INPUT_VALUE$ = $09$
TAB_CTL_OUTPUT_VALUE$ = $19$

BACKTAB_CUSTOM_INPUT_VALUE$ = $15$
BACKTAB_CTL_OUTPUT_VALUE$ = $1A$

rem  PAGE_UP_CUSTOM_INPUT_VALUE$ = $84$
PAGE_UP_CUSTOM_INPUT_VALUE$ = $03$
PAGE_UP_CTL_OUTPUT_VALUE$ = $1B$

rem  PAGE_DOWN_CUSTOM_INPUT_VALUE$ = $85$
PAGE_DOWN_CUSTOM_INPUT_VALUE$ = $04$
PAGE_DOWN_CTL_OUTPUT_VALUE$ = $1C$


rem *- - - - - - - - - - FUNCTIONS - - - - - - - - - -*

functions:


def fnHasRecordsBefore%(aDoIt)

    return currentRecordNo > 1

fnend


def fnHasRecordsAfter%(aDoIt)

    return currentRecordNo + RECORDS_PER_PAGE - 1 < attPtsWorkRecordsMapSize

fnend


rem *- - - - - - - - - - MAIN ROUTINE - - - - - - - - - -*

main_routine:

    gosub init
    
    gosub display_data
    
    gosub handle_input


rem *- - - - - - - - - - EOJ - - - - - - - - - -*

eoj:

    exit


rem *- - - - - - - - - - SUBROUTINES - - - - - - - - - -*


    rem ------------------------------------------------------------------------------------------
    rem  One-time intialization
    rem ------------------------------------------------------------------------------------------

    
init:

    anyDataSaved = FALSE
    
    if isAddMode then
        firstFieldNo = PTS_DATE_FIELD_NO 
    else
        firstFieldNo = PTS_FIELD_NO 
    endif
    
    lastFieldNo = NOTES3_FIELD_NO 

        rem  The 'ET' (end type ahead control) below is VERY IMPORTANT when using SHIFT+TAB.  Without it, each
        rem  SHIFT+TAB would actually be treated as two inputs: SHIFT+TAB followed by TAB.

    print 'UC', 'CS', 'ET'
    
        rem Set color.  In the following, $03$ is the background (blue) and $3F$ is the foreground (white).
        rem The bits for that were: 0 0 1 1 1 1 1 1  (<-- foreground)   0 0 0 0 0 0 1 1  (<-- background)
        
    print 'RGB'(RGB_WHITE_ON_BLUE$)
    rem print 'RGB'($033C$);   rem blue background, yellow foreground
    rem print 'RGB'($0330$);   rem blue background, red foreground
    
    print 'CURSOR'("rep_block");   rem This only works in BBj -- not Pro/5


        rem For info on function key programming, see this article: http://www.basis.com/kb00025
        rem Also see Basis help: PRO/5 > User's Ref > Character Devices > Terminals > Function and Edit Keys
    
        rem Below is how the 'FL' (function keys) and 'EL' (edit keys) mnemonics are used to assign a key a value
        
        rem "2" - load only one key
        rem $03$ - means the F4 key (0-based)
        rem chr(1) - means the custom value of the function key is 1 byte long
        rem F4_CUSTOM_INPUT_VALUE$ - is the custom INPUT value of the key
        
    print 'FL', "2", $01$, chr(1), F2_CUSTOM_INPUT_VALUE$,
    print 'FL', "2", $03$, chr(1), F4_CUSTOM_INPUT_VALUE$,
    print 'FL', "2", $08$, chr(1), F9_CUSTOM_INPUT_VALUE$,
    
    print 'EL', "2", $3C$, chr(1), BACKTAB_CUSTOM_INPUT_VALUE$,    
    print 'EL', "2", $06$, chr(1), PAGE_UP_CUSTOM_INPUT_VALUE$,
    print 'EL', "2", $07$, chr(1), PAGE_DOWN_CUSTOM_INPUT_VALUE$,
    
    f2Pair$ = F2_CUSTOM_INPUT_VALUE$ + F2_CTL_OUTPUT_VALUE$
    f4Pair$ = F4_CUSTOM_INPUT_VALUE$ + F4_CTL_OUTPUT_VALUE$
    f9Pair$ = F9_CUSTOM_INPUT_VALUE$ + F9_CTL_OUTPUT_VALUE$
    pageupPair$ = PAGE_UP_CUSTOM_INPUT_VALUE$ + PAGE_UP_CTL_OUTPUT_VALUE$
    pagedownPair$ = PAGE_DOWN_CUSTOM_INPUT_VALUE$ + PAGE_DOWN_CTL_OUTPUT_VALUE$
    tabPair$ = TAB_CUSTOM_INPUT_VALUE$ + TAB_CTL_OUTPUT_VALUE$
    backtabPair$ = BACKTAB_CUSTOM_INPUT_VALUE$ + BACKTAB_CTL_OUTPUT_VALUE$
    
    resultIgnored$ = stbl("!TERMS", f2Pair$ + f4Pair$ + f9Pair$ + pageupPair$ + pagedownPair$ + tabPair$ + backtabPair$ + stbl("!TERMS"))
    resultIgnored$ = stbl("!EDIT", f2Pair$ + f4Pair$ + f9Pair$ + pageupPair$ + pagedownPair$ + tabPair$ + backtabPair$ + stbl("!EDIT"))
    
    exceptionDefsMap! = new java.util.LinkedHashMap()
    call "WFMRExceptionDefsDAO.bbj::get_ids_and_names", exceptionDefsMap!
    
    wfmrReasonsMap! = new java.util.LinkedHashMap()
    call "WFMRReasonDAO.bbj::get_ids_and_names", wfmrReasonsMap!
    
    hasFMLATypeOrigDisposition = FALSE
    
    if !(isAddMode) then
    
        REM  Save original values of editable fields:
    
        tmpDispCode$ = pointDataMap!.get("disp_cd")
        
        pointDataMap!.put("orig_pts", pointDataMap!.get("pts") )
        pointDataMap!.put("orig_stat", pointDataMap!.get("stat") )
        pointDataMap!.put("orig_cd", pointDataMap!.get("cd") )
        pointDataMap!.put("orig_text1", pointDataMap!.get("text1") )
        pointDataMap!.put("orig_text2", pointDataMap!.get("text2") )
        pointDataMap!.put("orig_text3", pointDataMap!.get("text3") )
        pointDataMap!.put("orig_disp_cd", tmpDispCode$ )
        
        if tmpDispCode$ = "F" or tmpDispCode$ = "P" or tmpDispCode$ = "D" then
            hasFMLATypeOrigDisposition = TRUE
        endif 
    endif
            
    
    return


    rem ------------------------------------------------------------------------------------------
    rem  Display the screen headings
    rem ------------------------------------------------------------------------------------------


display_screen_headings:

    call "TerminalUtilities.bbj::display_screen_headings", pgm(-2), "ATTENDANCE POINTS" 

    return

    
    rem ------------------------------------------------------------------------------------------
    rem  Display data on page, besides page headings
    rem ------------------------------------------------------------------------------------------

    
display_data:

    print @(0,0), 'CE', 'UC'
    
    gosub display_screen_headings
    
    isRecordEditable = !(isInquiryMode)
    
    if isRecordEditable then
        begUnLin$ = 'BU'
        endUnLin$ = 'EU'
    else
        begUnLin$ = ""
        endUnLin$ = ""
    endif
    
    print @(0,3), badge5In$
    print @(7,3), employeeNameIn$
    
    if (isAddMode) then
        workFileId = 0
    else
        workFileId = pointDataMap!.get("work_file_id")
    endif
    
    print @(57,3), "Work File ID: ", str(workFileId)
    
    unformattedDate$ = pointsDate!
    call "DateUtilities.bbj::get_yymd_as_mdy_with_slashes", unformattedDate$, TRUE, formattedDate$
    
    print @(0,5), "Points date (MM/DD/YY):"
    
    if (isAddMode) then
        print @(26,5), begUnLin$, formattedDate$, endUnLin$
    else
        print @(26,5), formattedDate$
    endif
    
    print @(0,6), "Points:"
    print @(26,6), begUnLin$, str( pointDataMap!.get("pts"):"#.0" ), endUnLin$
    
    status$ = pointDataMap!.get("stat")
    print @(0,7), "Status (A, I):"
    print @(26,7), begUnLin$, status$, endUnLin$
    print @(36,7), "(", iff(status$ = "A", "Active", "Inactive"), ")"
    
    attCode$ = pointDataMap!.get("cd")
    print @(0,8), "Code (1, 2):"
    print @(26,8), begUnLin$, attCode$, endUnLin$
    print @(36,8), "(", iff(attCode$ = "1", "Late or Leave Early", "Absent"), ")"
    
    print @(0,10), "Notes line 1:"
    print @(26,10), begUnLin$, pad( pointDataMap!.get("text1") , 50, "L", " "), endUnLin$
    
    print @(0,11), "Notes line 2:"
    print @(26,11), begUnLin$, pad( pointDataMap!.get("text2") , 50, "L", " "), endUnLin$
    
    print @(0,12), "Notes line 3:"
    print @(26,12), begUnLin$, pad( pointDataMap!.get("text3") , 50, "L", " "), endUnLin$
     
    dispCode$ = pointDataMap!.get("disp_cd")
    print @(0,14), "Disposition:"
    
    if len( cvs(dispCode$,2) ) > 0 then
        call "ApproveAttPtsDispPopup.bbj::get_description", dispCode$, dispDescr$
        print @(26,14), dispCode$
        print @(36,14), "(", dispDescr$, ")"
        
        if !(isAddMode) and !(isInquiryMode) then
            origDispCode$ = pointDataMap!.get("orig_disp_cd")
            
            if hasFMLATypeOrigDisposition then
                print @(40 + len(dispDescr$),14), 'RGB'(RGB_YELLOW_ON_BLUE$), "F2=change", 'RGB'(RGB_WHITE_ON_BLUE$)
            endif  
        endif
        
    endif
    
    
    print @(0,15), "WFMR code:"
    
    wfmrExcDefId! = pointDataMap!.get("wfmr_exc_def_id")
    
    if wfmrExcDefId! > 0 then
        wfmrExcDefDescr$ = exceptionDefsMap!.get(wfmrExcDefId!)
        if len(wfmrExcDefDescr$) > 40 then wfmrExcDefDescr$ = wfmrExcDefDescr$(1,40)
        print @(25,15), wfmrExcDefId! 
        print @(36,15), "(", wfmrExcDefDescr$, ")"
    endif  
    
    print @(0,16), "WFMR reason:"
    
    wfmrReasonId! = pointDataMap!.get("wfmr_reason_id")
    
    if wfmrReasonId! > 0 then
        wfmrReasonDescr$ = wfmrReasonsMap!.get(wfmrReasonId!)
        if len(wfmrReasonDescr$) > 40 then wfmrReasonDescr$ = wfmrReasonDescr$(1,40)
        print @(25,16), wfmrReasonId! 
        print @(36,16), "(", wfmrReasonDescr$, ")"
    endif
    
    schedShiftId! = pointDataMap!.get("sched_shift_id")
    print @(0,17), "Scheduled shift ID:"
    
    if schedShiftId! > 0 then
        print @(26,17), str(schedShiftId!)
    endif

    
    dateAdded$ = pointDataMap!.get("adddt")
    print @(0,18), "Added date:"
    print @(26,18), dateAdded$
    
    if len( cvs(dateAdded$,2) ) > 0 then
        print @(36,18), "by ", pointDataMap!.get("addby")
    endif
    
    reductPts = pointDataMap!.get("reduct_pts")
    reductTime$ = cvs( pointDataMap!.get("reduct_time"), 3 )
    
    if reductPts > 0 then
        print @(55,18), "Reduction of: ", str( reductPts:"#.0" ) 
    endif
    
    if len(reductTime$) = 14 then
        call "DateUtilities.bbj::get_yymdhms_as_mdy_with_time", reductTime$, fmtReductTime$
        print @(55,19), "on: ", fmtReductTime$ 
    endif
    
    dateChanged$ = pointDataMap!.get("chgdt")
    print @(0,19), "Last changed date:"
    print @(26,19), dateChanged$
    
    if len( cvs(dateChanged$,2) ) > 0 then
        print @(36,19), "by ", pointDataMap!.get("chgby")
    endif
    
    if isInquiryMode then
        saveCaption$ = "Enter=Continue"
        deleteCaption$ = ""
    else
        saveCaption$ = "Enter=Save"
        deleteCaption$ = "F9=Delete  "
    endif
    
    if isInquiryMode then
        exitCaption$ = ""
    else
        exitCaption$ = "F4=Exit  "
    endif
      
    if isAddMode then
        actionLabel$ = exitCaption$ + saveCaption$
    else
        actionLabel$ = exitCaption$ + deleteCaption$ + saveCaption$
    endif
    
    
    print @(3,21), actionLabel$ 
    
    if SHOW_FIELD_TERMINATOR_PRESSED then print @(5,22), 'CL', "Field terminator (savedCTL): ", savedCTL

    return

    
    rem ------------------------------------------------------------------------------------------
    rem  Handle input, which will be F4 or Page Up or Page Down
    rem ------------------------------------------------------------------------------------------

    
handle_input:

    if isRecordEditable then
        currentFieldNo = firstFieldNo
    else
        currentFieldNo = HIDDEN_FIELD_NO
    endif

    while TRUE
        
        switch currentFieldNo
        
            case HIDDEN_FIELD_NO
                inpute 0, 21, 1, "", ignoreInput$
                
                break
        
            case PTS_DATE_FIELD_NO
                unformattedDate$ = pointDataMap!.get("ptdt")
                
                REM  Convert YYYYMMDD to MMDDYY
                
                beforeValue$ = unformattedDate$(5,4) + unformattedDate$(3,2)
                afterValue$ = beforeValue$ 
                print @(26, 5), 'BU'
                inpute 26, 5, "00/00/00", "", afterValue$
                print @(34, 5), 'EU' 
                
                if !(afterValue$ = beforeValue$) then 
                    pointDataMap!.put("changed", TRUE)
                    
                    REM  Convert MMDDYY to YYYYMMDD
                    
                    afterValue$ = pad(afterValue$, 6, "L", "0")
                    afterValue$ = "20" + afterValue$(5,2) + afterValue$(1,4)
                    pointDataMap!.put("ptdt", afterValue$)
                endif
                
                break
        
            case PTS_FIELD_NO
                beforeValue = pointDataMap!.get("pts")
                afterValue = beforeValue 
                print @(26, 6), 'BU'
                inputn 26, 6, "#.0", "#.0", "", 5, afterValue
                print @(29, 6), 'EU'
                 
                if !(afterValue = beforeValue) then 
                    pointDataMap!.put("changed", TRUE)
                    pointDataMap!.put("pts", afterValue)
                endif
                
                break
        
            case STS_FIELD_NO
                beforeValue$ = pointDataMap!.get("stat")
                afterValue$ = beforeValue$ 
                print @(26, 7), 'BU'
                inpute 26, 7, 1, "", afterValue$
                print @(27, 7), 'EU' 
                
                if !(afterValue$ = beforeValue$) then 
                    pointDataMap!.put("changed", TRUE)
                    pointDataMap!.put("stat", afterValue$)
                endif
                
                break
        
            case CODE_FIELD_NO
                beforeValue$ = pointDataMap!.get("cd")
                afterValue$ = beforeValue$ 
                print @(26, 8), 'BU'
                inpute 26, 8, 1, "", afterValue$
                print @(27, 8), 'EU' 
                
                if !(afterValue$ = beforeValue$) then 
                    pointDataMap!.put("changed", TRUE)
                    pointDataMap!.put("cd", afterValue$)
                endif
                
                break
        
            case NOTES1_FIELD_NO
                beforeValue$ = pointDataMap!.get("text1")
                afterValue$ = beforeValue$ 
                print @(26, 10), 'BU'
                inpute 26, 10, 50, "", afterValue$
                print @(76, 10), 'EU' 
                
                if !(afterValue$ = beforeValue$) then 
                    pointDataMap!.put("changed", TRUE)
                    pointDataMap!.put("text1", afterValue$)
                endif
                
                break
        
            case NOTES2_FIELD_NO
                beforeValue$ = pointDataMap!.get("text2")
                afterValue$ = beforeValue$ 
                print @(26, 11), 'BU'
                inpute 26, 11, 50, "", afterValue$
                print @(76, 11), 'EU' 
                
                if !(afterValue$ = beforeValue$) then 
                    pointDataMap!.put("changed", TRUE)
                    pointDataMap!.put("text2", afterValue$)
                endif
                
                break
        
            case NOTES3_FIELD_NO
                beforeValue$ = pointDataMap!.get("text3")
                afterValue$ = beforeValue$ 
                print @(26, 12), 'BU'
                inpute 26, 12, 50, "", afterValue$
                print @(76, 12), 'EU' 
                
                if !(afterValue$ = beforeValue$) then 
                    pointDataMap!.put("changed", TRUE)
                    pointDataMap!.put("text3", afterValue$)
                endif
                
                break
            
        swend

            
        gosub clear_err_msg

        savedCTL = CTL
        isTabbing = FALSE
        needToBreak = FALSE
        wasRecordSaved = FALSE
        
        switch savedCTL
        
            case ASC(F2_CTL_OUTPUT_VALUE$)
                    if !(isInquiryMode) then
                        origDispCode$ = pointDataMap!.get("orig_disp_cd")
                
                        if isRecordEditable and !(isAddMode) and hasFMLATypeOrigDisposition then
                            beforeValue$ = pointDataMap!.get("disp_cd")
                            afterValue$ = beforeValue$ 
                            call "ApproveAttPtsDispPopup.bbj::show_popup", TRUE, 30, 13, afterValue$
        
                            if !(afterValue$ = beforeValue$) then 
                                pointDataMap!.put("changed", TRUE)
                                pointDataMap!.put("disp_cd", afterValue$)
                                
                                if afterValue$ = "D" then
                                    pointDataMap!.put("stat", "A")
                                endif
                                
                                if afterValue$ = "P" then
                                    pointDataMap!.put("stat", "I")
                                endif
                                
                            endif
                        endif
                    endif
        
                    break
        
            case ASC(F4_CTL_OUTPUT_VALUE$)
                    if isRecordEditable then
                        gosub handle_pending_change
                        
                        if len(errMsg$) = 0 then
                            needToBreak = TRUE
                        endif
                    else
                        needToBreak = TRUE
                    endif
        
                    break
        
            case ASC(F9_CTL_OUTPUT_VALUE$)
                    if isRecordEditable then
                        gosub handle_delete
                        
                        if okToDeleteRecord$ = "Y" then
                            needToBreak = TRUE
                        endif
                    endif
        
                    break
        
            case ASC(TAB_CTL_OUTPUT_VALUE$)
                    isTabbing = TRUE
                    gosub set_field_no_after_tabbing
                    
                    break
                    
            case ASC(BACKTAB_CTL_OUTPUT_VALUE$)
                    isTabbing = TRUE
                    gosub set_field_no_after_back_tabbing
                    
                    break
                    
            case 0
                    if isRecordEditable then
                        gosub validate_and_save_record
                        
                        if len(errMsg$) = 0 then
                            wasRecordSaved = TRUE
                            
                            if (isAddMode) then
                                gosub write_saved_message
                                wait .5
                                needToBreak = TRUE
                            endif
                            
                        endif
                    else
                        needToBreak = TRUE
                    endif
                    
                    break
        swend

        if needToBreak then break

        if isTabbing and SHOW_FIELD_TERMINATOR_PRESSED then
            print @(55,21), 'CL', "CTL, savedCTL: ", CTL, ", ", savedCTL
        endif

        if !(isTabbing) and len(errMsg$) = 0 then
            gosub display_data
            
            if wasRecordSaved then
                gosub write_saved_message
            endif
            
        endif
        
    wend
    
    return

    
    rem ------------------------------------------------------------------------------------------
    rem  reset editable fields' values to values initially read
    rem ------------------------------------------------------------------------------------------
    
    
revert_work_data_to_orig_values:

    pointDataMap!.put("pts", pointDataMap!.get("orig_pts") )
    pointDataMap!.put("stat", pointDataMap!.get("orig_stat") )
    pointDataMap!.put("cd", pointDataMap!.get("orig_cd") )
    pointDataMap!.put("text1", pointDataMap!.get("orig_text1") )
    pointDataMap!.put("text2", pointDataMap!.get("orig_text2") )
    pointDataMap!.put("text3", pointDataMap!.get("orig_text3") )

    return
    
    
    rem ------------------------------------------------------------------------------------------
    rem  set_field_no_after_tabbing
    rem ------------------------------------------------------------------------------------------
    
    
set_field_no_after_tabbing:

    if !(currentFieldNo = HIDDEN_FIELD_NO) then
        currentFieldNo = currentFieldNo + 1
        if currentFieldNo > lastFieldNo then currentFieldNo = firstFieldNo
    endif
        
    return
    
    
    rem ------------------------------------------------------------------------------------------
    rem  set_field_no_after_back_tabbing
    rem ------------------------------------------------------------------------------------------
    
    
set_field_no_after_back_tabbing:

    if !(currentFieldNo = HIDDEN_FIELD_NO) then
        currentFieldNo = currentFieldNo - 1
        if currentFieldNo < firstFieldNo then currentFieldNo = lastFieldNo
    endif
    
    return
    
    
    rem ------------------------------------------------------------------------------------------
    rem  validate_and_save_record
    rem ------------------------------------------------------------------------------------------
    
    
validate_and_save_record:

    gosub validate_input
    
    if len(errMsg$) > 0 then
        gosub display_err_msg
    else
        if (isAddMode) then
            gosub insert_record
        else
            gosub update_record
        endif
    endif

    return
    
    
    rem ------------------------------------------------------------------------------------------
    rem  update_record
    rem ------------------------------------------------------------------------------------------
    
    
update_record:

    call "AttendPtsDAO.bbj::update_pts_record_for_employee", badge5In$, pointsDate!, pointDataMap!
    pointDataMap!.remove("changed")
    pointDataMap!.put("saved", TRUE)
    anyDataSaved = TRUE

    return
    
    
    rem ------------------------------------------------------------------------------------------
    rem  insert_record
    rem ------------------------------------------------------------------------------------------
    
    
insert_record:

    call "AttendPtsDAO.bbj::insert_pts_record_for_employee", badge5In$, pointDataMap!.get("ptdt"), pointDataMap!
    pointDataMap!.remove("changed")
    pointDataMap!.put("saved", TRUE)
    anyDataSaved = TRUE

    return
    
    
    rem ------------------------------------------------------------------------------------------
    rem  handle_pending_change
    rem ------------------------------------------------------------------------------------------
    
    
handle_pending_change:

    if !( pointDataMap!.get("changed") = null() ) then
    
        saveChanges$ = "Y"
        
        print @(0,22), 'CL', 'RGB'(RGB_YELLOW_ON_BLUE$)
        
        if isAddMode then
            print @(15,22), "You have begun to edit a new record.  Add it? ", 'BU'
            inpute 61, 22, 1, "", saveChanges$
        else
            print @(14,22), "Do you want to save changes made to this record? ", 'BU'
            inpute 63, 22, 1, "", saveChanges$
        endif
        
        print @(78, 22), 'EU', 'RGB'(RGB_WHITE_ON_BLUE$)
        
        if saveChanges$ = "Y" then 
            gosub validate_and_save_record

            if len(errMsg$) = 0 then
                gosub write_saved_message
                wait .5
            endif
            
        else
            if !(isAddMode) then
                gosub revert_work_data_to_orig_values
            endif
        endif
        
    endif    

    return

    
    rem ------------------------------------------------------------------------------------------
    rem  write_saved_message
    rem ------------------------------------------------------------------------------------------


write_saved_message:

    tmpMsg$ = "The record has been saved."
    print @(0,22), 'CL', 'RGB'(RGB_YELLOW_ON_BLUE$), tmpMsg$, 'RGB'(RGB_WHITE_ON_BLUE$)  
    
    return
    
    
    
    rem ------------------------------------------------------------------------------------------
    rem  clear_err_msg
    rem ------------------------------------------------------------------------------------------
    
    
clear_err_msg:

    print @(0,22), 'CL'
    errMsg$ = ""
        
    return
    
    
    rem ------------------------------------------------------------------------------------------
    rem  display_err_msg
    rem ------------------------------------------------------------------------------------------
    
    
display_err_msg:

    print @(0,22), 'CL', 'BR', pad(errMsg$, 80, "L", " "), 'ER'
        
    return
    
    
    rem ------------------------------------------------------------------------------------------
    rem  validate_input
    rem ------------------------------------------------------------------------------------------
    
    
validate_input:

    if (isAddMode) then
        yyyymmddTemp$ = pointDataMap!.get("ptdt")
        call "DateUtilities.bbj::is_valid_yyyymmdd_date", yyyymmddTemp$, isValidDate 

        if !(isValidDate) then
            errMsg$ = "Date entered is not valid (MM/DD/YY)."
            currentFieldNo = PTS_DATE_FIELD_NO
            goto end_validate_input
        endif
        
        call "AttendPtsDAO.bbj::does_pts_record_exist", badge5In$, yyyymmddTemp$, 0, doesPtsRecordExist
        
        if doesPtsRecordExist then
            errMsg$ = "A record with this date and work file ID is already on file; cannot add."
            currentFieldNo = PTS_DATE_FIELD_NO
            goto end_validate_input
        endif
    endif

    pts = pointDataMap!.get("pts")
    
    if (pts < 0 or pts > 3) then
        errMsg$ = "A value between 0 and 3 is required in the ""Points"" field."
        currentFieldNo = PTS_FIELD_NO
        goto end_validate_input
    endif
    
    sts$ = pointDataMap!.get("stat") 

    if sts$ <> "A" and sts$ <> "I" then
        errMsg$ = "Invalid Status code."
        currentFieldNo = STS_FIELD_NO
        goto end_validate_input
    endif
    
    code$ = pointDataMap!.get("cd") 

    if code$ <> "1" and code$ <> "2" then
        errMsg$ = "Invalid Code."
        currentFieldNo = CODE_FIELD_NO
        goto end_validate_input
    endif
    
    if !(isAddMode) then
        origDispCode$ = pointDataMap!.get("orig_disp_cd")
        
        if hasFMLATypeOrigDisposition then
            dispCode$ = pointDataMap!.get("disp_cd")
            
            if dispCode$ <> "F" and dispCode$ <> "P" and dispCode$ <> "D" then
              errMsg$ = "In this case, disposition can only be FMLA Pending, Approved or Denied."
              goto end_validate_input
            endif 
        endif 
    endif
 
    
    end_validate_input:
        
    return

    
    rem ------------------------------------------------------------------------------------------
    rem  Show delete confirmation and delete record, if desired
    rem ------------------------------------------------------------------------------------------
    
    
handle_delete:

        okToDeleteRecord$ = "N"
        
        print @(0,22), 'CL', 'RGB'(RGB_YELLOW_ON_BLUE$)
        print @(14,22), "Are you sure you wish to delete this record? ", 'BU'
        inpute 59, 22, 1, "", okToDeleteRecord$
        print @(60, 22), 'EU', 'RGB'(RGB_WHITE_ON_BLUE$)
        
        if okToDeleteRecord$ = "Y" then
            workFileIdIn = pointDataMap!.get("work_file_id")
            call "AttendPtsDAO.bbj::delete_pts_record_for_employee", badge5In$, pointsDate!, workFileIdIn
            anyDataSaved = TRUE
            gosub write_deleted_message
            wait .5
        endif

    return
    
    
    rem ------------------------------------------------------------------------------------------
    rem  Show message that record has been deleted
    rem ------------------------------------------------------------------------------------------
    
    
write_deleted_message:

    tmpMsg$ = "The record has been deleted."
    print @(0,22), 'CL', 'RGB'(RGB_YELLOW_ON_BLUE$), tmpMsg$, 'RGB'(RGB_WHITE_ON_BLUE$)  
    
    return
    