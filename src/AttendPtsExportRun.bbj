REM /**
REM  * AttendPtsExportRun.bbj
REM  * @author stevett
REM  *
REM  * Written: October 2015
REM  * 
REM  * Description: Generate an attendance export file based on incoming parms and e-mail current user.
REM  *
REM  */


use java.util.LinkedHashMap
use java.util.HashMap
use java.util.TreeMap

declare java.util.LinkedHashMap employeeRecordsMap!
declare java.util.HashMap employeeDataMap!
declare java.util.LinkedHashMap qualifiedEmployeeRecordsMap!
declare java.util.TreeMap sortedEmployeeRecordsMap!


enter fromMDYIn$, toMDYIn$, fromPtsIn, toPtsIn, orderByIn$


rem *- - - - - - - - - - CONSTANTS - - - - - - - - - -*

constants:


TRUE = 1
FALSE = 0

RGB_WHITE_ON_BLUE$= $033F$
SHOW_FIELD_TERMINATOR_PRESSED = FALSE


REM     Note about INPUTE:
REM     
REM     Any value less than 63 will cause the input function to exit setting the CTL value to the function value. 
REM     The "help" function causes an exit with CTL=-1.


F4_CUSTOM_INPUT_VALUE$ = $83$
F4_CTL_OUTPUT_VALUE$ = $04$

TAB_CUSTOM_INPUT_VALUE$ = $09$
TAB_CTL_OUTPUT_VALUE$ = $19$

BACKTAB_CUSTOM_INPUT_VALUE$ = $15$
BACKTAB_CTL_OUTPUT_VALUE$ = $1A$


rem *- - - - - - - - - - FUNCTIONS - - - - - - - - - -*

functions:


rem *- - - - - - - - - - MAIN ROUTINE - - - - - - - - - -*

main_routine:

    gosub init
    
    gosub run_export
    
    gosub display_data
    
    gosub handle_input


rem *- - - - - - - - - - EOJ - - - - - - - - - -*

eoj:

    exit


rem *- - - - - - - - - - SUBROUTINES - - - - - - - - - -*


    rem ------------------------------------------------------------------------------------------
    rem  One-time intialization
    rem ------------------------------------------------------------------------------------------

    
init:

        rem  The 'ET' (end type ahead control) below is VERY IMPORTANT when using SHIFT+TAB.  Without it, each
        rem  SHIFT+TAB would actually be treated as two inputs: SHIFT+TAB followed by TAB.

    print 'UC', 'CS', 'ET'
    
        rem Set color.  In the following, $03$ is the background (blue) and $3F$ is the foreground (white).
        rem The bits for that were: 0 0 1 1 1 1 1 1  (<-- foreground)   0 0 0 0 0 0 1 1  (<-- background)
        
    print 'RGB'(RGB_WHITE_ON_BLUE$)
    rem print 'RGB'($033C$);   rem blue background, yellow foreground
    rem print 'RGB'($0330$);   rem blue background, red foreground
    
    print 'CURSOR'("rep_block");   rem This only works in BBj -- not Pro/5


        rem For info on function key programming, see this article: http://www.basis.com/kb00025
        rem Also see Basis help: PRO/5 > User's Ref > Character Devices > Terminals > Function and Edit Keys
    
        rem Below is how the 'FL' (function keys) and 'EL' (edit keys) mnemonics are used to assign a key a value
        
        rem "2" - load only one key
        rem $01$ - means the F2 key (0-based)
        rem chr(1) - means the custom value of the function key is 1 byte long
        rem F2_CUSTOM_INPUT_VALUE$ - is the custom INPUT value of the key
        
    print 'FL', "2", $03$, chr(1), F4_CUSTOM_INPUT_VALUE$,
    print 'EL', "2", $3C$, chr(1), BACKTAB_CUSTOM_INPUT_VALUE$,    
    
    f4Pair$ = F4_CUSTOM_INPUT_VALUE$ + F4_CTL_OUTPUT_VALUE$
    tabPair$ = TAB_CUSTOM_INPUT_VALUE$ + TAB_CTL_OUTPUT_VALUE$
    backtabPair$ = BACKTAB_CUSTOM_INPUT_VALUE$ + BACKTAB_CTL_OUTPUT_VALUE$
    
    resultIgnored$ = stbl("!TERMS", f4Pair$ + tabPair$ + backtabPair$ + stbl("!TERMS"))
    resultIgnored$ = stbl("!EDIT", f4Pair$ + tabPair$ + backtabPair$ + stbl("!EDIT"))
    
    call "DateUtilities.bbj::convert_mmdddyy_to_20yymmdd", fromMDYIn$, yyyymmddFrom$
    call "DateUtilities.bbj::convert_mmdddyy_to_20yymmdd", toMDYIn$, yyyymmddTo$
    
    call "DateUtilities.bbj::get_yyyymmdd_with_hyphen_separators", yyyymmddFrom$, yyyymmddFromWithHyphens$
    call "DateUtilities.bbj::get_yyyymmdd_with_hyphen_separators", yyyymmddTo$, yyyymmddToWithHyphens$
    
    EXPORT_FILE_NAME$ = "/usr/tmpfiles/AttendPtsExport_" + yyyymmddFromWithHyphens$ + "_to_" + yyyymmddToWithHyphens$ + "_" + FID(0) + ".csv"
    OUTPUT_FILE_MIME_TYPE$ = "text/csv"
    
    MAIL_RECIPIENTS$ = "*user"
    
    call "ConfigVarsDAO.bbj::get_value", "adp.company.code", configVarFound, configVarDataType$, adpCompanyCode$

    return


    rem ------------------------------------------------------------------------------------------
    rem  Run the export process
    rem ------------------------------------------------------------------------------------------


run_export:

    call "TerminalUtilities.bbj::display_please_wait", "exporting"

    employeeRecordsMap! = new java.util.LinkedHashMap()

    
    REM  Step 1. Put employees who were active sometime during the pay period into employeeRecordsMap!

    call "WFMREmployeeDAO.bbj::get_active_operations_employees", yyyymmddFrom$, yyyymmddTo$, employeeRecordsMap!
    

    REM  Step 2. Append number of attendance points ("pts_total") to maps in employeeRecordsMap!
    
    call "AttendPtsDAO.bbj::add_pts_to_map", yyyymmddFrom$, yyyymmddTo$, employeeRecordsMap!

    
    REM  Step 3. Build qualifiedEmployeeRecordsMap! from employeeRecordsMap!

    qualifiedEmployeeRecordsMap! = new java.util.LinkedHashMap()
    
    iter! = employeeRecordsMap!.keySet().iterator()
    
    while iter!.hasNext()
    
      badgeKey! = iter!.next()
      employeeDataMap! = cast( java.util.HashMap, employeeRecordsMap!.get(badgeKey!) )
      
      ptsTotal = employeeDataMap!.get("pts_total")
      
      if ptsTotal >= fromPtsIn and ptsTotal <= toPtsIn then
            qualifiedEmployeeRecordsMap!.put(badgeKey!, employeeDataMap!)
      endif 
      
    wend
    
    
    REM  Step 4. Append employee number ("empno") -- for ADP# -- to qualifiedEmployeeRecordsMap!

    call "EmployeeMasterDAO.bbj::append_empno_to_map_of_maps", qualifiedEmployeeRecordsMap! 

    
    REM  Step 5. Build sortedEmployeeRecordsMap! from qualifiedEmployeeRecordsMap!

    sortedEmployeeRecordsMap! = new java.util.TreeMap()
         
    iter! = qualifiedEmployeeRecordsMap!.keySet().iterator()
    
    while iter!.hasNext()
    
      badgeKey! = iter!.next()
      employeeDataMap! = cast( java.util.HashMap, qualifiedEmployeeRecordsMap!.get(badgeKey!) )
      
      schedShifts = employeeDataMap!.get("sched_shifts")
      hasSchedShifts$ = iff(schedShifts > 0, "A", "B")

      lastName$ = employeeDataMap!.get("last_name")
      firstName$ = employeeDataMap!.get("first_name")
      
      sortKey! = badgeKey!
      
      if orderByIn$ = "1" then
        sortKey! = hasSchedShifts$ + lastName$ + firstName$ + badgeKey!
      endif
      
      if orderByIn$ = "2" then
        sortKey! = lastName$ + firstName$ + badgeKey!
      endif
      
      sortedEmployeeRecordsMap!.put(sortKey!, employeeDataMap!)
      
    wend

    numberOfRecordsExported = sortedEmployeeRecordsMap!.size()
         
    
    REM  Step 6. Create file to send as e-mail attachment

    if numberOfRecordsExported > 0 then
    
        erase EXPORT_FILE_NAME$, err=*next
        string EXPORT_FILE_NAME$

        exportFileChannel = unt
        open (exportFileChannel) EXPORT_FILE_NAME$
        
        print(exportFileChannel) "Has Sched Shift,Badge#,ADP#,WFMR Employee ID,Last Name,First Name,Attend Pts,Hrs Worked,Sched Shifts"
        
        iter! = sortedEmployeeRecordsMap!.keySet().iterator()
        
        while iter!.hasNext()
        
            sortKey! = iter!.next()
            employeeDataMap! = cast( java.util.HashMap, sortedEmployeeRecordsMap!.get(sortKey!) )
       
            schedShifts = employeeDataMap!.get("sched_shifts")
            hasSchedShifts$ = iff(schedShifts > 0, "Y", "N")
            badge$ = employeeDataMap!.get("badge_number")
            empNo$ = employeeDataMap!.get("empno")
            positionID$ = adpCompanyCode$ + pad(empno$, 6, "R", "0")
            employeeId = employeeDataMap!.get("employee_id")
            lastName$ = employeeDataMap!.get("last_name")
            firstName$ = employeeDataMap!.get("first_name")
            attendPts = employeeDataMap!.get("pts_total")
            hrsWorked = employeeDataMap!.get("hrs_worked")

            call "StringUtilities.bbj::replace_all_in_string", lastName$, ",", " ", lastNameWithoutCommas$ 
            call "StringUtilities.bbj::replace_all_in_string", firstName$, ",", " ", firstNameWithoutCommas$ 

            print(exportFileChannel) hasSchedShifts$, ",", badge$, ",", positionID$, ",", employeeId, ",", lastNameWithoutCommas$, ",", firstNameWithoutCommas$, ",", attendPts, ",", hrsWorked, ",", schedShifts    
        wend

        close (exportFileChannel)

    endif
    
    
    REM  Step 7. Send e-mail

    if numberOfRecordsExported > 0 THEN 
        wait 2
        subject$ = "Attendance Export File is attached (" + str(numberOfRecordsExported) + " records)" 
        body$ = "The attached file is for date range " + yyyymmddFromWithHyphens$ + " to " + yyyymmddToWithHyphens$ + " and pts range " + str(fromPtsIn) + " to " + str(toPtsIn) + "."  
        call "MailUtilities.bbj::send_email_msg_with_attachment", MAIL_RECIPIENTS$, subject$, body$, EXPORT_FILE_NAME$, OUTPUT_FILE_MIME_TYPE$, mailReturnCode
    else
        subject$ = "Attendance Export File is NOT attached (" + str(numberOfRecordsExported) + " records)" 
        body$ = "No records qualified for date range " + yyyymmddFromWithHyphens$ + " to " + yyyymmddToWithHyphens$ + " and pts range " + str(fromPtsIn) + " to " + str(toPtsIn) + "."  
        call "MailUtilities.bbj::send_simple_email_msg", MAIL_RECIPIENTS$, subject$, body$, mailReturnCode
    endif
    

    return


    rem ------------------------------------------------------------------------------------------
    rem  Display the screen headings
    rem ------------------------------------------------------------------------------------------


display_screen_headings:

    call "TerminalUtilities.bbj::display_screen_headings", pgm(-2), "ATTENDANCE POINTS EXPORT" 

    return

    
    rem ------------------------------------------------------------------------------------------
    rem  Display data on page, besides page headings
    rem ------------------------------------------------------------------------------------------

    
display_data:

    print @(0,0), 'CE', 'UC'
    
    gosub display_screen_headings
    
    call "DateUtilities.bbj::get_mdy_with_slashes_added", fromMDYIn$, fmtFromDate$
    call "DateUtilities.bbj::get_mdy_with_slashes_added", toMDYIn$, fmtToDate$
    
    print @(20,3), "Date range: ", fmtFromDate$, " - ", fmtToDate$
    print @(20,5), "Points range: ", str(fromPtsIn:"##.0"), " - ", str(toPtsIn:"##.0")
    print @(20,7), "Records exported: ", numberOfRecordsExported     
    
    print @(20,10), "Export file was e-mailed to you." 

    
    actionLabel$ = "F4=Exit   "
    
    print @(2,21), actionLabel$ 
    
    if SHOW_FIELD_TERMINATOR_PRESSED then print @(5,22), 'CL', "Field terminator (savedCTL): ", savedCTL

    return

    
    rem ------------------------------------------------------------------------------------------
    rem  Handle input, which will be F4 or Enter
    rem ------------------------------------------------------------------------------------------

    
handle_input:

    inpute 0, 21, 1, "", ignoreInput$
    
    return
