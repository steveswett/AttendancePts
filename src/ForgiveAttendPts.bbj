REM /**
REM  * ForgiveAttendPts.bbj
REM  * @author stevett
REM  *
REM  * Written: August 2015
REM  * 
REM  * Description: Inactivate attendance point records, whether using old or new policy.
REM  *
REM  *
REM  *  This program originated from the ATND20 BBx program.
REM  * 
REM  *  Old policy: Inactivates a certain number of points (1?) after 30 days of perfect attendance.
REM  * 
REM  *  New policy: Inactivates points older than 12 months.
REM  *   
REM  */


REM ATND20 - ATTENDANCE REPORT FOR HR
REM ORG 07/11 TCH
REM REV 08/15 SMS

REM REVISIONS
REM 07/11...SHOW RECORDS WE WOULD INACTIVATE
REM 02/12...CHANGE TRANSACTIONS TO INACTIVE (6250)
REM 08/15...CREATED ForgiveAttendPts based on ATND20

use java.util.Vector

declare java.util.Vector inactivatedPtsRecordsList!


BEGIN


SETERR handle_error


rem *- - - - - - - - - - CONSTANTS - - - - - - - - - -*

constants:

TRUE = 1
FALSE = 0

OUTPUT_FILE_MIME_TYPE$ = "text/csv"


rem *- - - - - - - - - - FUNCTIONS - - - - - - - - - -*

functions:

    DEF FNQ$(X$)="20"+X$(7,2)+X$(1,2)+X$(4,2)


rem *- - - - - - - - - - MAIN ROUTINE - - - - - - - - - -*

main_routine:


    print "Started at ", date(0:"%Y/%Mz/%Dz %hz:%mz:%sz%p")

    gosub common_init
    
    if trimmedAttendPolicyCode$ = "2015 Aug Before" or forgivePtsOldWayDuringTransition then
        gosub old_policy_init
        gosub old_policy_open_files
        gosub old_policy_process_employees
        emailAttachmentFileName$ = oldPolicyOutputFileName$
        isNewPolicyRun = FALSE
        gosub common_send_results_email
    endif
    
    if trimmedAttendPolicyCode$ = "2015 Aug After" then
        gosub new_policy_process_employees
        emailAttachmentFileName$ = newPolicyOutputFileName$
        isNewPolicyRun = TRUE
        gosub common_send_results_email
    endif

    
    GOTO eoj
    
    handle_error:
    print "err = ", err
    print "errmes(-1) = ", errmes(-1)
    
    CALL "LOGERR",P$,ERR,TCB(5)
    
    
    eoj:
    
    if trimmedAttendPolicyCode$ = "2015 Aug Before" or forgivePtsOldWayDuringTransition then
        gosub old_policy_close_files
    endif
    
    print "mailReturnCode = ", mailReturnCode
    print "Finished at ", date(0:"%Y/%Mz/%Dz %hz:%mz:%sz%p")
    
    RELEASE
    END


rem *- - - - - - - - - - SUBROUTINES - - - - - - - - - -*

subroutines:


    rem ------------------------------------------------------------------------------------------
    rem  Init routine used by both policies
    rem ------------------------------------------------------------------------------------------


common_init:

    call "ConfigVarsDAO.bbj::get_value", "mail.recipients.forgive.attend.pts", configVarFound, configVarDataType$, mailRecipients$

    call "ConfigVarsDAO.bbj::get_value", "forgive.attend.pts.old.way.through", configVarFound, configVarDataType$, forgivePtsOldWayThroughYYYYMMDD$
    
    call "DateUtilities.bbj::get_current_yyyymmdd", currentYMD$
    
    forgivePtsOldWayDuringTransition = currentYMD$ <= forgivePtsOldWayThroughYYYYMMDD$ 

    call "ConfigVarsDAO.bbj::get_value", "current.attend.pts.policy.code", configVarFound, configVarDataType$, attendPtsPolicyCode$
    trimmedAttendPolicyCode$ = cvs(attendPtsPolicyCode$, 2)

    call "ConfigVarsDAO.bbj::get_value", "is.windows.environment", configVarFound, configVarDataType$, isWindowsEnv$
    isWindowsEnv = num(isWindowsEnv$)

    if !(isWindowsEnv) then
        LET S=SCALL("cp /usr/notfil/ATND /usr/old 2>/dev/null")
    endif
    
    call "TerminalUtilities.bbj::get_unqualified_program_name", pgm(-2), P$

    REM  Erase and re-create output files 

    LET newPolicyOutputFileName$="/usr/tmpfiles/"+P$+"-"+FID(0)+"-newpol.csv"
    
    print "Output file name: ", newPolicyOutputFileName$

    ERASE newPolicyOutputFileName$,ERR=newpol_erase_error
    print "erased OK"
    goto newpol_erased_ok
    newpol_erase_error:
    print "Erase err, errmes(-1): ", err, ", ", errmes(-1) 
    newpol_erased_ok:
    
    wait 2
    STRING newPolicyOutputFileName$,ERR=newpol_create_error
    print "created OK"
    goto newpol_created_ok
    newpol_create_error:
    print "Create err, errmes(-1): ", err, ", ", errmes(-1) 
    newpol_created_ok:
    
    mailReturnCode = 0

    return


    rem ------------------------------------------------------------------------------------------
    rem  old_policy_initialize
    rem ------------------------------------------------------------------------------------------


old_policy_init:

    LET oldPolicyOutputFileName$="/usr/tmpfiles/"+P$+"-"+FID(0)+"-oldpol.csv"
    ERASE oldPolicyOutputFileName$,ERR=*next
    wait 2
    STRING oldPolicyOutputFileName$


    LET TODY$=FNQ$(DAY)
    LET X$=DAY
    LET M$=X$(1,2)
    CALL "DAYPOM",X$,1
    
    REM IF TODAY IS THE LAST DAY OF THE MONTH, SET THE LASTD FLAG TO 1
    
    IF X$(1,2)<>M$ THEN LET LASTD=1
          
    return
    

    rem ------------------------------------------------------------------------------------------
    rem  Open files
    rem ------------------------------------------------------------------------------------------


old_policy_open_files:

    REM  Currently not using employTemplate$ -- but using OPEN90 to get a reliable channel

    call "OPEN90", employChannel, "EMPLOY", employTemplate$
    call "OPEN90", atndChannel, "ATND", atndTemplate$

    dim atndRecord$ : atndTemplate$
    
    oldPolicyOutputFileChannel = unt
    OPEN (oldPolicyOutputFileChannel)oldPolicyOutputFileName$

    return
    

    rem ------------------------------------------------------------------------------------------
    rem  Process all employees
    rem ------------------------------------------------------------------------------------------


old_policy_process_employees:

    PRINT (oldPolicyOutputFileChannel)"employee,name,total points,total entries,last point date,"
    
    REM  Loop through all employees
    
    read_another_employ_record:

    READ (employChannel,END=eof_on_employ_file)K$,NM$,AD1$,CSZ$,BDATE$,EDATE$,JD$,*,*,*,*,*,*,*,*,*,*,WI$,CL$,ADP$,PH$,TDATE$,COMNT$,AD2$,LV$

    IF CVS(TDATE$,3)>"" THEN GOTO read_another_employ_record
    
    REM ONLY MICHIGAN  (interesting tidbit)
    
    IF CSZ$(17,2)<>"MI" THEN GOTO read_another_employ_record

    GOSUB sr_read_attend_transactions_for_employee
    
    IF OK$<>"OK" THEN GOTO read_another_employ_record
    
    READ (atndChannel,KEY="0"+K$,ERR=*next)
    
    LET XX$="",ZX$="",TP=0,CNTR=0
    
    read_attend_pts_record_main:
    
    rem READ (atndChannel,ERR=finished_reading_pts_for_employee_main)EM$,DT$,PTS,CD$,STATUS$,COMNT$,ACDT$,WH$,XLV$
    read record(atndChannel,ERR=finished_reading_pts_for_employee_main) atndRecord$
    
    REM  Normally, I'd use "atndRecord.field_name" throughout the code, but to avoid any search/replace problems, I use the 
    REM  original variables except for actual read/write I/O -- for which the string template is used.
    
    EM$ = atndRecord.BADG$
    DT$ = atndRecord.PTDT$
    PTS = atndRecord.PTS
    CD$ = atndRecord.CD$
    STATUS$ = atndRecord.STAT$
    COMNT$ = atndRecord.TEXT$
    ACDT$ = atndRecord.ADDDT$ + atndRecord.CHGDT$
    WH$ = atndRecord.ADDBY$ + atndRecord.CHGBY$
    XLV$ = atndRecord.LVAR$
    workFileID = atndRecord.WORK_FILE_ID
    
    IF EM$<>"0"+K$ THEN GOTO finished_reading_pts_for_employee_main
    
    IF STATUS$<>"A" THEN GOTO read_attend_pts_record_main
    
    REM XX$ HAS NEWEST DATES FIRST; ZX$ WILL BE SORTED BY POINTS AND DATES FIRST

    XX$ = DT$ + XX$
    TP = TP + PTS
    CNTR = CNTR + 1
    
    REM  Each ZX$ "element" is: 3-long points / 8-long date / 20-long work file ID (total = 31 chars)
    ZX$ = ZX$ + STR(9-PTS:"0.0") + DT$ + str(workFileID:"00000000000000000000")
    ZX_ELEMENT_LENGTH = 31

    GOTO read_attend_pts_record_main
    
    finished_reading_pts_for_employee_main:
    
    REM ANYTHING?
    
    IF XX$="" THEN GOTO read_another_employ_record
    
    LET X$=XX$(5,2)+"/"+XX$(7,2)+"/"+XX$(3,2)
    
    REM Replace commas in name with blanks
    CALL "_repl.utl", STR$, ",", ""
    
    LET R$=K$+","+NM$+","+STR(TP)+","+STR(CNTR)+","+X$+","
    PRINT (oldPolicyOutputFileChannel)R$
    LET workFileLines=workFileLines+1
    LET RC=0,XT=0
    
    CALL "BINSRT",ZX$,ZX_ELEMENT_LENGTH
    
    try_next_zx_entry:
    
    REM PRINT TRANSACTIONS THAT WE'D REMOVE
    
    IF ZX$="" THEN GOTO finished_with_this_employee

    XEM$ = "0" + K$
    XD$ = ZX$(4,8)
    tmpWorkFileId = num(ZX$(12,20))
    
    ZX$ = ZX$(ZX_ELEMENT_LENGTH + 1)
    RC = RC + 1
    
    rem FIND (atndChannel,KEY=XEM$+XD$)*,*,PTS,CD$,STATUS$,COMNT$,ACDT$,WH$,XLV$
    find record (atndChannel,KEY=XEM$ + XD$ + str(tmpWorkFileId)) atndRecord$

    REM  Normally, I'd use "atndRecord.field_name" throughout the code, but to avoid any search/replace problems, I use the 
    REM  original variables except for actual read/write I/O -- for which the string template is used.
    
    PTS = atndRecord.PTS
    CD$ = atndRecord.CD$
    STATUS$ = atndRecord.STAT$
    COMNT$ = atndRecord.TEXT$
    ACDT$ = atndRecord.ADDDT$ + atndRecord.CHGDT$
    WH$ = atndRecord.ADDBY$ + atndRecord.CHGBY$
    XLV$ = atndRecord.LVAR$
    
    LET GT1FL=0

    REM IF THIS TRANSACTION HAS MORE POINTS THAN WE HAVE LEFT TO INACTIVATE, DO A PARTIAL TRANSACTION
    
    IF XT<1 and PTS>(1-XT) THEN
        LET PTS=1-XT
        LET GT1FL=PTS
    endif

    IF PTS+XT>1 THEN GOTO try_next_zx_entry

    PRINT (oldPolicyOutputFileChannel)",inactivated,"+STR(PTS)+",,"+XD$(5,2)+"/"+XD$(7,2)+"/"+XD$(3,2)+","
    
    REM JUST REMOVED THIS MANY POINTS
    LET JR=PTS
    
    REM INACTIVATE THIS ONE
    GOSUB sr_inactivate_this_record

    IF PTS=0 THEN GOTO finished_with_this_employee

    LET XT=XT+JR
    
    IF XT<1 THEN GOTO try_next_zx_entry
    
    finished_with_this_employee:
    
    PRINT (oldPolicyOutputFileChannel)""
    GOTO read_another_employ_record
    
    eof_on_employ_file:

    return
    

    rem ------------------------------------------------------------------------------------------
    rem  READ THROUGH ATTENDANCE TRANSACTIONS FOR THIS EMPLOYEE
    rem ------------------------------------------------------------------------------------------
    

sr_read_attend_transactions_for_employee:

    LET OK$="",LD$="",AC=0

    rem READ (atndChannel,KEY="0"+K$,ERR=*next)
    read record (atndChannel,KEY="0"+K$,ERR=*next) atndRecord$
    
    read_another_attend_pts_record:
    
    rem READ (atndChannel,ERR=finished_reading_pts_for_employee)EM$,DT$,PTS,CD$,STATUS$,COMNT$,ACDT$,WH$,XLV$
    read record (atndChannel,ERR=finished_reading_pts_for_employee) atndRecord$
    
    REM  Normally, I'd use "atndRecord.field_name" throughout the code, but to avoid any search/replace problems, I use the 
    REM  original variables except for actual read/write I/O -- for which the string template is used.
    
    EM$ = atndRecord.BADG$
    DT$ = atndRecord.PTDT$
    PTS = atndRecord.PTS
    CD$ = atndRecord.CD$
    STATUS$ = atndRecord.STAT$
    COMNT$ = atndRecord.TEXT$
    ACDT$ = atndRecord.ADDDT$ + atndRecord.CHGDT$
    WH$ = atndRecord.ADDBY$ + atndRecord.CHGBY$
    XLV$ = atndRecord.LVAR$

    IF EM$<>"0"+K$ THEN GOTO finished_reading_pts_for_employee


    LET LD$=DT$

    IF STATUS$="A" THEN LET AC=AC+1

    GOTO read_another_attend_pts_record
    
    finished_reading_pts_for_employee:

    IF AC=0 OR LD$="" THEN GOTO done_reading_attend_trans

    IF LD$(1,6)=TODY$(1,6) THEN GOTO done_reading_attend_trans



    IF LD$(7,2)=TODY$(7,2) THEN LET OK$="OK"
    REM TIME TO PRINT

    REM IF THE DAY NUMBER OF THEIR INFRACTION IS GREATER THAN THE LAST OF THIS MONTH, THEN PRETEND IT'S TODAY AND PRINT IT ANYWAY
    IF LD$(7,2)>TODY$(7,2) and LASTD=1 THEN LET OK$="OK"

    done_reading_attend_trans:
    
    RETURN


    rem ------------------------------------------------------------------------------------------
    rem  INACTIVATE THIS ONE
    rem ------------------------------------------------------------------------------------------


sr_inactivate_this_record:

    rem EXTRACT (atndChannel,KEY=XEM$+XD$)XEM$,XD$,PTS,CD$,STATUS$,COMNT$,ACDT$,WH$,XLV$
    extract record (atndChannel,KEY=XEM$ + XD$ + str(tmpWorkFileId)) atndRecord$

    REM  Normally, I'd use "atndRecord.field_name" throughout the code, but to avoid any search/replace problems, I use the 
    REM  original variables except for actual read/write I/O -- for which the string template is used.
    
    XEM$ = atndRecord.BADG$
    XD$ = atndRecord.PTDT$
    PTS = atndRecord.PTS
    CD$ = atndRecord.CD$
    STATUS$ = atndRecord.STAT$
    COMNT$ = atndRecord.TEXT$
    ACDT$ = atndRecord.ADDDT$ + atndRecord.CHGDT$
    WH$ = atndRecord.ADDBY$ + atndRecord.CHGBY$
    XLV$ = atndRecord.LVAR$
    
    LET STATUS$="I"

    IF GT1FL>0 THEN LET STATUS$="A"
    
    IF LEN(COMNT$)<150 THEN COMNT$ = pad(COMNT$, 150, "L", " ")
    
    IF LEN(ACDT$)<16 THEN ACDT$ = pad(ACDT$, 16, "L", " ")
    
    IF LEN(WH$)<20 THEN WH$ = pad(WH$, 20, "L", " ")
    
    LET X$="PT REMOVED "+DAY
    
    IF PTS=0 THEN LET X$="ZERO "+X$

    IF GT1FL>0 THEN
        LET X$=STR(GT1FL)+" "+X$
        GOTO bypass_pts_less_than_1_check
    endif

    IF PTS<1 THEN LET X$=STR(PTS)+" "+X$
    
    bypass_pts_less_than_1_check:
    
    IF LEN(X$)<50 THEN X$ = pad(X$, 50, "L", " ")
    
    IF CVS(COMNT$(1,50),3)="" THEN
        LET COMNT$(1,50)=X$
        GOTO update_attend_pts_record
    endif

    IF CVS(COMNT$(51,50),3)="" THEN
        LET COMNT$(51,50)=X$
        GOTO update_attend_pts_record
    endif

    IF CVS(COMNT$(101,50),3)="" THEN
        LET COMNT$(101,50)=X$
        GOTO update_attend_pts_record
    endif

    REM ALL 3 COMMENT FIELDS HAVE SOMETHING IN THEM
    
    GOSUB sr_append_to_comment_field

    update_attend_pts_record:
    
    LET COMNT$=CVS(COMNT$,3),ACDT$(9,8)=DAY,WH$(11,10)="cpu       "
    LET PTS=PTS-GT1FL
    
    REM  Normally, I'd use "atndRecord.field_name" throughout the code, but to avoid any search/replace problems, I use the 
    REM  original variables except for actual read/write I/O -- for which the string template is used.
    
    atndRecord.BADG$ = XEM$
    atndRecord.PTDT$ = XD$
    atndRecord.PTS = PTS
    atndRecord.CD$ = CD$
    atndRecord.STAT$ = STATUS$
    atndRecord.TEXT$ = COMNT$
    atndRecord.ADDDT$ = ACDT$(1,8)
    atndRecord.CHGDT$ = ACDT$(9)
    atndRecord.ADDBY$  = WH$(1,10)
    atndRecord.CHGBY$ = WH$(11)
    atndRecord.LVAR$ = XLV$
    
    rem WRITE (atndChannel)XEM$,XD$,PTS,CD$,STATUS$,COMNT$,ACDT$,WH$,XLV$
    
    atndRecord$ = FIELD(atndRecord$)
    
    REM  TODO: May have to add default values for the 4 new fields: work_file_id, wfmr_exc_def_in, wfmr_reason_id, disp_cd
    
    write record (atndChannel) atndRecord$
    
    RETURN


    rem ------------------------------------------------------------------------------------------
    rem  TRY TO APPEND TO A COMMENT FIELD
    rem ------------------------------------------------------------------------------------------


sr_append_to_comment_field:

    LET Y$=CVS(COMNT$(1,50),3)+", "+CVS(X$,3)
    
    IF LEN(Y$)<=50 THEN
        LET SX=1
        GOTO use_comment_portion
    endif

    LET Y$=CVS(COMNT$(51,50),3)+", "+CVS(X$,3)
    
    IF LEN(Y$)<=50 THEN
        LET SX=51
        GOTO use_comment_portion
    endif

    LET Y$=CVS(COMNT$(101,50),3)+", "+CVS(X$,3)
    
    IF LEN(Y$)<=50 THEN
        LET SX=101
        GOTO use_comment_portion
    endif
    
    REM WON'T FIT IN ANY COMMENT FIELD...SKIP IT
    
    GOTO done_append_to_comment
    
    use_comment_portion:
    
    IF LEN(Y$)<50 THEN Y$ = pad(Y$, 50, "L", " ")
    
    LET COMNT$(SX,50)=Y$
    
    done_append_to_comment:
    
    RETURN


    rem ------------------------------------------------------------------------------------------
    rem  Old policy: Close files
    rem ------------------------------------------------------------------------------------------


old_policy_close_files:

    CLOSE (employChannel)
    CLOSE (atndChannel)
    CLOSE (oldPolicyOutputFileChannel)

    return
    

    rem ------------------------------------------------------------------------------------------
    rem  Send an e-mail of results (either a file or a message there isn't one)
    rem ------------------------------------------------------------------------------------------


common_send_results_email:

    IF workFileLines < 1 THEN 
        subject$ = "No Attendance Points file today " + iff(isNewPolicyRun, "(new policy)", "(old policy)")
        body$ = "No Attendance Points file today - nothing to report."
        call "MailUtilities.bbj::send_simple_email_msg", mailRecipients$, subject$, body$, mailReturnCode
    ELSE
        WAIT 2
        subject$ = "Attendance Points file " + iff(isNewPolicyRun, "(new policy)", "(old policy)")
        body$ = "The attached file contains a list of employees and inactivated attendance points."
        call "MailUtilities.bbj::send_email_msg_with_attachment", mailRecipients$, subject$, body$, emailAttachmentFileName$, OUTPUT_FILE_MIME_TYPE$, mailReturnCode
    endif

    return
    

    rem ------------------------------------------------------------------------------------------
    rem  New policy: process employees
    rem ------------------------------------------------------------------------------------------
    
    
new_policy_process_employees:

    inactivatedPtsRecordsList! = new java.util.Vector()
    
    doActualUpdate = TRUE
    call "AttendPtsDAO.bbj::inactivate_pts_older_than_12_months", doActualUpdate, inactivatedPtsRecordsList!
    
    workFileLines = inactivatedPtsRecordsList!.size()
    
    if workFileLines > 0 then

        newPolicyOutputFileChannel = unt
        open (newPolicyOutputFileChannel) newPolicyOutputFileName$
        
        print(newPolicyOutputFileChannel) "Employee,Name,Pts Date,Pts Inactivated"
        
        for x = 0 to workFileLines - 1
            print(newPolicyOutputFileChannel) inactivatedPtsRecordsList!.get(x)
        next x

        close (newPolicyOutputFileChannel)

    endif
    

    return