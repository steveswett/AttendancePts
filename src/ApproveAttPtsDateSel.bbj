REM /**
REM  * ApproveAttendPts02.bbj
REM  * @author stevett
REM  *
REM  */


use java.util.LinkedHashMap

declare java.util.LinkedHashMap datesMap!


enter shiftIn$, deptIdIn, deptNameIn$


rem *- - - - - - - - - - CONSTANTS - - - - - - - - - -*

constants:


TRUE = 1
FALSE = 0

call "TerminalUtilities.bbj::get_unqualified_program_name", PROGRAM_NAME$

TERMINAL_ID$ = fid(0)

RECORDS_PER_PAGE = 12
COLUMNS_PER_PAGE = 1
RECORDS_PER_COLUMN = 12
START_ROW_FOR_LIST = 8
END_ROW_FOR_LIST = START_ROW_FOR_LIST + RECORDS_PER_COLUMN - 1 
SHOW_FIELD_TERMINATOR_PRESSED = FALSE

SHIFT_FIELD_NO = 1
DEPT_FIELD_NO = 2


REM     Note about INPUTE:
REM     
REM     Any value less than 63 will cause the input function to exit setting the CTL value to the function value. 
REM     The "help" function causes an exit with CTL=-1.


F2_CUSTOM_INPUT_VALUE$ = $81$
F2_CTL_OUTPUT_VALUE$ = $02$

F4_CUSTOM_INPUT_VALUE$ = $82$
F4_CTL_OUTPUT_VALUE$ = $04$

F6_CUSTOM_INPUT_VALUE$ = $83$
F6_CTL_OUTPUT_VALUE$ = $06$

TAB_CUSTOM_INPUT_VALUE$ = $09$
TAB_CTL_OUTPUT_VALUE$ = $19$

BACKTAB_CUSTOM_INPUT_VALUE$ = $3C$
BACKTAB_CTL_OUTPUT_VALUE$ = $1A$

PAGE_UP_CUSTOM_INPUT_VALUE$ = $84$
PAGE_UP_CTL_OUTPUT_VALUE$ = $1B$

PAGE_DOWN_CUSTOM_INPUT_VALUE$ = $85$
PAGE_DOWN_CTL_OUTPUT_VALUE$ = $1C$


rem *- - - - - - - - - - FUNCTIONS - - - - - - - - - -*

functions:


def fnHasRecordsBefore%(aDoIt)

    return topLeftMapIndex > 1

fnend


def fnHasRecordsAfter%(aDoIt)

    return topLeftMapIndex + RECORDS_PER_PAGE - 1 < datesMapSize

fnend


rem *- - - - - - - - - - MAIN ROUTINE - - - - - - - - - -*

main_routine:

    gosub init
    
    gosub display_screen_headings
    
    gosub display_data
    
    input @(0,22), 'CL', "Hit Enter to continue", ignoreInput$
    
    rem gosub handle_input


rem *- - - - - - - - - - EOJ - - - - - - - - - -*

eoj:

    exit


rem *- - - - - - - - - - SUBROUTINES - - - - - - - - - -*


    rem ------------------------------------------------------------------------------------------
    rem  One-time intialization
    rem ------------------------------------------------------------------------------------------

    
init:

        rem  The 'ET' (end type ahead control) below is VERY IMPORTANT when using SHIFT+TAB.  Without it, each
        rem  SHIFT+TAB would actually be treated as two inputs: SHIFT+TAB followed by TAB.

    print 'UC', 'CS', 'ET'
    
        rem Set color.  In the following, $03$ is the background (blue) and $3F$ is the foreground (white).
        rem The bits for that were: 0 0 1 1 1 1 1 1  (<-- foreground)   0 0 0 0 0 0 1 1  (<-- background)
        
    print 'RGB'($033F$);   rem blue background, white foreground
    rem print 'RGB'($033C$);   rem blue background, yellow foreground
    rem print 'RGB'($0330$);   rem blue background, red foreground
    
    print 'CURSOR'("rep_block");   rem This only works in BBj -- not Pro/5


        rem For info on function key programming, see this article: http://www.basis.com/kb00025
        rem Also see Basis help: PRO/5 > User's Ref > Character Devices > Terminals > Function and Edit Keys
    
        rem Below is how the 'FL' (function keys) and 'EL' (edit keys) mnemonics are used to assign a key a value
        
        rem "2" - load only one key
        rem $01$ - means the F2 key (0-based)
        rem chr(1) - means the custom value of the function key is 1 byte long
        rem F2_CUSTOM_INPUT_VALUE$ - is the custom INPUT value of the key
        
    print 'FL', "2", $01$, chr(1), F2_CUSTOM_INPUT_VALUE$,
    print 'FL', "2", $03$, chr(1), F4_CUSTOM_INPUT_VALUE$,
    print 'FL', "2", $05$, chr(1), F6_CUSTOM_INPUT_VALUE$,
    print 'EL', "2", $3C$, chr(1), BACKTAB_CUSTOM_INPUT_VALUE$,    
    print 'EL', "2", $06$, chr(1), PAGE_UP_CUSTOM_INPUT_VALUE$,
    print 'EL', "2", $07$, chr(1), PAGE_DOWN_CUSTOM_INPUT_VALUE$,
    
    f2Pair$ = F2_CUSTOM_INPUT_VALUE$ + F2_CTL_OUTPUT_VALUE$
    f4Pair$ = F4_CUSTOM_INPUT_VALUE$ + F4_CTL_OUTPUT_VALUE$
    f6Pair$ = F6_CUSTOM_INPUT_VALUE$ + F6_CTL_OUTPUT_VALUE$
    pageupPair$ = PAGE_UP_CUSTOM_INPUT_VALUE$ + PAGE_UP_CTL_OUTPUT_VALUE$
    pagedownPair$ = PAGE_DOWN_CUSTOM_INPUT_VALUE$ + PAGE_DOWN_CTL_OUTPUT_VALUE$
    tabPair$ = TAB_CUSTOM_INPUT_VALUE$ + TAB_CTL_OUTPUT_VALUE$
    backtabPair$ = BACKTAB_CUSTOM_INPUT_VALUE$ + BACKTAB_CTL_OUTPUT_VALUE$
    
    resultIgnored$ = stbl("!TERMS", f2Pair$ + f4Pair$ + f6Pair$ + pageupPair$ + pagedownPair$ + tabPair$ + backtabPair$ + stbl("!TERMS"))
    resultIgnored$ = stbl("!EDIT", f2Pair$ + f4Pair$ + f6Pair$ + pageupPair$ + pagedownPair$ + tabPair$ + backtabPair$ + stbl("!EDIT"))
    
    datesMap! = new java.util.LinkedHashMap()
    call "AttendPtsWorkDAO.bbj::get_dates_with_totals", shiftIn$, deptIdIn, datesMap!
    
    topLeftMapIndex = 1
    datesMapSize = datesMap!.size()
    
    return


    rem ------------------------------------------------------------------------------------------
    rem  Display the screen headings
    rem ------------------------------------------------------------------------------------------


display_screen_headings:

    call "TerminalUtilities.bbj::get_current_time", formattedCurrentTime$
    
    print @(0,0), pad(day, 20, "L", " ")
    print @(20,0), pad("NOTIONS MARKETING", 50, "L", " ")
    print @(70,0), pad(TERMINAL_ID$, 10, "R", " ")
    
    print 'BU'
    print @(0,1), pad(formattedCurrentTime$, 20, "L", " ")
    print @(20,1), pad("SUPERVISOR APPROVAL OF POINTS", 35, "L", " ")
    print @(55,1), pad("ApproveAttPts.02", 25, "R", " ")
    print 'EU' 

    return

    
    rem ------------------------------------------------------------------------------------------
    rem  Display data on page, besides page headings
    rem ------------------------------------------------------------------------------------------

    
display_data:

    print @(0,0), 'CE', 'UC'
    
    gosub display_screen_headings
    
    print @(0,3), "Shift: ", shiftIn$
    print @(20,3), "Dept: ", deptNameIn$
    
    print @(34,5), "NOT"
    print @(63, 5), "FLMA    NOT"
    
    print @(0,6), """X"""
    print @(6,6), "DATE"
    print @(18,6), "TOTAL  POSTED   POSTED  APPROVED   EDITED   PENDING  HANDLED"
    
    count = 0
    displayedCount = 0

    iter! = datesMap!.keySet().iterator()
    
    while iter!.hasNext()
    
      dateKey! = iter!.next()
      count = count + 1
      
      if count < topLeftMapIndex then continue
      if count > topLeftMapIndex + RECORDS_PER_PAGE - 1 then break
      
      displayedCount = displayedCount + 1
      qtyTotal = datesMap!.get(dateKey!)

      row = START_ROW_FOR_LIST + displayedCount - 1
      
      print @(1, row), 'BU', " ", 'EU'
      print @(4, row), dateKey!
      print @(18,row), qtyTotal 
      
    wend

    
    canPageUp = fnHasRecordsBefore%(TRUE)
    canPageDown = fnHasRecordsAfter%(TRUE)
    
    actionLabel$ = "F4=Exit   "
    
    if canPageUp then actionLabel$ = actionLabel$ + "Page Up=Prev Page   " 
    if canPageDown then actionLabel$ = actionLabel$ + "Page Down=Next Page   "
    
    actionLabel$ = actionLabel$ + "Enter=Select"
    
    print @(0,21), actionLabel$ 
    
    if SHOW_FIELD_TERMINATOR_PRESSED then print @(5,22), 'CL', "Field terminator (savedCTL): ", savedCTL

    return

    
    rem ------------------------------------------------------------------------------------------
    rem  Handle input, which will be F4 or Page Up or Page Down
    rem ------------------------------------------------------------------------------------------

    
handle_input:

    currentFieldNo = SHIFT_FIELD_NO

    while TRUE
        
        if currentFieldNo = SHIFT_FIELD_NO then
            print @(7, 3), 'BU'
            inpute 7, 3, 1, "", shift$
            print @(8, 3), 'EU'
        endif 
        
        if currentFieldNo = DEPT_FIELD_NO then
            print @(26, 3), 'BU'
            inpute 26, 3, 2, "", dept$ 
            print @(28, 3), 'EU' 
        endif
            
        gosub clear_err_msg

        savedCTL = CTL
        isTabbing = FALSE
        needToBreak = FALSE
        
        switch savedCTL
        
            case ASC(F4_CTL_OUTPUT_VALUE$)
                    needToBreak = TRUE
        
                    break
        
            case ASC(PAGE_UP_CTL_OUTPUT_VALUE$)
                    if canPageUp then
                        gosub get_top_left_map_index_for_page_up
                    endif
        
                    break
                    
            case ASC(PAGE_DOWN_CTL_OUTPUT_VALUE$)
                    if canPageDown then
                        gosub get_top_left_map_index_for_page_down
                    endif
                    
                    break
                    
            case ASC(TAB_CTL_OUTPUT_VALUE$)
                    isTabbing = TRUE
                    gosub get_field_no_after_tabbing
                    
                    break
                    
            case ASC(BACKTAB_CTL_OUTPUT_VALUE$)
                    isTabbing = TRUE
                    gosub get_field_no_after_back_tabbing
                    
                    break
                    
            case 0
                    gosub validate_input
                    
                    if len(errMsg$) > 0 then
                        gosub display_err_msg
                    else
                        input "This is what would run if Enter was pressed", ignoreInput$
                    endif
                    
                    break
        swend

        if needToBreak then break

        if isTabbing and SHOW_FIELD_TERMINATOR_PRESSED then
            print @(55,21), 'CL', "CTL, savedCTL: ", CTL, ", ", savedCTL
        endif

        if !(isTabbing) and len(errMsg$) = 0 then
            gosub display_data
        endif
        
    wend
    
    return

    
    rem ------------------------------------------------------------------------------------------
    rem  When Page Up is pressed, calculate a new topLeftMapIndex
    rem ------------------------------------------------------------------------------------------
    
    
get_top_left_map_index_for_page_up:

    topLeftMapIndex = topLeftMapIndex - RECORDS_PER_PAGE
    
    if topLeftMapIndex < 1 then topLeftMapIndex = 1

    return

    
    rem ------------------------------------------------------------------------------------------
    rem  When Page Down is pressed, calculate a new topLeftMapIndex
    rem ------------------------------------------------------------------------------------------
    
    
get_top_left_map_index_for_page_down:

    topLeftMapIndex = topLeftMapIndex + RECORDS_PER_PAGE
    
    if topLeftMapIndex > datesMapSize then topLeftMapIndex = datesMapSize

    return    
    
    
    rem ------------------------------------------------------------------------------------------
    rem  get_field_no_after_tabbing
    rem ------------------------------------------------------------------------------------------
    
    
get_field_no_after_tabbing:

    currentFieldNo = currentFieldNo + 1
    if currentFieldNo > 2 then currentFieldNo = 1
    
    return
    
    
    rem ------------------------------------------------------------------------------------------
    rem  get_field_no_after_back_tabbing
    rem ------------------------------------------------------------------------------------------
    
    
get_field_no_after_back_tabbing:

    currentFieldNo = currentFieldNo - 1
    if currentFieldNo < 1 then currentFieldNo = 2
    
    return
    
    
    rem ------------------------------------------------------------------------------------------
    rem  clear_err_msg
    rem ------------------------------------------------------------------------------------------
    
    
clear_err_msg:

    print @(0,22), 'CL'
    errMsg$ = ""
        
    return
    
    
    rem ------------------------------------------------------------------------------------------
    rem  display_err_msg
    rem ------------------------------------------------------------------------------------------
    
    
display_err_msg:

    print @(0,22), 'CL', 'BR', pad(errMsg$, 80, "L", " "), 'ER'
        
    return
    
    
    rem ------------------------------------------------------------------------------------------
    rem  validate_input
    rem ------------------------------------------------------------------------------------------
    
    
validate_input:

    if shift$ <> "1" and shift$ <> "2" and shift$ <> "3" then
        errMsg$ = "Shift must be 1, 2 or 3."
        currentFieldNo = SHIFT_FIELD_NO
    endif
    
    hasDeptErr = FALSE
    
    dept = num(dept$,err=invalid_dept_no_format)
    
    if dept < 1 or dept > displayedCount then
        hasDeptErr = TRUE
    endif
    
    remainder = mod(dept, 1)
    
    if remainder <> 0 then
        hasDeptErr = TRUE
    endif
    
    goto skip_dept_no_format
    
    invalid_dept_no_format:
        hasDeptErr = TRUE
    
    skip_dept_no_format:
    
    if hasDeptErr then
        errMsg$ = "Invalid department number."
        currentFieldNo = DEPT_FIELD_NO
    endif
  
        
    return
