REM /**
REM  * LoadProgramInfo.bbj
REM  * @author stevett
REM  *
REM  * Written October 2015
REM  * 
REM  * Load metadata from our source codebase into the ProgramInfoXxxx tables.
REM  *
REM  * Revised 5/17/16: Changed database tables to be case sensitive to accommodate program names
REM  *                  like "DONE" and "done".  Unfortunately, we re-use same name in lower case
REM  *                  for some BBj programs.
REM  *
REM  * Note 8/22/16: I now have a better way to get the following source directory ready for parsing:
REM  * 
REM  *               "/home/stevett/bbjbbxListedPrograms"
REM  * 
REM  *               See the document "How to periodically update BitBucket repo with latest ERP Changes.docx"
REM  *               in itdept\Source Control.  
REM  *  
REM  */

use java.io.File
use org.apache.commons.collections.iterators.ArrayIterator
use java.util.HashSet

declare java.io.File directory!
declare java.io.File file!
declare org.apache.commons.collections.iterators.ArrayIterator arrayIterator!

declare java.util.HashSet partnerAbbrevSet!
declare java.util.HashSet partnerOlmSet!
declare java.util.HashSet geno48AbbrevSet!
declare java.util.HashSet geno48OlmSet!

declare java.util.HashSet filesAccessedHashSet!
declare java.util.HashSet programsCalledHashSet!
declare java.util.HashSet programsRunHashSet!

declare java.util.HashMap variableCallRunAssignmentMap!
declare java.util.HashSet variableCallRunAssignmentSet!
declare java.util.HashSet variableCallRunVariableNameSet!
declare java.util.HashSet variableCallRunProgramsWithAbbrevSet!
declare java.util.HashMap variableCallFoundMap!
declare java.util.HashMap variableRunFoundMap!

begin


rem *- - - - - - - - - - FUNCTIONS - - - - - - - - - -*

functions:

def fnGetDateWrittenOrRevised$(aSearchPhrase$, aStmt$, aUpperCaseStmt$)

    rem  print aStmt$

    result$ = ""
    foundPosition = pos(aSearchPhrase$ = aUpperCaseStmt$)
    
    if foundPosition > 0 and len(stmt$) > foundPosition + len(aSearchPhrase$) + 1 then
        remark$ = stmt$(foundPosition + len(aSearchPhrase$) + 1)
        
        REM  Find last slash position:b
        lastSlashPos = pos("/" = remark$, -1)
        
        if lastSlashPos > 0 and len(remark$) >= lastSlashPos + 2 then 
            
            if lastSlashPos >= 6 and remark$(lastSlashPos - 3, 1) = "/" then
                result$ = remark$(lastSlashPos - 5, 8)
            else
                if lastSlashPos >= 3 then
                    result$ = remark$(lastSlashPos - 2, 5)
                endif
            endif
            
        endif
        
    endif
    
    return result$

fnend


rem *- - - - - - - - - - MAIN ROUTINE - - - - - - - - - -*

main_routine:

    gosub setup_constants
    
    gosub init
    
    gosub read_source_programs


rem *- - - - - - - - - - EOJ - - - - - - - - - -*

eoj:

    REM  ************** TEMPORARILY DON'T RELEASE! ****************
    
    REM release
    end


rem *- - - - - - - - - - SUBROUTINES - - - - - - - - - -*


    rem ------------------------------------------------------------------------------------------
    rem  One-time intialization
    rem ------------------------------------------------------------------------------------------

    
init:

    call "ConfigVarsDAO.bbj::get_value", "is.windows.environment", configVarFound, configVarDataType$, isWindowsEnv$
    isWindowsEnv = num(isWindowsEnv$)
    
    call "ConfigVarsDAO.bbj::get_value", "notions.data.warehouse.data.source.name", configVarFound, configVarDataType$, programInfoDataSource$

    if isWindowsEnv then
        SOURCE_PROGRAM_PATH$ = "/bbjbbxListedPrograms"
    else
        SOURCE_PROGRAM_PATH$ = "/home/stevett/bbjbbxListedPrograms"
    endif


    REM  Delete all program info (will reload)
    
    print "Deleting program metadata from database ... please wait"
    
    deleteChannel = sqlunt
    sqlopen(deleteChannel) programInfoDataSource$
    
    sqlprep(deleteChannel) DELETE_PROGRAMS_QUERY$
    sqlexec(deleteChannel)
    
    sqlprep(deleteChannel) DELETE_PROGRAM_FILES_QUERY$
    sqlexec(deleteChannel)
    
    sqlprep(deleteChannel) DELETE_PROGRAM_CALLED_PROGRAMS_QUERY$
    sqlexec(deleteChannel)
    
    sqlprep(deleteChannel) DELETE_PROGRAM_RUN_PROGRAMS_QUERY$
    sqlexec(deleteChannel)
    
    sqlprep(deleteChannel) DELETE_PROGRAM_REJECTS_QUERY$
    sqlexec(deleteChannel)

    sqlclose(deleteChannel)
    
    variableCallRunVariableNameSet! = new java.util.HashSet()
    variableCallRunVariableNameSet!.add("CP$")
    variableCallRunVariableNameSet!.add("ONODPGM$")
    variableCallRunVariableNameSet!.add("PROG45$")
    variableCallRunVariableNameSet!.add("PROG51$")
    
    variableCallRunProgramsWithAbbrevSet! = new java.util.HashSet()
    
    partnerAbbrevSet! = new java.util.HashSet()
    partnerOlmSet! = new java.util.HashSet()
    
    REM  It turns out the GENO48 stuff was a waste of time.  The variability of GENO48 is actually
    REM  commented out in the program.  (At least it helped me refactor this program to be more generic.)
    
    geno48AbbrevSet! = new java.util.HashSet()
    geno48OlmSet! = new java.util.HashSet()
    
    REM  The following list can be periodically fetched using dbVisualizer and the query named
    REM  "List active B2C partners and paths.sql":
    
    REM  TODO: In future, the query could be tied in directly instead of using hard-wired values.
    
    REM  Active partners and OLMs:
    activePartners$ = "ARCH, AFES, AMCR, AMAZ, BLUE, BEAL, BUYO, CREC, CCTV, CHER, DOBA, DOLL, DIOF, FABD, FFCR, FFAB, FLAX, FABS, FYNM, GREE, HOME, HPPE, HSNW, IDEA, IDLW, JCPE, KCRF, KOHL, KMRT, KNWH, MANU, MEDE, MICH, MIDW, OFSS, BUYC, OVST, PETC, PRIM, QVCC, RANG, SAMS, STAC, SGIF, SHOP, SPEC, STAQ, STAP, STUF, SDOL, STAD, SPIN, STAZ, TARG, TOYS, UNBE, QUWH, USAR, VALC, WAYF, WALG, WMRT, ZERB"
    activeOlms$ = "AA, AF, AM, AZ, BB, BL, BU, CE, CN, CZ, DB, DD, DI, FA, FC, FF, FL, FS, FY, GR, HD, HP, HS, ID, IW, JC, KC, KH, KM, KN, MA, MD, MH, MI, OF, ON, OV, PE, PR, QV, RA, SA, SD, SG, SH, SP, SQ, SS, ST, SV, SW, SY, SZ, TA, TO, UN, UQ, US, VA, WA, WG, WM, ZE"
    
    REM  OLMs for program GENO48:
    geno48Partners$ = "MIDW, PRIM, SGIF, UNBE, SPIN, HPPE, DIOF, CHER, SDOL, FLAX, USAR" 
    geno48Olms$ = "MI, PR, SG, UN, SY, HP, DI, CZ, SV, FL, US"

    p = -5
    o = -3
    
    while TRUE
        p = p + 6
        o = o + 4
        
        if p > len(activePartners$) then break
        
        partnerAbbrev$ = activePartners$(p, 4)
        partnerAbbrevSet!.add(partnerAbbrev$)
        partnerOlmSet!.add(activeOlms$(o, 2))
        
        REM  Example: AFES75
        variableCallRunProgramsWithAbbrevSet!.add(partnerAbbrev$ + "39")
        variableCallRunProgramsWithAbbrevSet!.add(partnerAbbrev$ + "45")
        variableCallRunProgramsWithAbbrevSet!.add(partnerAbbrev$ + "46")
        variableCallRunProgramsWithAbbrevSet!.add(partnerAbbrev$ + "51C")
        variableCallRunProgramsWithAbbrevSet!.add(partnerAbbrev$ + "75")
        variableCallRunProgramsWithAbbrevSet!.add(partnerAbbrev$ + "88")
        variableCallRunProgramsWithAbbrevSet!.add(partnerAbbrev$ + "88B")
        
    wend


    REM  The following are present in the SHIP44 run chain even though they are not active partners:
    
    inactivePartner75Programs$ = "CGAL75, FIEL75, GOLD75, LABA75, MPAT75, ARTF75, ATGS75, BERN75, BIGC75, BWRK75, CALI75, CARO75, CATT75, CDIR75, CMAN75, CODA75, CRID75, CRWC75, FAMI75, GOCR75, GOLD75, GRST75, HART75, KANB75, KELL75, KIWI75, KOLL75, LETS75, MYSS75, NWTM75, OOZA75, PAIG75, PATO75, SCRI75, SIMP75, SKYM75, SLAN75, TDIR75, WHIM75, WOWM75, WWIS75"
    
    variableCallRunProgramsWithAbbrevSet!.add("BRDR75.old")
    variableCallRunProgramsWithAbbrevSet!.add("BRDR75.SAV")
    

    p = -7
    
    while TRUE
        p = p + 8
        
        if p > len(inactivePartner75Programs$) then break
        
        variableCallRunProgramsWithAbbrevSet!.add(inactivePartner75Programs$(p, 6))
        
    wend
    

    p = -5
    o = -3
    
    while TRUE
        p = p + 6
        o = o + 4
        
        if p > len(geno48Partners$) then break
        
        geno48AbbrevSet!.add(geno48Partners$(p, 4))
        geno48OlmSet!.add(geno48Olms$(o, 2))
        
    wend
    
    return


    rem ------------------------------------------------------------------------------------------
    rem  Read through source programs in SOURCE_PROGRAM_PATH$
    rem ------------------------------------------------------------------------------------------
    
    
read_source_programs:

    directory! = new java.io.File(SOURCE_PROGRAM_PATH$)
    
    arrayIterator! = new org.apache.commons.collections.iterators.ArrayIterator(directory!.listFiles())
    
    programExistsChannel = sqlunt
    sqlopen(programExistsChannel) programInfoDataSource$
    sqlprep(programExistsChannel) DOES_PROGRAM_EXIST_QUERY$
    
    programsInsertChannel = sqlunt
    sqlopen(programsInsertChannel) programInfoDataSource$
    sqlprep(programsInsertChannel) INSERT_PROGRAMS_QUERY$
    
    programFilesChannel = sqlunt
    sqlopen(programFilesChannel) programInfoDataSource$
    sqlprep(programFilesChannel) INSERT_PROGRAM_FILES_QUERY$
    
    programsCalledChannel = sqlunt
    sqlopen(programsCalledChannel) programInfoDataSource$
    sqlprep(programsCalledChannel) INSERT_PROGRAM_CALLED_PROGRAMS_QUERY$
    
    programsRunChannel = sqlunt
    sqlopen(programsRunChannel) programInfoDataSource$
    sqlprep(programsRunChannel) INSERT_PROGRAM_RUN_PROGRAMS_QUERY$
    
    programRejectsChannel = sqlunt
    sqlopen(programRejectsChannel) programInfoDataSource$
    sqlprep(programRejectsChannel) INSERT_PROGRAM_REJECTS_QUERY$
    
    while arrayIterator!.hasNext()
    
        file! = cast( java.io.File, arrayIterator!.next())
        
        if !(file!.isFile()) then continue
        
        sourceProgramName$ = file!.getName()
        
REM         if len(sourceProgramName$) > 50 then
REM             print "file name, length = ", sourceProgramName$, len(sourceProgramName$)  
REM         endif
        
        REM  If empty file, skip
        if file!.length() = 0 then
        
            firstPart$ = sourceProgramName$
            extension$ = ""

            REM  Find first dot position
            firstDotPos = pos("." = sourceProgramName$)
            
            if firstDotPos > 1 then
                firstPart$ = sourceProgramName$(1, firstDotPos - 1)
            endif

            REM  Find last dot position
            lastDotPos = pos("." = sourceProgramName$, -1)
            
            if lastDotPos > 0 and lastDotPos < len(sourceProgramName$) then
                extension$ = sourceProgramName$(lastDotPos + 1)
            endif
            
            sqlexec(programRejectsChannel) sourceProgramName$, firstPart$, extension$ 
            continue
            
        endif
        
        REM  if !(sourceProgramName$ = "AFES75") then continue


        sqlexec(programExistsChannel) sourceProgramName$ 
        
        dim resultRow$:sqltmpl(programExistsChannel)
        hits = 0

        resultRow$ = sqlfetch(programExistsChannel,err=hit_check_bombed)
        hits = resultRow.hit_count
        hit_check_bombed:
        
        if hits > 0 then continue

        gosub process_one_source_program

    wend
    
    sqlclose(programExistsChannel)
    sqlclose(programsInsertChannel)
    sqlclose(programFilesChannel)
    sqlclose(programsCalledChannel)
    sqlclose(programsRunChannel)
    sqlclose(programRejectsChannel)
 
    return
    

    rem ------------------------------------------------------------------------------------------
    rem  Process one source program -- sourceProgramName$
    rem ------------------------------------------------------------------------------------------


process_one_source_program:

    print sourceProgramName$
    
    sourceProgramChannel = unt
    open(sourceProgramChannel) SOURCE_PROGRAM_PATH$ + "/" + sourceProgramName$
    
    relativeLineNo = 0
    dateWrittenFound = FALSE
    dateRevisedFound = FALSE
    programDescription$ = ""
    dateWritten$ = ""
    dateRevised$ = ""
    
    filesAccessedHashSet! = new java.util.HashSet()
    programsCalledHashSet! = new java.util.HashSet()
    programsRunHashSet! = new java.util.HashSet()
    
    variableCallRunAssignmentMap! = new java.util.HashMap()
    variableCallRunFoundMap! = new java.util.HashMap()
    variableCallFoundMap! = new java.util.HashMap()
    variableRunFoundMap! = new java.util.HashMap()
    
    
    while TRUE
    
        read(sourceProgramChannel, err=*break) rawStmt$
        REM print rawStmt$
        
        REM  Handle multi-line statements:
        
        try_split:
        
        semiColonPos = pos(";" = rawStmt$)
        
        if semiColonPos > 0 then
            stmt$ = rawStmt$(1, semiColonPos - 1)
            gosub process_one_statement
            
            if len(rawStmt$) > len(stmt$) + 2 then
                rawStmt$ = rawStmt$(len(stmt$) + 2)
                goto try_split
            endif
        else
            stmt$ = rawStmt$
            gosub process_one_statement
        endif
    
    wend


    REM  gosub print_called_program_assignments

    gosub store_variable_calls_and_runs
    
    
    programDescription$ = cvs(programDescription$,3)
    if len(programDescription$) > 250 then programDescription$ = programDescription$(1,250)
    
    sqlexec(programsInsertChannel) sourceProgramName$, programDescription$, dateWritten$, dateRevised$  
    
REM     print "files accessed list ""channel - file"""

    iter! = filesAccessedHashSet!.iterator()
    
    while iter!.hasNext()
        channelAndFile$ = iter!.next()
        colonsPos = pos("::" = channelAndFile$)
REM         print channelAndFile$(1, colonsPos - 1), " - ", channelAndFile$(colonsPos + 2)
         sqlexec(programFilesChannel) sourceProgramName$, channelAndFile$(colonsPos + 2), channelAndFile$(1, colonsPos - 1) 
    wend

    
REM  Store called programs

    iter! = programsCalledHashSet!.iterator()
    
    while iter!.hasNext()
        programCalled$ = iter!.next()
        sqlexec(programsCalledChannel) sourceProgramName$, programCalled$ 
    wend

    
REM  Store run programs

    iter! = programsRunHashSet!.iterator()
    
    while iter!.hasNext()
        programRun$ = iter!.next()
        rem print "sourceProgramName$, programRun$ = ", sourceProgramName$, ", ", programRun$
        sqlexec(programsRunChannel) sourceProgramName$, programRun$ 
    wend

    
    close(sourceProgramChannel)

    return
    

    rem ------------------------------------------------------------------------------------------
    rem  Print called program variable assignments
    rem ------------------------------------------------------------------------------------------
    
    
print_called_program_assignments:

    print "Variable called/run program assignments for program ", sourceProgramName$, ":"

    outerIter! = variableCallRunAssignmentMap!.keySet().iterator()
    
    while outerIter!.hasNext()
        assignVar$ = outerIter!.next()
        variableCallRunAssignmentSet! = cast( java.util.HashSet, variableCallRunAssignmentMap!.get(assignVar$) )
    
        callFound = TRUE
        if variableCallFoundMap!.get(assignVar$) = null() then callFound = FALSE
    
        runFound = TRUE
        if variableRunFoundMap!.get(assignVar$) = null() then runFound = FALSE
        
        print "assignVar$ = ", assignVar$, " callFound = ", callFound, "  runFound = ", runFound

        iter! = variableCallRunAssignmentSet!.iterator()
        
        while iter!.hasNext()
            assignValue$ = iter!.next()
            print "assignVar$ = ", assignVar$, " assignValue$ = ", assignValue$
        wend
    wend

    return


    rem ------------------------------------------------------------------------------------------
    rem  Store variably named called and run programs in database 
    rem ------------------------------------------------------------------------------------------


store_variable_calls_and_runs:

    outerIter! = variableCallRunAssignmentMap!.keySet().iterator()
    
    while outerIter!.hasNext()
        assignVar$ = outerIter!.next()
    
        callFound = TRUE
        if variableCallFoundMap!.get(assignVar$) = null() then callFound = FALSE
    
        runFound = TRUE
        if variableRunFoundMap!.get(assignVar$) = null() then runFound = FALSE

        if !(callFound) and !(runFound) then continue
        
        variableCallRunAssignmentSet! = cast( java.util.HashSet, variableCallRunAssignmentMap!.get(assignVar$) )
        iter! = variableCallRunAssignmentSet!.iterator()
        
        while iter!.hasNext()
            assignValue$ = iter!.next()
            firstQuotePos = pos("""" = assignValue$,1,1)
            secondQuotePos = pos("""" = assignValue$,1,2)

            
            if assignVar$ = "CP$" then
            
                REM  Example of assignValue$: ABRV$+"87"

                if pos("ABRV$+""" = assignValue$) > 0 then
                
                    iter2! = partnerAbbrevSet!.iterator()
                    
                    while iter2!.hasNext()
                        abbrev$ = iter2!.next()
                        actualProgramName$ = abbrev$ + assignValue$(firstQuotePos + 1, secondQuotePos - firstQuotePos - 1)
                        gosub put_resolved_called_run_program_in_database
                    wend
                endif
                
            endif

            
            if assignVar$ = "ONODPGM$" then

                REM  Example of assignValue$: "ONOD90-"+OLM$
    
                if pos("""+OLM$" = assignValue$) > 0 then
                
                    iter2! = partnerOlmSet!.iterator()
                    
                    while iter2!.hasNext()
                        olm$ = iter2!.next()
                        actualProgramName$ = assignValue$(firstQuotePos + 1, secondQuotePos - firstQuotePos - 1) + olm$ 
                        gosub put_resolved_called_run_program_in_database
                    wend
                endif
            endif

            
            if assignVar$ = "PROG45$" or assignVar$ = "PROG51$" then
            
                REM  Examples of assignValue$: MMFA.ABRV$+"51C" and "GENO51C"

                if pos("MMFA.ABRV$+""" = assignValue$) > 0 then
                
                    if sourceProgramName$ = "GENO48" then
                        iter2! = geno48AbbrevSet!.iterator()
                    else
                        iter2! = partnerAbbrevSet!.iterator()
                    endif
                    
                    while iter2!.hasNext()
                        abbrev$ = iter2!.next()
                        actualProgramName$ = abbrev$ + assignValue$(firstQuotePos + 1, secondQuotePos - firstQuotePos - 1)
                        gosub put_resolved_called_run_program_in_database
                    wend
                endif
                
                REM  Handles "GENO51C" and other constant cases
                
                if pos("+" = assignValue$) = 0  then
                    actualProgramName$ = assignValue$(firstQuotePos + 1, secondQuotePos - firstQuotePos - 1)
                    gosub put_resolved_called_run_program_in_database
                endif

                
            endif

            
        wend
    wend

    return


    rem ------------------------------------------------------------------------------------------
    rem  Put resolved called or run program into the database
    rem ------------------------------------------------------------------------------------------


put_resolved_called_run_program_in_database:
                        
    actualProgramPath$ = SOURCE_PROGRAM_PATH$ + "/" + actualProgramName$
    
    REM  Only add the program to the called/run list if it actually exists:
    
    testChannel = unt
    open(testChannel,err=skip_store) actualProgramPath$
    close(testChannel)
    
    if callFound then sqlexec(programsCalledChannel) sourceProgramName$, actualProgramName$ 
    if runFound then sqlexec(programsRunChannel) sourceProgramName$, actualProgramName$ 
    
    skip_store:

    return
    

    rem ------------------------------------------------------------------------------------------
    rem  Process a single statement
    rem ------------------------------------------------------------------------------------------
    
    
process_one_statement:

    relativeLineNo = relativeLineNo + 1
    
    stmt$ = cvs(stmt$, 3)
    upperCaseStmt$ = cvs(stmt$, 4)
    
    remarkPosition = pos("REM" = upperCaseStmt$)

    if remarkPosition = 0 then
        stmtWithoutRemark$ = stmt$
    else
        stmtWithoutRemark$ = stmt$(1, remarkPosition - 1)
    endif

    REM  Determine date written:
    
    if relativeLineNo <= LINE_HDRS_END and !(dateWrittenFound) then
        dateWritten$ = fnGetDateWrittenOrRevised$("REM ORG", stmt$, upperCaseStmt$)

        if len(dateWritten$) > 0 then
            dateWrittenFound = TRUE
        endif
        
    endif
    
    REM  Determine date revised:
    
    if relativeLineNo <= LINE_HDRS_END and !(dateRevisedFound) then
        dateRevised$ = fnGetDateWrittenOrRevised$("REM REV", stmt$, upperCaseStmt$)

        if len(dateRevised$) > 0 then
            dateRevisedFound = TRUE
        endif
        
    endif

    
    REM  Determine program description:
    
    if relativeLineNo <= LINE_HDRS_END and !(dateWrittenFound) and !(dateRevisedFound) then
        
        if remarkPosition > 0 and len(stmt$) > remarkPosition + 4 then
            remark$ = stmt$(remarkPosition + 4)
            programDescription$ = programDescription$ + remark$
        endif
        
    endif
    
    
    REM  TODO: What about files opened with OPNF90, OPNFIL or OPNO90?  Or OPEN91, OPEN92 or OPEN.PUB?
    
    
    REM  Spot an open90ed file:
    open90Position = pos("""OPEN90""" = stmt$)
    
    if open90Position > 0 and (remarkPosition = 0 or remarkPosition > open90Position) then
        open90AndAfter$ = stmt$(open90Position)
        firstCommaPos = pos("," = open90AndAfter$,1,1)
        secondCommaPos = pos("," = open90AndAfter$,1,2)
        thirdCommaPos = pos("," = open90AndAfter$,1,3)
        
        if firstCommaPos > 0 and secondCommaPos > 0 and thirdCommaPos > 0 then
            channel$ = cvs(open90AndAfter$(firstCommaPos + 1, secondCommaPos - firstCommaPos - 1), 3) 
            accessedFile$ = cvs(open90AndAfter$(secondCommaPos + 1, thirdCommaPos - secondCommaPos - 1), 3)
            
            REM  Trim quotes off accessedFile$
            accessedFile$ = accessedFile$(2, len(accessedFile$) - 2)

            filesAccessedHashSet!.add(channel$ + "::" + accessedFile$)
        endif
        
    endif
    
    
    REM  Spot an opened file:
    openPosition = pos("OPEN(" = stmt$)
    if openPosition = 0 then openPosition = pos("OPEN (" = stmt$)
    
    if openPosition > 0 and (remarkPosition = 0 or remarkPosition > openPosition) then
        openAndAfter$ = stmt$(openPosition)
        leftParenPos = pos("(" = openAndAfter$)
        rightParenPos = pos(")" = openAndAfter$)
        
        if leftParenPos > 0 and rightParenPos > 0 and len(openAndAfter$) > rightParenPos then
            channel$ = cvs(openAndAfter$(leftParenPos + 1, rightParenPos - leftParenPos - 1), 3)
            
            REM  Trim off options after channel, if present
            commaPos = pos("," = channel$)
            
            if commaPos > 0 then
                channel$ = channel$(1, commaPos - 1)
            endif
             
            accessedFile$ = cvs(openAndAfter$(rightParenPos + 1), 3)
            
            REM  Trim quotes off accessedFile$
            if accessedFile$(1,1) = """" then
                accessedFile$ = accessedFile$(2, len(accessedFile$) - 2)
            endif

            filesAccessedHashSet!.add(channel$ + "::" + accessedFile$)
        endif
        
    endif
    
    
    REM  Spot a called program:
    callPosition = pos("XCALL " = stmt$)
    if callPosition = 0 then callPosition = pos("CALL " = stmt$)
    
    if callPosition > 0 and (remarkPosition = 0 or remarkPosition > callPosition) then
        callAndAfter$ = stmt$(callPosition)
        
        if pos("CALL ABRV$+""" = callAndAfter$) = 1 and variableCallRunProgramsWithAbbrevSet!.contains(sourceProgramName$) then
            firstQuotePos = pos("""" = callAndAfter$,1,1)
            secondQuotePos = pos("""" = callAndAfter$,1,2)
            callAndAfter$ = "CALL """ + sourceProgramName$(1,4) + callAndAfter$(firstQuotePos + 1, secondQuotePos - firstQuotePos - 1) + """"
        endif
        
        firstQuotePos = pos("""" = callAndAfter$,1,1)
        secondQuotePos = pos("""" = callAndAfter$,1,2)
        
        if firstQuotePos > 0 and secondQuotePos > 0 then
            callPhrase$ = cvs(callAndAfter$(firstQuotePos + 1, secondQuotePos - firstQuotePos - 1), 3) 
            
            REM  Trim off entry point, if present
            entryPtPos = pos("::" = callPhrase$)
            
            if entryPtPos > 0 then
                callPhrase$ = callPhrase$(1, entryPtPos - 1)
            endif

            if !(programsCalledHashSet!.contains(callPhrase$)) then
                programsCalledHashSet!.add(callPhrase$)
            endif

        endif
        
    endif
    
    
    REM  Spot a run program:
    runPosition = pos("RUN " = stmt$)
    
    if runPosition > 0 and (remarkPosition = 0 or remarkPosition > runPosition) then
        runAndAfter$ = stmt$(runPosition)
        
        if pos("RUN ABRV$+""" = runAndAfter$) = 1 and variableCallRunProgramsWithAbbrevSet!.contains(sourceProgramName$) then
            firstQuotePos = pos("""" = runAndAfter$,1,1)
            secondQuotePos = pos("""" = runAndAfter$,1,2)
            runAndAfter$ = "RUN """ + sourceProgramName$(1,4) + runAndAfter$(firstQuotePos + 1, secondQuotePos - firstQuotePos - 1) + """"
        endif
        
        firstQuotePos = pos("""" = runAndAfter$,1,1)
        secondQuotePos = pos("""" = runAndAfter$,1,2)
        
        if firstQuotePos > 0 and secondQuotePos > 0 then
            runPhrase$ = cvs(runAndAfter$(firstQuotePos + 1, secondQuotePos - firstQuotePos - 1), 3)

            if !(programsRunHashSet!.contains(runPhrase$)) then
                programsRunHashSet!.add(runPhrase$)
            endif

        endif
        
    endif
    
    
    iter! = variableCallRunVariableNameSet!.iterator()
    
    while iter!.hasNext()
        assignVar$ = iter!.next()
        
        REM  Spot use of [assignVar$]="something" assignment:
        gosub capture_assignment_phrase
    
        REM  Spot use of CALL:
        if pos("CALL " + assignVar$ = stmtWithoutRemark$) > 0 then
            variableCallFoundMap!.put(assignVar$, TRUE)
        endif
    
        REM  Spot use of RUN:
        if pos("RUN " + assignVar$ = stmtWithoutRemark$) > 0 then
            variableRunFoundMap!.put(assignVar$, TRUE)
        endif
    wend

    return


    rem ------------------------------------------------------------------------------------------
    rem  Capture assignment phrase for an assignment.  For example: LET CP$=ABRV$+"87"
    rem  If "assignVar$" is CP$, then sets "assignPhrase$" to: ABRV$+"87" .  The assignment
    rem  phrase is then added to a HashMap of HashSet where the key is the value of "assignVar$"
    rem ------------------------------------------------------------------------------------------


capture_assignment_phrase:

    assignPosition = pos(assignVar$ + "=" = stmtWithoutRemark$)
    ifPosition = pos("IF " + assignVar$ + "=" = stmtWithoutRemark$)
    
    if assignPosition > 0 and ifPosition = 0 then 
        assignPhrase$ = stmtWithoutRemark$(assignPosition + len(assignVar$ + "="))
        
        REM  Handle multiple variable assignments on same statement:
        
        commaPosition = pos("," = assignPhrase$)
        if commaPosition > 0 then assignPhrase$ = assignPhrase$(1, commaPosition - 1)
        
    else
        assignPhrase$ = ""
    endif
        
    if len(assignPhrase$) > 0 then
    
        variableCallRunAssignmentSet! = cast( java.util.HashSet, variableCallRunAssignmentMap!.get(assignVar$) )
        
        if variableCallRunAssignmentSet! = null() then variableCallRunAssignmentSet! = new java.util.HashSet()
        
        if !(variableCallRunAssignmentSet!.contains(assignPhrase$)) then
            variableCallRunAssignmentSet!.add(assignPhrase$)
            variableCallRunAssignmentMap!.put(assignVar$, variableCallRunAssignmentSet!)
        endif
        
    endif
    
    return
    

    rem ------------------------------------------------------------------------------------------
    rem  Setup constants - makes last subroutine due to line continuations
    rem ------------------------------------------------------------------------------------------


setup_constants:

    TRUE = 1
    FALSE = 0
    
    LINE_HDRS_END = 15
    
    DELETE_PROGRAMS_QUERY$ = "delete from ProgramInfoGeneral"
    
    DELETE_PROGRAM_FILES_QUERY$ = "delete from ProgramInfoFiles"
    
    DELETE_PROGRAM_CALLED_PROGRAMS_QUERY$ = "delete from ProgramInfoCalledPrograms"
    
    DELETE_PROGRAM_RUN_PROGRAMS_QUERY$ = "delete from ProgramInfoRunPrograms"
    
    DELETE_PROGRAM_REJECTS_QUERY$ = "delete from ProgramInfoRejects"
    
    DOES_PROGRAM_EXIST_QUERY$ = "select count(*) as hit_count from ProgramInfoGeneral where ProgramName = ?"
    
    INSERT_PROGRAMS_QUERY$ = "insert into ProgramInfoGeneral (ProgramName, Description, DateWrittenText, DateLastRevisedText) " +
:       "values(?,?,?,?)"


REM  Note: This version doesn't check for duplicates:

REM     INSERT_PROGRAM_FILES_QUERY$ = "insert into ProgramInfoFiles (ProgramName, FilePath, FileChannel) " +
REM :       "values(?,?,?)"


REM  Note: This version checks for duplicates but isn't as efficient as possible

REM     INSERT_PROGRAM_FILES_QUERY$ = "insert ProgramInfoFiles (ProgramName, FilePath, FileChannel) " + 
REM :       "select ?,?,? " +
REM :       "except " +
REM :       "select ProgramName, FilePath, FileChannel from ProgramInfoFiles"


REM  Note: This version checks for duplicates and is efficient

    INSERT_PROGRAM_FILES_QUERY$ = "" +
:       "declare " +
:       "@pgm varchar(60) = ?, " +
:       "@path varchar(100) = ?, " +
:       "@channel varchar(30) = ? " +
:       "" +
:       "if not exists " +
:       "(select * from ProgramInfoFiles where ProgramName = @pgm and FilePath = @path and FileChannel = @channel) " +
:       "insert ProgramInfoFiles (ProgramName, FilePath, FileChannel)  values ( @pgm, @path, @channel);"

    INSERT_PROGRAM_CALLED_PROGRAMS_QUERY$ = "insert into ProgramInfoCalledPrograms (ProgramName, CalledProgramName) " +
:       "values(?,?)"

    INSERT_PROGRAM_RUN_PROGRAMS_QUERY$ = "insert into ProgramInfoRunPrograms (ProgramName, RunProgramName) " +
:       "values(?,?)"

    INSERT_PROGRAM_REJECTS_QUERY$ = "insert into ProgramInfoRejects (ProgramName, FileNameFirstPart, FileExtension) " +
:       "values(?,?,?)"

    return