REM /**
REM  * DisplayBasisLicenseUsage.bbj
REM  * @author stevett
REM  *
REM  * Written: December 6th, 8th 2015
REM  * 
REM  */


use java.util.LinkedHashMap

declare BBjSysGui sg!
declare BBjWindow win!

declare BBjInputD fromDate! 
declare BBjStaticText fromDateCaption!
declare BBjToolButton fromDatePickerButton!

declare BBjInputD toDate! 
declare BBjStaticText toDateCaption!
declare BBjToolButton toDatePickerButton!


declare BBjStaticText licensesCaption!

declare BBjCheckBox licAllCheckBox!
declare BBjCheckBox licRootCheckBox!
declare BBjCheckBox licOffsiteCheckBox!
declare BBjCheckBox licPalmCheckBox!
declare BBjCheckBox licWhseCheckBox!
declare BBjCheckBox licOtherCheckBox!


declare BBjStaticText connectionsCaption!

declare BBjCheckBox conAllCheckBox!
declare BBjCheckBox conPortalCheckBox!
declare BBjCheckBox conIntegrationsCheckBox!
declare BBjCheckBox conJohnCheckBox!
declare BBjCheckBox conBlueMirrorCheckBox!
declare BBjCheckBox conOtherCheckBox!


declare BBjButton reloadButton!

declare BBjLineChart lineChart!

declare java.util.LinkedHashMap licenseCountsMap!


begin


rem *- - - - - - - - - - CONSTANTS - - - - - - - - - -*

constants:


    TRUE = 1
    FALSE = 0
    
    FROM_DATE_CTL_ID = 101
    FROM_DATE_CAPTION_CTL_ID = 102
    FROM_DATE_PICKER_ID = 103
    
    TO_DATE_CTL_ID = 201
    TO_DATE_CAPTION_CTL_ID = 202
    TO_DATE_PICKER_ID = 203

    LIC_CAPTION_CTL_ID = 401
    LIC_ALL_CHK_BOX_CTL_ID = 402
    LIC_ROOT_CHK_BOX_CTL_ID = 403
    LIC_OFFSITE_CHK_BOX_CTL_ID = 404
    LIC_PALM_CHK_BOX_CTL_ID = 405
    LIC_WHSE_CHK_BOX_CTL_ID = 406
    LIC_OTHER_CHK_BOX_CTL_ID = 407

    CON_CAPTION_CTL_ID = 501
    CON_ALL_CHK_BOX_CTL_ID = 502
    CON_PORTAL_CHK_BOX_CTL_ID = 503
    CON_INTEGRATIONS_CHK_BOX_CTL_ID = 504
    CON_JOHN_CHK_BOX_CTL_ID = 505
    CON_BLUE_MIRROR_CHK_BOX_CTL_ID = 506
    CON_OTHER_CHK_BOX_CTL_ID = 507

    RELOAD_BTN_CTL_ID = 110
    
    LINE_CHART_CTL_ID = 301
    
    DATE_CTL_WIDTH = 70


rem *- - - - - - - - - - FUNCTIONS - - - - - - - - - -*

functions:


rem *- - - - - - - - - - MAIN ROUTINE - - - - - - - - - -*

main_routine:

    gosub display_window
    
    gosub display_controls

    PROCESS_EVENTS


rem *- - - - - - - - - - EOJ - - - - - - - - - -*

eoj:
    
    end


rem *- - - - - - - - - - SUBROUTINES - - - - - - - - - -*



    rem ------------------------------------------------------------------------------------------
    rem  Display the window (just the shell/frame of it)
    rem ------------------------------------------------------------------------------------------

display_window:

    sysguiChannel = unt 
    OPEN(sysguiChannel)"X0"
    
    sg! = BBjAPI().getSysGui()
    win! = sg!.addWindow(50, 50, 1200, 650, "Notions Marketing - Basis License Usage (DisplayBasisLicenseUsage.bbj)")

    CALLBACK(ON_CLOSE, close_window, sg!.getContext())

    return
    
    
    rem ------------------------------------------------------------------------------------------
    rem  Display the controls
    rem ------------------------------------------------------------------------------------------

display_controls:

    fromDateCaption! = win!.addStaticText(FROM_DATE_CAPTION_CTL_ID, 20, 20, 140, 30, "From Date", "")

    fromDate! = win!.addInputD(FROM_DATE_CTL_ID, 20, 40, DATE_CTL_WIDTH, 30)
    fromDate!.setMask("%Mz/%Dz/%Yz")
    fromDate!.setPassTab(sg!.TRUE)
    fromDate!.setEditable(FALSE)
    
    fromDatePickerButton! = win!.addToolButton(FROM_DATE_PICKER_ID, 90, 40,30,30,"BITMAP=calendar.png")


    toDateCaption! = win!.addStaticText(TO_DATE_CAPTION_CTL_ID, 20, 100, 140, 30, "To Date", "")

    toDate! = win!.addInputD(TO_DATE_CTL_ID, 20, 120, DATE_CTL_WIDTH,30)
    toDate!.setMask("%Mz/%Dz/%Yz")
    toDate!.setPassTab(sg!.TRUE)
    toDate!.setEditable(FALSE)
    
    toDatePickerButton! = win!.addToolButton(TO_DATE_PICKER_ID, 90, 120,30,30,"BITMAP=calendar.png")
    
    REM  Write out license checkboxes:
    
    licensesCaption! = win!.addStaticText(LIC_CAPTION_CTL_ID, 20, 180, 140, 30, "Licenses", "")
    
    licAllCheckBox! = win!.addCheckBox(LIC_ALL_CHK_BOX_CTL_ID, 20, 195, 140, 30, "All")
    licAllCheckBox!.setSelected(TRUE)
    
    licRootCheckBox! = win!.addCheckBox(LIC_ROOT_CHK_BOX_CTL_ID, 20, 220, 140, 30, "root")
    licRootCheckBox!.setSelected(TRUE)
    
    licOffsiteCheckBox! = win!.addCheckBox(LIC_OFFSITE_CHK_BOX_CTL_ID, 20, 245, 140, 30, "offsite")
    licOffsiteCheckBox!.setSelected(FALSE)
    
    licPalmCheckBox! = win!.addCheckBox(LIC_PALM_CHK_BOX_CTL_ID, 20, 270, 140, 30, "palm")
    licPalmCheckBox!.setSelected(FALSE)
    
    licWhseCheckBox! = win!.addCheckBox(LIC_WHSE_CHK_BOX_CTL_ID, 20, 295, 140, 30, "whse")
    licWhseCheckBox!.setSelected(TRUE)
    
    licOtherCheckBox! = win!.addCheckBox(LIC_OTHER_CHK_BOX_CTL_ID, 20, 320, 140, 30, "other")
    licOtherCheckBox!.setSelected(TRUE)
    
    REM  Write out connection checkboxes:
    
    connectionsCaption! = win!.addStaticText(CON_CAPTION_CTL_ID, 20, 380, 140, 30, "J/ODBC Connections", "")
    
    conAllCheckBox! = win!.addCheckBox(CON_ALL_CHK_BOX_CTL_ID, 20, 395, 140, 30, "All")
    conAllCheckBox!.setSelected(TRUE)
    
    conPortalCheckBox! = win!.addCheckBox(CON_PORTAL_CHK_BOX_CTL_ID, 20, 420, 140, 30, "portal_user")
    conPortalCheckBox!.setSelected(TRUE)
    
    conIntegrationsCheckBox! = win!.addCheckBox(CON_INTEGRATIONS_CHK_BOX_CTL_ID, 20, 445, 140, 30, "integrations")
    conIntegrationsCheckBox!.setSelected(TRUE)
    
    conJohnCheckBox! = win!.addCheckBox(CON_JOHN_CHK_BOX_CTL_ID, 20, 470, 140, 30, "john")
    conJohnCheckBox!.setSelected(FALSE)
    
    conBlueMirrorCheckBox! = win!.addCheckBox(CON_BLUE_MIRROR_CHK_BOX_CTL_ID, 20, 495, 140, 30, "bluemirror")
    conBlueMirrorCheckBox!.setSelected(FALSE)
    
    conOtherCheckBox! = win!.addCheckBox(CON_OTHER_CHK_BOX_CTL_ID, 20, 520, 140, 30, "other")
    conOtherCheckBox!.setSelected(FALSE)
    
    
    reloadButton! = win!.addButton(RELOAD_BTN_CTL_ID, 20, 580, 90, 30, "Reload", $0800$)
    
    
    REM  Syntax for "addLineChart":
    
    REM  addLineChart(int controlID, 
    REM               int left, int top, int width, int height, 
    REM               string xLabel, string yLabel, 
    REM               int numSeries, boolean showLegend, string flags)
    
    lineChart! = win!.addLineChart(LINE_CHART_CTL_ID, 150, 10, 1000, 600, "Time (Elapsed Hrs)","Licenses In Use", 13, TRUE)
    gosub populate_chart
    

    CALLBACK(ON_TOOL_BUTTON_PUSH, pick_from_date, sg!.getContext(), fromDatePickerButton!.getID())
    CALLBACK(ON_TOOL_BUTTON_PUSH, pick_to_date, sg!.getContext(), toDatePickerButton!.getID())
    CALLBACK(ON_BUTTON_PUSH, populate_chart, sg!.getContext(), reloadButton!.getID())

    return
    
    
    rem ------------------------------------------------------------------------------------------
    rem  Display the chart
    rem ------------------------------------------------------------------------------------------

populate_chart:

    lineChart!.clearData()

    if fromDate!.getText() = toDate!.getText() then
        titleDatePortion$ = fromDate!.getText()
        showDaySeries = FALSE 
    else
        titleDatePortion$ = fromDate!.getText() + " - " + toDate!.getText()
        showDaySeries = TRUE 
    endif

    lineChart!.setTitle("Basis License Usage: " + titleDatePortion$)
    lineChart!.setSeriesName(0, "All")
    lineChart!.setSeriesName(1, "root")
    lineChart!.setSeriesName(2, "offsite")
    lineChart!.setSeriesName(3, "palm")
    lineChart!.setSeriesName(4, "whse")
    lineChart!.setSeriesName(5, "other")
    lineChart!.setSeriesName(6, "1 day")
    lineChart!.setSeriesName(7, "DB All")
    lineChart!.setSeriesName(8, "DB portal_user")
    lineChart!.setSeriesName(9, "DB integrations")
    lineChart!.setSeriesName(10, "DB john")
    lineChart!.setSeriesName(11, "DB bluemirror")
    lineChart!.setSeriesName(12, "DB other")

    licenseCountsMap! = new java.util.LinkedHashMap()
    
    REM  Turn this bit into a function for repeatability:
    
    tmpDate$ = fromDate!.getText()
    tmpMMDDYY$ = tmpDate$(1,2) + tmpDate$(4,2) + tmpDate$(7,2)   
    call "DateUtilities.bbj::convert_mmdddyy_to_20yymmdd", tmpMMDDYY$, yyyymmddFrom$
    
    tmpDate$ = toDate!.getText()
    tmpMMDDYY$ = tmpDate$(1,2) + tmpDate$(4,2) + tmpDate$(7,2)   
    call "DateUtilities.bbj::convert_mmdddyy_to_20yymmdd", tmpMMDDYY$, yyyymmddTo$
    
    if licAllCheckBox!.isSelected() then
        seriesIndex = 0
        gosub populate_data_for_series
    endif
    
    if licRootCheckBox!.isSelected() then
        seriesIndex = 1
        seriesUserId$ = "root"
        gosub populate_data_for_series
    endif
    
    if licOffsiteCheckBox!.isSelected() then
        seriesIndex = 2
        seriesUserId$ = "offsite"
        gosub populate_data_for_series
    endif
    
    if licPalmCheckBox!.isSelected() then
        seriesIndex = 3
        seriesUserId$ = "palm"
        gosub populate_data_for_series
    endif
    
    if licWhseCheckBox!.isSelected() then
        seriesIndex = 4
        seriesUserId$ = "whse"
        gosub populate_data_for_series
    endif
    
    if licOtherCheckBox!.isSelected() then
        seriesIndex = 5
        gosub populate_data_for_series
    endif

    if showDaySeries and yyyymmddTo$ > yyyymmddFrom$ then
        seriesIndex = 6
        gosub populate_day_series
    endif
    
    if conAllCheckBox!.isSelected() then
        seriesIndex = 7
        gosub populate_data_for_series
    endif
    
    if conPortalCheckBox!.isSelected() then
        seriesIndex = 8
        seriesUserId$ = "portal_user"
        gosub populate_data_for_series
    endif
    
    if conIntegrationsCheckBox!.isSelected() then
        seriesIndex = 9
        seriesUserId$ = "integrations"
        gosub populate_data_for_series
    endif
    
    if conJohnCheckBox!.isSelected() then
        seriesIndex = 10
        seriesUserId$ = "john"
        gosub populate_data_for_series
    endif
    
    if conBlueMirrorCheckBox!.isSelected() then
        seriesIndex = 11
        seriesUserId$ = "bluemirror"
        gosub populate_data_for_series
    endif
    
    if conOtherCheckBox!.isSelected() then
        seriesIndex = 12
        gosub populate_data_for_series
    endif
    
    return
    
    
    rem ------------------------------------------------------------------------------------------
    rem  Populate data for series in "seriesIndex"
    rem ------------------------------------------------------------------------------------------

populate_data_for_series:

    switch seriesIndex
    
        case 0
            call "BasisLicenseUsageDAO.bbj::get_counts_for_all_users", yyyymmddFrom$, yyyymmddTo$, licenseCountsMap!
            break
    
        case 1
            call "BasisLicenseUsageDAO.bbj::get_counts_for_one_user", yyyymmddFrom$, yyyymmddTo$, seriesUserId$, licenseCountsMap!
            break
    
        case 2
            call "BasisLicenseUsageDAO.bbj::get_counts_for_one_user", yyyymmddFrom$, yyyymmddTo$, seriesUserId$, licenseCountsMap!
            break
    
        case 3
            call "BasisLicenseUsageDAO.bbj::get_counts_for_one_user", yyyymmddFrom$, yyyymmddTo$, seriesUserId$, licenseCountsMap!
            break
    
        case 4
            call "BasisLicenseUsageDAO.bbj::get_counts_for_one_user", yyyymmddFrom$, yyyymmddTo$, seriesUserId$, licenseCountsMap!
            break
    
        case 5
            call "BasisLicenseUsageDAO.bbj::get_counts_except_for_four_users", yyyymmddFrom$, yyyymmddTo$, "root", "whse", "offsite", "palm", licenseCountsMap!
            break
    
        case 7
            call "BasisConnectionStatisticsDAO.bbj::get_counts_for_all_users", yyyymmddFrom$, yyyymmddTo$, licenseCountsMap!
            break
    
        case 8
            call "BasisConnectionStatisticsDAO.bbj::get_counts_for_one_user", yyyymmddFrom$, yyyymmddTo$, seriesUserId$, licenseCountsMap!
            break
    
        case 9
            call "BasisConnectionStatisticsDAO.bbj::get_counts_for_one_user", yyyymmddFrom$, yyyymmddTo$, seriesUserId$, licenseCountsMap!
            break
    
        case 10
            call "BasisConnectionStatisticsDAO.bbj::get_counts_for_one_user", yyyymmddFrom$, yyyymmddTo$, seriesUserId$, licenseCountsMap!
            break
    
        case 11
            call "BasisConnectionStatisticsDAO.bbj::get_counts_for_one_user", yyyymmddFrom$, yyyymmddTo$, seriesUserId$, licenseCountsMap!
            break
    
        case 12
            call "BasisConnectionStatisticsDAO.bbj::get_counts_except_for_four_users", yyyymmddFrom$, yyyymmddTo$, "portal_user", "integrations", "john", "bluemirror", licenseCountsMap!
            break
    
    swend
    
    iter! = licenseCountsMap!.keySet().iterator()
    
    yyyymmddPrev$ = yyyymmddFrom$
    elapsedDays = 0 
    
    while iter!.hasNext()
    
      collectionTime! = iter!.next()
      collectionTime$ = collectionTime!
      licensesUsed = licenseCountsMap!.get(collectionTime!)
      
      tmpHrs = num(collectionTime$(12, 2))
      mins = num(collectionTime$(15, 2))
      secs = num(collectionTime$(18, 2))
      
      if (mins = 0) then
          tmpHrsFromMins = 0
      else
          tmpHrsFromMins = mins / 60
      endif  
      
      if (secs = 0) then
          tmpHrsFromSecs = 0
      else
          tmpHrsFromSecs = secs / 3600
      endif  

      tmpTotalHrs = tmpHrs + tmpHrsFromMins + tmpHrsFromSecs
      
      REM  Handle date range by adding 24 hours for each day that goes by while looping:
      
      yyyymmddCurr$ = collectionTime$(1, 4) + collectionTime$(6, 2) + collectionTime$(9, 2)
      
      if yyyymmddCurr$ > yyyymmddPrev$ then
          call "DateUtilities.bbj::get_days_between_inclusive", yyyymmddPrev$, yyyymmddCurr$, daysBetweenInclusive
          elapsedDays = elapsedDays + daysBetweenInclusive - 1 
          yyyymmddPrev$ = yyyymmddCurr$
      endif 

      if elapsedDays > 0 then
        tmpTotalHrs = tmpTotalHrs + (elapsedDays * 24)
      endif
      
      lineChart!.setXYValue(seriesIndex, tmpTotalHrs, licensesUsed)
      
    wend
    

    return
    
    
    rem ------------------------------------------------------------------------------------------
    rem  Use a series to give a visual cue for the span of each day
    rem ------------------------------------------------------------------------------------------

populate_day_series:

    call "DateUtilities.bbj::get_days_between_inclusive", yyyymmddFrom$, yyyymmddTo$, daysBetweenInclusive

        lineChart!.setXYValue(seriesIndex, 0, 0)
        
        y = -20
        isOdd = TRUE
        
        for dayNo = 1 to daysBetweenInclusive

            if isOdd then
                y = y - 20
                isOdd = FALSE
            else
                y = y + 20
                isOdd = TRUE
            endif
            
            x1 = (dayNo * 24) - 23.9
            x2 = (dayNo * 24) - 0.1
            x3 = (dayNo * 24)
            
            lineChart!.setXYValue(seriesIndex, x1, y)
            lineChart!.setXYValue(seriesIndex, x2, y)
            lineChart!.setXYValue(seriesIndex, x3, 0)

        next dayNo
         
    return
    
    
    rem ------------------------------------------------------------------------------------------
    rem  Close the window
    rem ------------------------------------------------------------------------------------------

close_window:

    close(sysguiChannel)
    
    release
    
    return


    rem ------------------------------------------------------------------------------------------
    rem  Pick "from date" from popup calendar
    rem ------------------------------------------------------------------------------------------

pick_from_date:

    fromDate!.calendar()

    return


    rem ------------------------------------------------------------------------------------------
    rem  Pick "to date" from popup calendar
    rem ------------------------------------------------------------------------------------------

pick_to_date:

    toDate!.calendar()

    return
