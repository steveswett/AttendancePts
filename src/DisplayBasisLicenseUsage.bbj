REM /**
REM  * DisplayBasisLicenseUsage.bbj
REM  * @author stevett
REM  *
REM  * Written: December 6th, 8th 2015
REM  * 
REM  */


use java.util.LinkedHashMap

declare BBjSysGui sg!
declare BBjWindow win!

declare BBjInputD fromDate! 
declare BBjStaticText fromDateCaption!
declare BBjToolButton fromDatePickerButton!

declare BBjInputD toDate! 
declare BBjStaticText toDateCaption!
declare BBjToolButton toDatePickerButton!

declare BBjButton okButton!

declare BBjLineChart lineChart!

declare java.util.LinkedHashMap licenseCountsMap!


begin


rem *- - - - - - - - - - CONSTANTS - - - - - - - - - -*

constants:


    TRUE = 1
    FALSE = 0
    
    FROM_DATE_CTL_ID = 101
    FROM_DATE_CAPTION_CTL_ID = 102
    FROM_DATE_PICKER_ID = 103
    
    TO_DATE_CTL_ID = 201
    TO_DATE_CAPTION_CTL_ID = 202
    TO_DATE_PICKER_ID = 203

    OK_BTN_CTL_ID = 110
    
    LINE_CHART_CTL_ID = 301
    
    DATE_CTL_WIDTH = 60


rem *- - - - - - - - - - FUNCTIONS - - - - - - - - - -*

functions:


rem *- - - - - - - - - - MAIN ROUTINE - - - - - - - - - -*

main_routine:

    gosub display_window
    
    gosub display_controls

    PROCESS_EVENTS


rem *- - - - - - - - - - EOJ - - - - - - - - - -*

eoj:

    release
    
    end


rem *- - - - - - - - - - SUBROUTINES - - - - - - - - - -*



    rem ------------------------------------------------------------------------------------------
    rem  Display the window (just the shell/frame of it)
    rem ------------------------------------------------------------------------------------------

display_window:

    sysguiChannel = unt 
    OPEN(sysguiChannel)"X0"
    
    sg! = BBjAPI().getSysGui()
    win! = sg!.addWindow(50,50,1200,600,"Notions Marketing - Basis License Usage (DisplayBasisLicenseUsage.bbj)")

    CALLBACK(ON_CLOSE, close_window, sg!.getContext())

    return
    
    
    rem ------------------------------------------------------------------------------------------
    rem  Display the controls
    rem ------------------------------------------------------------------------------------------

display_controls:

    fromDateCaption! = win!.addStaticText(FROM_DATE_CAPTION_CTL_ID, 20, 20, 140, 30, "From Date", "")

    fromDate! = win!.addInputD(FROM_DATE_CTL_ID,20,50,DATE_CTL_WIDTH,30)
    fromDate!.setMask("%Mz/%Dz/%Yz")
    fromDate!.setPassTab(sg!.TRUE)
    
    REM  The following works, if used
    REM  fromDate!.setEditable(FALSE)
    
    fromDatePickerButton! = win!.addToolButton(FROM_DATE_PICKER_ID,80,50,30,30,"BITMAP=calendar.png")


    toDateCaption! = win!.addStaticText(TO_DATE_CAPTION_CTL_ID, 20, 110, 140, 30, "To Date", "")

    toDate! = win!.addInputD(TO_DATE_CTL_ID,20,140,DATE_CTL_WIDTH,30)
    toDate!.setMask("%Mz/%Dz/%Yz")
    toDate!.setPassTab(sg!.TRUE)
    
    toDatePickerButton! = win!.addToolButton(TO_DATE_PICKER_ID,80,140,30,30,"BITMAP=calendar.png")
    
    
    okButton! = win!.addButton(OK_BTN_CTL_ID,20,210,90,30,"Reload",$0800$)
    
    
    REM  Syntax for "addLineChart":
    
    REM  addLineChart(int controlID, 
    REM               int left, int top, int width, int height, 
    REM               string xLabel, string yLabel, 
    REM               int numSeries, boolean showLegend, string flags)
    
    lineChart! = win!.addLineChart(LINE_CHART_CTL_ID,150,10,1000,550,"Time (Elapsed Hrs)","Licenses In Use",6,TRUE)
    gosub populate_chart
    

    CALLBACK(ON_TOOL_BUTTON_PUSH, pick_from_date, sg!.getContext(), fromDatePickerButton!.getID())
    CALLBACK(ON_TOOL_BUTTON_PUSH, pick_to_date, sg!.getContext(), toDatePickerButton!.getID())
    CALLBACK(ON_BUTTON_PUSH, populate_chart, sg!.getContext(), okButton!.getID())

    return
    
    
    rem ------------------------------------------------------------------------------------------
    rem  Display the chart
    rem ------------------------------------------------------------------------------------------

populate_chart:

    lineChart!.clearData()

    if fromDate!.getText() = toDate!.getText() then
        titleDatePortion$ = fromDate!.getText() 
    else
        titleDatePortion$ = fromDate!.getText() + " - " + toDate!.getText()
    endif

    lineChart!.setTitle("Basis License Usage: " + titleDatePortion$)
    lineChart!.setSeriesName(0, "All")
    lineChart!.setSeriesName(1, "root")
    lineChart!.setSeriesName(2, "offsite")
    lineChart!.setSeriesName(3, "palm")
    lineChart!.setSeriesName(4, "whse")
    lineChart!.setSeriesName(5, "other")

    licenseCountsMap! = new java.util.LinkedHashMap()
    
    REM  Turn this bit into a function for repeatability:
    
    tmpDate$ = fromDate!.getText()
    tmpMMDDYY$ = tmpDate$(1,2) + tmpDate$(4,2) + tmpDate$(7,2)   
    call "DateUtilities.bbj::convert_mmdddyy_to_20yymmdd", tmpMMDDYY$, yyyymmddFrom$
    
    tmpDate$ = toDate!.getText()
    tmpMMDDYY$ = tmpDate$(1,2) + tmpDate$(4,2) + tmpDate$(7,2)   
    call "DateUtilities.bbj::convert_mmdddyy_to_20yymmdd", tmpMMDDYY$, yyyymmddTo$
    
    
    seriesIndex = 0
    gosub populate_data_for_series
    
    seriesIndex = 1
    seriesUserId$ = "root"
    gosub populate_data_for_series
    
    seriesIndex = 2
    seriesUserId$ = "offsite"
    gosub populate_data_for_series
    
    seriesIndex = 3
    seriesUserId$ = "palm"
    gosub populate_data_for_series
    
    seriesIndex = 4
    seriesUserId$ = "whse"
    gosub populate_data_for_series
    
    seriesIndex = 5
    seriesUserId$ = "other"
    gosub populate_data_for_series

    return
    
    
    rem ------------------------------------------------------------------------------------------
    rem  Populate data for series in "seriesIndex"
    rem ------------------------------------------------------------------------------------------

populate_data_for_series:

    switch seriesIndex
    
        case 0
            call "BasisLicenseUsageDAO.bbj::get_counts_for_all_users", yyyymmddFrom$, yyyymmddTo$, licenseCountsMap!
            break
    
        case 1
            call "BasisLicenseUsageDAO.bbj::get_counts_for_one_user", yyyymmddFrom$, yyyymmddTo$, seriesUserId$, licenseCountsMap!
            break
    
        case 2
            call "BasisLicenseUsageDAO.bbj::get_counts_for_one_user", yyyymmddFrom$, yyyymmddTo$, seriesUserId$, licenseCountsMap!
            break
    
        case 3
            call "BasisLicenseUsageDAO.bbj::get_counts_for_one_user", yyyymmddFrom$, yyyymmddTo$, seriesUserId$, licenseCountsMap!
            break
    
        case 4
            call "BasisLicenseUsageDAO.bbj::get_counts_for_one_user", yyyymmddFrom$, yyyymmddTo$, seriesUserId$, licenseCountsMap!
            break
    
        case 5
            call "BasisLicenseUsageDAO.bbj::get_counts_except_for_four_users", yyyymmddFrom$, yyyymmddTo$, "root", "whse", "offsite", "palm", licenseCountsMap!
            break
    
    swend
    
    iter! = licenseCountsMap!.keySet().iterator()
    
    yyyymmddPrev$ = yyyymmddFrom$
    elapsedDays = 0 
    
    while iter!.hasNext()
    
      collectionTime! = iter!.next()
      collectionTime$ = collectionTime!
      licensesUsed = licenseCountsMap!.get(collectionTime!)
      
      tmpHrs = num(collectionTime$(12, 2))
      mins = num(collectionTime$(15, 2))
      secs = num(collectionTime$(18, 2))
      
      if (mins = 0) then
          tmpHrsFromMins = 0
      else
          tmpHrsFromMins = mins / 60
      endif  
      
      if (secs = 0) then
          tmpHrsFromSecs = 0
      else
          tmpHrsFromSecs = secs / 3600
      endif  

      tmpTotalHrs = tmpHrs + tmpHrsFromMins + tmpHrsFromSecs
      
      REM  Handle date range by adding 24 hours for each day that goes by while looping:
      
      yyyymmddCurr$ = collectionTime$(1, 4) + collectionTime$(6, 2) + collectionTime$(9, 2)
      
      if yyyymmddCurr$ > yyyymmddPrev$ then
          call "DateUtilities.bbj::get_days_between_inclusive", yyyymmddPrev$, yyyymmddCurr$, daysBetweenInclusive
          elapsedDays = elapsedDays + daysBetweenInclusive - 1 
          yyyymmddPrev$ = yyyymmddCurr$
      endif 

      if elapsedDays > 0 then
        tmpTotalHrs = tmpTotalHrs + (elapsedDays * 24)
      endif
      
      lineChart!.setXYValue(seriesIndex, tmpTotalHrs, licensesUsed)
      
    wend

    return
    
    
    rem ------------------------------------------------------------------------------------------
    rem  Close the window
    rem ------------------------------------------------------------------------------------------

close_window:

    close(sysguiChannel)
    
    return


    rem ------------------------------------------------------------------------------------------
    rem  Pick "from date" from popup calendar
    rem ------------------------------------------------------------------------------------------

pick_from_date:

    fromDate!.calendar()

    return


    rem ------------------------------------------------------------------------------------------
    rem  Pick "to date" from popup calendar
    rem ------------------------------------------------------------------------------------------

pick_to_date:

    toDate!.calendar()

    return
