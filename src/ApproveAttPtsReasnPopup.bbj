REM /**
REM  * ApproveAttPtsReasnPopup.bbj
REM  * @author stevett
REM  *
REM  * Written: July 2015
REM  * 
REM  * Description: Edit reasons popup window for Supervisor Approval of Attendance Points.
REM  *
REM  */


use java.util.LinkedHashMap

declare java.util.LinkedHashMap reasonsMap!


rem *- - - - - - - - - - CONSTANTS - - - - - - - - - -*

rem  This section never runs for multi-entry point called programs, so subroutine "setup_constants" is called
rem  for each entry point.
    



rem *- - - - - - - - - - ENTRY POINTS - - - - - - - - - -*

entry_points:
    
    
show_popup:

    enter upperLeftColumn, upperLeftRow, reasonIdInOut, reasonDescrOut$
    
    gosub setup_constants

    print 'push'

    gosub init

    gosub display_popup
    
    gosub handle_input
    
    print 'pop'
    
    exit


rem *- - - - - - - - - - SUBROUTINES - - - - - - - - - -*

subroutines:


    rem ------------------------------------------------------------------------------------------
    rem  setup_constants
    rem ------------------------------------------------------------------------------------------

    
setup_constants:

    TRUE = 1
    FALSE = 0
    
    SHOW_FIELD_TERMINATOR_PRESSED = FALSE
    
    START_ROW_FOR_LIST = 1
    END_ROW_FOR_LIST = 7
    
    UP_ARROW_CUSTOM_INPUT_VALUE$ = $86$
    UP_ARROW_CTL_OUTPUT_VALUE$ = $1D$
    
    DOWN_ARROW_CUSTOM_INPUT_VALUE$ = $87$
    DOWN_ARROW_CTL_OUTPUT_VALUE$ = $1E$

    return


    rem ------------------------------------------------------------------------------------------
    rem  One-time intialization
    rem ------------------------------------------------------------------------------------------

    
init:

        rem For info on function key programming, see this article: http://www.basis.com/kb00025
        rem Also see Basis help: PRO/5 > User's Ref > Character Devices > Terminals > Function and Edit Keys
    
        rem Below is how 'EL' (edit keys) mnemonics are used to assign a key a value
        
        rem "2" - load only one key
        rem $02$ - means the up arrow key (see the documentation)
        rem chr(1) - means the custom value of the key is 1 byte long
        rem UP_ARROW_CUSTOM_INPUT_VALUE$ - is the custom INPUT value of the key
        
    print 'EL', "2", $02$, chr(1), UP_ARROW_CUSTOM_INPUT_VALUE$,
    print 'EL', "2", $03$, chr(1), DOWN_ARROW_CUSTOM_INPUT_VALUE$,
    
    upArrowPair$ = UP_ARROW_CUSTOM_INPUT_VALUE$ + UP_ARROW_CTL_OUTPUT_VALUE$
    downArrowPair$ = DOWN_ARROW_CUSTOM_INPUT_VALUE$ + DOWN_ARROW_CTL_OUTPUT_VALUE$
    
    resultIgnored$ = stbl("!TERMS", upArrowPair$ + downArrowPair$ + stbl("!TERMS"))
    
    reasonsMap! = new java.util.LinkedHashMap()

    call "AttendPtsReasnDAO.bbj::get_ids_and_descrs", reasonsMap! 
    
    return


    rem ------------------------------------------------------------------------------------------
    rem  Display the popup window
    rem ------------------------------------------------------------------------------------------

    
display_popup:

    print 'window' (upperLeftColumn, upperLeftRow, 61, 14, "Choose Edit Reason",'br'),
    
    rem The row and column values used here are relative to inside the window
    
    print 'er',
    
    cursorRow = START_ROW_FOR_LIST
    x = 0
    
    iter! = reasonsMap!.keySet().iterator()
    
    while iter!.hasNext()
    
      tmpId! = iter!.next()
      x = x + 1
      
      print @(5, x),  reasonsMap!.get(tmpId!)
      
      if reasonIdInOut = tmpId! then cursorRow = x
      
    wend

    return


    rem ------------------------------------------------------------------------------------------
    rem  Handle input: Up Arrow, Down Arrow, Enter
    rem ------------------------------------------------------------------------------------------

    
handle_input:

    while TRUE
            
        input(len=1) @(2, cursorRow), ignoreInput$
        
        savedCTL = CTL
        
        isArrowing = FALSE
        
        if CTL = ASC(UP_ARROW_CTL_OUTPUT_VALUE$) then 
:           cursorRow = cursorRow - 1;
:           isArrowing = TRUE
:       else if CTL = ASC(DOWN_ARROW_CTL_OUTPUT_VALUE$) then 
:           cursorRow = cursorRow + 1;
:           isArrowing = TRUE
:       else if CTL = 0  then
:           exitto done_handling_input

        if cursorRow < START_ROW_FOR_LIST then
:           cursorRow = START_ROW_FOR_LIST
:       else if cursorRow > END_ROW_FOR_LIST then
:           cursorRow = END_ROW_FOR_LIST

        if isArrowing and SHOW_FIELD_TERMINATOR_PRESSED then
:           print @(2, END_ROW_FOR_LIST + 1), 'CL', "CTL, savedCTL: ", CTL, " ", savedCTL
        
    wend
    
    done_handling_input:
    
    iter! = reasonsMap!.keySet().iterator()
    x = 0
    
    while iter!.hasNext()
    
      tmpId! = iter!.next()
      x = x + 1
      
      if x = cursorRow then
          reasonIdInOut = tmpId!
          reasonDescrOut$ = reasonsMap!.get(tmpId!)
          break
      endif
      
    wend
    
    
    return