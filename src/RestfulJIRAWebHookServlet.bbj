REM /**
REM  * RestfulJIRAWebHookServlet.bbj
REM  * @author stevett
REM  * written October 2015
REM  *
REM  * NOTE: There are some hard-wired things here that I don't like, but we don't have a full environment
REM  *       on nmcm, which is where this will run.  Could perhaps make more flexible later with
REM  *       CONFIG_VARS access, etc.
REM  * 
REM  */


use java.net.URLDecoder
use org.json.JSONObject
use org.json.JSONArray


class public RestfulJIRAWebHookServlet

    field private static BBjNumber TRUE = 1
    field private static BBjNumber FALSE = 0

    field private static BBjNumber RUNNING_ON_WINDOWS_DEV = #TRUE

    field private static BBjNumber SEND_RESPONSE_TEXT = #TRUE
    field private static BBjNumber SEND_EMAIL_DATA = #TRUE
    field private static BBjNumber INCLUDE_RAW_BODY_OF_REQUEST = #TRUE

    field private BBjNumber chan
    field private BBjHttpSession session!
    field private BBjHttpRequest request!

    field private BBjVector parmNames!


    method public void handleRequestEvent(BBjServletEvent p_event!)

        declare BBjHttpResponse response!
        declare BBjHttpRequest request!

        #chan = unt
        #request! = cast(BBjHttpRequest, p_event!.getHttpRequest())
        #session! = cast(BBjHttpSession, #request!.getSession())
        
        response! = p_event!.getHttpResponse()
        
        REM response!.setContentType("application/json")
        
        REM  The following is absolutely needed if I'm just going to return a bit of text to append
        REM  to some DOM node
        
        response!.setContentType("text/html")
        
        open(#chan)"JSERVLET"
        #processRequest(#request!.getMethod(), #request!.getPathInfo())
        close(#chan) 

    methodend
    
    
        rem  This method is a test case 
    
    method public void getTestModeResponse()
    
      #chan = unt
      
      rem  Send output to a file, so you can see results:
      
      open(#chan, mode="O_CREATE") "/tmp/RestfulJIRAWebHookServlet-output.txt"
      #processRequest("GET", "/srq-status-change/ERP-1524")
      close(#chan)
      
    methodend
    
    
    method public void sendEmail(java.lang.String recipients!, java.lang.String subject!, java.lang.String body!)

        recipients$ = recipients!
        subject$ = subject!
        body$ = body!

        if #RUNNING_ON_WINDOWS_DEV then
            call "MailUtilities.bbj::send_simple_email_msg", recipients$, subject$, body$, mailReturnCode
        else
            bodyFileName$ = "/tmp/RestfulJIRAWebHookServlet.email.body." + str(tim) + ".txt"

            erase bodyFileName$,ERR=*next
            string bodyFileName$
            bodyFileChannel = unt
            open(bodyFileChannel) bodyFileName$
            print(bodyFileChannel) body$
            close(bodyFileChannel)

            emailCmd$ = "cat " + bodyFileName$ + " | mail -s """ + subject$ + """ -S smtp=""nmcz.notions-marketing.com"" " + recipients$
            returnCode = scall(emailCmd$)
        endif

    methodend
    
    
    method public void processRequest(java.lang.String httpMethod!, java.lang.String urlPath!)
        
        if urlPath!.startsWith("/srq-status-change/")  then
            
            if httpMethod!.equals("POST") then
            
                requestData$ = #getRequestData()

                if #SEND_EMAIL_DATA then
                    recipients$ = "steve.swett@notionsmarketing.com"
                    subject$ = "E-mail data for RestfulJIRAWebHookServlet"
                    
                    body$ = "<p>httpMethod! = " + httpMethod! + "</p>"
                    body$ = body$ + "<p>urlPath! = " + urlPath! + "</p>"
                    body$ = body$ + "<p>requestData = " + "</p>"
                    body$ = body$ + requestData$
                    
                    #sendEmail(recipients$, subject$, body$)
                    
                endif
                
                if #SEND_RESPONSE_TEXT then
                
                    if mailReturnCode > 0 then
                        print(#chan) "<p>E-mail failed with return code: " + str(mailReturnCode) + "</p>"
                        print(#chan) "<p>Failing e-mail command<br/>" + failedEmailCmd$ + "</p>"
                    endif
                    
                    print(#chan) requestData$
                endif
                
            endif
            
            if httpMethod!.equals("GET") then
                #getSampleResponseForGetMethod(urlPath!)
            endif
            
        endif

    methodend
    
    
    method public java.lang.String getJsonData(java.lang.String decodedBody!)
    
        declare org.json.JSONObject rootObject!
        declare org.json.JSONObject transitionObject!
        declare org.json.JSONObject userObject!
        declare org.json.JSONObject issueObject!
        declare org.json.JSONObject issueFieldsObject!
    
        
        jsonData$ = ""
        
        seterr json_error_handler
        
        rootObject! = new org.json.JSONObject(decodedBody!)
        
        REM  The following isn't need for data reading; it's about testing the structure of the JSON data
        transitionObject! = rootObject!.getJSONObject("transition")
        userObject! = rootObject!.getJSONObject("user")
        
        REM  These are needed for data reads:
        issueObject! = rootObject!.getJSONObject("issue")
        issueKey$ = issueObject!.getString("key")
        issueFieldsObject! = issueObject!.getJSONObject("fields")
        issueSummary$ = issueFieldsObject!.getString("summary")
         
        jsonData$ = jsonData$ + "<li>issueKey$ = " + issueKey$ + "</li>"
        jsonData$ = jsonData$ + "<li>issueSummary$ = " + issueSummary$ + "</li>"
        
        goto skip_json_error
        
        
        json_error_handler:
        
        jsonData$ = "<p>ERROR: " + errmes(-1) + "</p>"
        
        
        skip_json_error:
        
        seterr 0
        
        methodret jsonData$
        
    
    methodend
    
    
    method public java.lang.String getRequestData()
    
        requestData$ = ""
    
        requestData$ = requestData$ + "<p>Test of getting a few important pieces of data<p>"
        requestData$ = requestData$ + "<ul>"
        
        decodedBody$ = java.net.URLDecoder.decode(#request!.getBody(), "UTF-8")
        requestData$ = requestData$ + #getJsonData(decodedBody$)
        
        requestData$ = requestData$ + "</ul>"
        
    
        #parmNames! = #request!.getParameterNames()
        
        requestData$ = requestData$ + "<p>Complete list of parameter names shown in list below<p>"
        requestData$ = requestData$ + "<ul>"
        
        for x = 0 to #parmNames!.size() - 1
            requestData$ = requestData$ + "<li>" + #parmNames!.get(x) + "</li>"
        next x
        
        requestData$ = requestData$ + "</ul>"

        
        if #INCLUDE_RAW_BODY_OF_REQUEST then
            requestData$ = requestData$ + "<p>Raw body of request</p>"
            requestData$ = requestData$ + "<p><xmp>" + decodedBody$ + "</xmp></p>"
        endif
        
        
        methodret requestData$

    methodend
    
    
    method public void getSampleResponseForGetMethod(java.lang.String urlPath!)

        print(#chan) "<p>This is the response given if method is GET.<p>"
        
        decodedText$ = java.net.URLDecoder.decode("Hello%20there", "UTF-8")
        
        print(#chan) "<p>This is the decodedText$ = " + decodedText$ + "</p>"
        

    methodend
    
    
classend
