REM /**
REM  * RestfulJIRAWebHookServlet.bbj
REM  * @author stevett
REM  * written October 2015
REM  *
REM  * NOTE: There are some hard-wired things here that I don't like, but we don't have a full environment
REM  *       on nmcm, which is where this will run.  Could perhaps make more flexible later with
REM  *       CONFIG_VARS access, etc.
REM  * 
REM  * Revised 1/8/16 to add logic to update the following fields when the assignee is changed
REM  * in JIRA.  These fields are only set if the current ASSIGN$ field in SYSR is blank.
REM  *  
REM  *      ASSIGN$ (assignee to "HARDWARE")
REM  *      STAT$ (status to "P")
REM  *      ASTAMP$ (assigned timestamp)
REM  */


use java.lang.System
use java.net.URLDecoder
use java.util.HashMap
use org.json.JSONObject
use org.json.JSONArray


class public RestfulJIRAWebHookServlet
        
    sysr_all_fields_iol:iolist K0$,K1$,HS$,HS1$,HS2$,REQ$,LOC$,STAT$,NOTES$,WHEN$,CONTACT$,ATTACHMENT$,ASSIGN$,ASTAMP$,CLSTAMP$,WORKED,PRI$

    field private static BBjNumber TRUE = 1
    field private static BBjNumber FALSE = 0

    REM  For the following, TRUE means running in Steve's dev env.  FALSE means intended for NMCM production.
    field private static BBjNumber RUNNING_ON_WINDOWS_DEV = #TRUE

    field private static BBjNumber SEND_RESPONSE_TEXT = #FALSE
    field private static BBjNumber SEND_EMAIL_DATA = #FALSE
    field private static BBjNumber INCLUDE_RAW_BODY_OF_REQUEST = #FALSE
    field private static BBjNumber UPDATE_SRQ = #TRUE
    field private static BBjNumber WRITE_TO_LOG = #TRUE

    field private BBjNumber responseChannel
    field private BBjHttpSession session!
    field private BBjHttpRequest request!

    field private BBjVector parmNames!
    field private java.lang.String decodedBody!
    field private java.util.HashMap jsonDataMap!

    
    rem /**
    rem  * Handle the servlet request event (the starting point)
    rem  */


    method public void handleRequestEvent(BBjServletEvent p_event!)

        declare BBjHttpResponse response!
        declare BBjHttpRequest request!

        #responseChannel = unt
        #request! = cast(BBjHttpRequest, p_event!.getHttpRequest())
        #session! = cast(BBjHttpSession, #request!.getSession())
        
        response! = p_event!.getHttpResponse()
        response!.setContentType("text/html")
        
        open(#responseChannel)"JSERVLET"
        
        if #WRITE_TO_LOG then #writeToLog("started - in handleRequestEvent")
        
        #processRequest(#request!.getMethod(), #request!.getPathInfo())
        close(#responseChannel) 

    methodend
    

    rem /**
    rem  * Handle a test event.  This is triggered when the RestfulJIRAWebHook.bbj program is run
    rem  * manually outside of a servlet container (such as from within Eclipse with Run button).
    rem  */

    
    method public void handleTestEvent()
    
      #responseChannel = unt
      
      rem  Send output to a file, so you can see results:
      
      open(#responseChannel, mode="O_CREATE") "/tmp/RestfulJIRAWebHookServlet-output.txt"
      #processRequest("GET", "/srq-status-change/ERP-1524")
      close(#responseChannel)
      
    methodend

    
    rem /**
    rem  * Send an e-mail
    rem  */

    
    method private BBjNumber sendEmail(java.lang.String recipients!, java.lang.String subject!, java.lang.String body!)

        recipients$ = recipients!
        subject$ = subject!
        body$ = body!

        if #RUNNING_ON_WINDOWS_DEV then
            call "MailUtilities.bbj::send_simple_email_msg", recipients$, subject$, body$, returnCode
        else
            bodyFileName$ = "/tmp/RestfulJIRAWebHookServlet.email.body." + str(tim) + ".txt"

            erase bodyFileName$,ERR=*next
            string bodyFileName$
            bodyFileChannel = unt
            open(bodyFileChannel) bodyFileName$
            print(bodyFileChannel) body$
            close(bodyFileChannel)

            emailCmd$ = "cat " + bodyFileName$ + " | mail -s """ + subject$ + """ -S smtp=""nmcz.notions-marketing.com"" " + recipients$
            returnCode = scall(emailCmd$)
        endif
        
        methodret returnCode

    methodend
    
    
    rem /**
    rem  * Process the request 
    rem  */
    
    
    method private void processRequest(java.lang.String httpMethod!, java.lang.String urlPath!)

        if urlPath!.startsWith("/srq-status-change/")  then
            #processSrqStatusChange(httpMethod!,urlPath!)
        endif
        
        if urlPath!.startsWith("/srq-issue-update/")  then
            #processSrqIssueUpdate(httpMethod!,urlPath!)
        endif

    methodend
    
    
    rem /**
    rem  * Process SRQ status change 
    rem  */
    
    
    method private void processSrqStatusChange(java.lang.String httpMethod!, java.lang.String urlPath!)

        if #WRITE_TO_LOG then #writeToLog("in processSrqStatusChange")
        
        if httpMethod!.equals("POST") then
        
            #decodedBody! = java.net.URLDecoder.decode(#request!.getBody(), "UTF-8")
            #loadJsonDataMapForStatusChange()
            
            srqNumber$ = #getSrqNumber()
            
            if #WRITE_TO_LOG then #writeToLog("srqNumber$ = " + srqNumber$)
            
            if len(srqNumber$) > 0 then

                if #UPDATE_SRQ then
                    #updateSRQStatus(srqNumber$)
                endif
                
                if #SEND_EMAIL_DATA or #SEND_RESPONSE_TEXT then
                
                    requestData$ = #getRequestData()
                    
                    generalInfo$ = "<p>httpMethod! = " + httpMethod! + "</p>"
                    generalInfo$ = generalInfo$ + "<p>urlPath! = " + urlPath! + "</p>"
                    generalInfo$ = generalInfo$ + "<p>srqNumber$ = " + srqNumber$ + "</p>"
                    
                    requestData$ = generalInfo$ + requestData$
    
                    if #SEND_EMAIL_DATA then
    
                        recipients$ = "steve.swett@notionsmarketing.com"
                        subject$ = "E-mail data for RestfulJIRAWebHookServlet"
                        body$ = requestData$
                        mailReturnCode = #sendEmail(recipients$, subject$, body$)
                        
                    endif
                    
                    if #SEND_RESPONSE_TEXT then
                    
                        if #SEND_EMAIL_DATA and mailReturnCode > 0 then
                            print(#responseChannel) "<p>E-mail failed with return code: " + str(mailReturnCode) + "</p>"
                        endif
                        
                        print(#responseChannel) requestData$
                        
                    endif
                    
                endif
                
            
            endif
            
        endif
        
        if httpMethod!.equals("GET") then
            #getSampleResponseForGetMethod(urlPath!)
        endif

    methodend
    
    
    rem /**
    rem  * Process SRQ issue update 
    rem  */
    
    
    method private void processSrqIssueUpdate(java.lang.String httpMethod!, java.lang.String urlPath!)

        if #WRITE_TO_LOG then #writeToLog("in processSrqIssueUpdate")

        if httpMethod!.equals("POST") then
        
            #decodedBody! = java.net.URLDecoder.decode(#request!.getBody(), "UTF-8")
            #loadJsonDataMapForIssueUpdate()
            
            if #jsonDataMap!.get("assignee_changed") = "Y" then
            
                srqNumber$ = #getSrqNumber()
                
                if #WRITE_TO_LOG then #writeToLog("srqNumber$ = " + srqNumber$)
            
                if len(srqNumber$) > 0 then
    
                    if #UPDATE_SRQ then
                        #updateSRQAssignee(srqNumber$)
                    endif
                    
                    if #SEND_EMAIL_DATA or #SEND_RESPONSE_TEXT then
                    
                        requestData$ = #getRequestData()
                        
                        generalInfo$ = "<p>httpMethod! = " + httpMethod! + "</p>"
                        generalInfo$ = generalInfo$ + "<p>urlPath! = " + urlPath! + "</p>"
                        generalInfo$ = generalInfo$ + "<p>srqNumber$ = " + srqNumber$ + "</p>"
                        
                        requestData$ = generalInfo$ + requestData$
        
                        if #SEND_EMAIL_DATA then
        
                            recipients$ = "steve.swett@notionsmarketing.com"
                            subject$ = "E-mail data for RestfulJIRAWebHookServlet"
                            body$ = requestData$
                            mailReturnCode = #sendEmail(recipients$, subject$, body$)
                            
                        endif
                        
                        if #SEND_RESPONSE_TEXT then
                        
                            if #SEND_EMAIL_DATA and mailReturnCode > 0 then
                                print(#responseChannel) "<p>E-mail failed with return code: " + str(mailReturnCode) + "</p>"
                            endif
                            
                            print(#responseChannel) requestData$
                            
                        endif
                        
                    endif
                    
                
                endif
                
            endif
            
        endif
        
        if httpMethod!.equals("GET") then
            #getSampleResponseForGetMethod(urlPath!)
        endif

    methodend
    
    
    rem /**
    rem  *  Get the SRQ number from the issue summary field from the #jsonDataMap!
    rem  */
    
    
    method private BBjString getSrqNumber()
    
        declare java.lang.String issueSummary!
        
        resultNum$ = ""
        
        if !(#jsonDataMap!.containsKey("error")) then
            
            issueSummary! = cast(java.lang.String, #jsonDataMap!.get("issue_summary"))
            foundAt = issueSummary!.indexOf("SRQ:0")

            if foundAt >= 0 then
            
                afterColon$ = issueSummary!.substring(foundAt + 4)
                
                if len(afterColon$) > 5 then
                    srqNum$ = afterColon$(1,6)
                    srqNum = num(srqNum$, ERR=bad_srq_num)
                    resultNum$ = srqNum$
                    bad_srq_num:
                endif
                
            endif
             
        endif
        
        
        methodret resultNum$
    
    methodend
    
    
    rem /**
    rem  * Load data from the stringified JSON data in the request body into #jsonDataMap!.
    rem  * This also validates the structure of the JSON data so that we aren't trying to 
    rem  * handle bogus requests. 
    rem  */
    
    
    method private void loadJsonDataMapForStatusChange()
    
        declare org.json.JSONObject rootObject!
        declare org.json.JSONObject transitionObject!
        declare org.json.JSONObject userObject!
        declare org.json.JSONObject issueObject!
        declare org.json.JSONObject issueFieldsObject!
        
        #jsonDataMap! = new java.util.HashMap()
        
        seterr json_error_handler
        
        rootObject! = new org.json.JSONObject(#decodedBody!)
        
        REM  The following isn't need for data reading; it's about testing the structure of the JSON data
        transitionObject! = rootObject!.getJSONObject("transition")
        userObject! = rootObject!.getJSONObject("user")
        
        REM  These are needed for data reads:
        issueObject! = rootObject!.getJSONObject("issue")
        issueKey$ = issueObject!.getString("key")
        issueFieldsObject! = issueObject!.getJSONObject("fields")
        issueSummary$ = issueFieldsObject!.getString("summary")
         
        #jsonDataMap!.put("issue_key", issueKey$)
        #jsonDataMap!.put("issue_summary", issueSummary$)
        
        goto skip_json_error
        
        
        json_error_handler:
        
        #jsonDataMap!.put("error", errmes(-1))
        
        
        skip_json_error:
        
        seterr 0
        
    
    methodend
    
    
    rem /**
    rem  * Load data from the stringified JSON data in the request body into #jsonDataMap!.
    rem  * This also validates the structure of the JSON data so that we aren't trying to 
    rem  * handle bogus requests. 
    rem  */
    
    
    method private void loadJsonDataMapForIssueUpdate()
    
        declare org.json.JSONObject rootObject!
        declare org.json.JSONObject userObject!
        declare org.json.JSONObject issueObject!
        declare org.json.JSONObject issueFieldsObject!
        declare org.json.JSONObject changelogObject!
        declare org.json.JSONArray changedItemsArray!
        declare org.json.JSONObject changedItemObject!
        
        #jsonDataMap! = new java.util.HashMap()
        
        seterr json_error_handler_two
        
        rootObject! = new org.json.JSONObject(#decodedBody!)
        
        REM  The following isn't need for data reading; it's about testing the structure of the JSON data
        userObject! = rootObject!.getJSONObject("user")
        
        REM  These are needed for data reads:
        issueObject! = rootObject!.getJSONObject("issue")
        issueKey$ = issueObject!.getString("key")
        issueFieldsObject! = issueObject!.getJSONObject("fields")
        issueSummary$ = issueFieldsObject!.getString("summary")
        
        changelogObject! = rootObject!.getJSONObject("changelog")
        changedItemsArray! = changelogObject!.getJSONArray("items") 
        
        wasAssigneeChanged$ = "N"
        
        if changedItemsArray!.length() > 0 then

            for i = 0 to changedItemsArray!.length() - 1
                
                changedItemObject! = changedItemsArray!.getJSONObject(i)
                
                if changedItemObject!.has("field") then
                    changedItemField$ = changedItemObject!.getString("field")
                    
                    if changedItemField$ = "assignee" then
                        wasAssigneeChanged$ = "Y"
                        break
                    endif
                endif
                
            next i
            
        endif
         
        #jsonDataMap!.put("issue_key", issueKey$)
        #jsonDataMap!.put("issue_summary", issueSummary$)

        if #WRITE_TO_LOG then #writeToLog("in loadJsonDataMapForIssueUpdate - before assignee_changed")

        #jsonDataMap!.put("assignee_changed", wasAssigneeChanged$)

        if #WRITE_TO_LOG then #writeToLog("in loadJsonDataMapForIssueUpdate - after assignee_changed")
        
        goto skip_json_error_two
        
        
        json_error_handler_two:
        
        #jsonDataMap!.put("error", errmes(-1))
        
        
        skip_json_error_two:
        
        seterr 0
        
    
    methodend
    
    
    rem /**
    rem  * Get request data.  This was initially used to inspect what was coming in from JIRA. 
    rem  */
    
    
    method private java.lang.String getRequestData()
    
        requestData$ = ""
    
        requestData$ = requestData$ + "<p>Test of getting a few important pieces of data<p>"
        requestData$ = requestData$ + "<ul>"
        
        iter! = #jsonDataMap!.keySet().iterator()
        
        while iter!.hasNext()
        
            fieldKey! = iter!.next()
            requestData$ = requestData$ + "<li>" + fieldKey! + " = " + #jsonDataMap!.get(fieldKey!) 
          
        wend
        
        requestData$ = requestData$ + "</ul>"
        
    
        #parmNames! = #request!.getParameterNames()
        
        requestData$ = requestData$ + "<p>Complete list of parameter names shown in list below<p>"
        requestData$ = requestData$ + "<ul>"
        
        for x = 0 to #parmNames!.size() - 1
            requestData$ = requestData$ + "<li>" + #parmNames!.get(x) + "</li>"
        next x
        
        requestData$ = requestData$ + "</ul>"

        
        if #INCLUDE_RAW_BODY_OF_REQUEST then
            requestData$ = requestData$ + "<p>Raw body of request</p>"
            requestData$ = requestData$ + "<p><xmp>" + #decodedBody! + "</xmp></p>"
        endif
        
        
        methodret requestData$

    methodend
    
    
    rem /**
    rem  *  Write a log entry to BBjServices.log.yyyy-mm-dd.x 
    rem  */
    
    
    method private void writeToLog(BBjString logEntry!)
    
        System.out.println("RestfulJIRAWebHookServlet.bbj - " + #request!.getPathInfo() + " - " + logEntry!)
        
    methodend
    
    
    rem /**
    rem  *  Update the SRQ record for status in the NotionsDB on NMCA.  Mark it closed.  
    rem  * Also send an e-mail to the requester. 
    rem  */
    
    
    method private void updateSRQStatus(BBjString srqNumber!)
    
        declare java.lang.String issueKey!
        
        srqNumber$ = srqNumber!
        srqKey$ = srqNumber$ + "00"
        
        sysrChannel = unt
        if #WRITE_TO_LOG then #writeToLog("before open SYSR file")
        
        if #RUNNING_ON_WINDOWS_DEV then
            open(sysrChannel) "SYSR"
        else
            open(sysrChannel) "/<NMCA>/usr/notfil/SYSR"
        endif
        
        if #WRITE_TO_LOG then #writeToLog("after open SYSR file")
        
        read(sysrChannel, knum=0, key=srqKey$, dom=no_rec_found) IOL=sysr_all_fields_iol
        if #WRITE_TO_LOG then #writeToLog("after read SYSR file, requester = " + REQ$)
        
        yymmddhhmm$ = date(0:"%Yz%Mz%Dz%Hz%mz") 
        
        STAT$ = "C"
        CLSTAMP$ = yymmddhhmm$
        
        write(sysrChannel) IOL=sysr_all_fields_iol
        if #WRITE_TO_LOG then #writeToLog("wrote SYSR file")
        
        trimmedRequester$ = cvs(REQ$,11)
        
        if len(trimmedRequester$) >= 0 then
            
            issueKey! = cast(java.lang.String, #jsonDataMap!.get("issue_key"))
            if #WRITE_TO_LOG then #writeToLog("got issueKey! = " + issueKey!)

            recipients$ = trimmedRequester$ + "@notionsmarketing.com"
            subject$ = "SRQ " + srqNumber$ + " has been closed.  (aka JIRA " + issueKey! + ")"
            body$ = "Original SRQ Description: " + cvs(NOTES$,2)
            
            if #WRITE_TO_LOG then #writeToLog("before sendEmail")
            mailReturnCd = #sendEmail(recipients$, subject$, body$)
            if #WRITE_TO_LOG then #writeToLog("after sendEmail, mailReturnCd = " + str(mailReturnCd))
            
        endif
        
        no_rec_found:
        
        close(sysrChannel)      
        if #WRITE_TO_LOG then #writeToLog("after close SYSR file")
    
    methodend
    
    
    rem /**
    rem  *  Update the SRQ record for assignee in the NotionsDB on NMCA.  Set assignee to
    rem  *  "HARDWARE".  Also send an e-mail to the requester. 
    rem  */
    
    
    method private void updateSRQAssignee(BBjString srqNumber!)
    
        declare java.lang.String issueKey!
        
        srqNumber$ = srqNumber!
        srqKey$ = srqNumber$ + "00"
        
        sysrChannel = unt
        if #WRITE_TO_LOG then #writeToLog("before open SYSR file")
        
        if #RUNNING_ON_WINDOWS_DEV then
            open(sysrChannel) "SYSR"
        else
            open(sysrChannel) "/<NMCA>/usr/notfil/SYSR"
        endif
        
        if #WRITE_TO_LOG then #writeToLog("after open SYSR file")
        
        read(sysrChannel, knum=0, key=srqKey$, dom=no_rec_found_two) IOL=sysr_all_fields_iol
        if #WRITE_TO_LOG then #writeToLog("after read SYSR file, requester = " + REQ$)
        
        if len( cvs(ASSIGN$,3) ) = 0 then
        
            ASSIGN$ = "HARDWARE"
            STAT$ = "P"
            yymmddhhmm$ = date(0:"%Yz%Mz%Dz%Hz%mz") 
            ASTAMP$ = yymmddhhmm$
        
            write(sysrChannel) IOL=sysr_all_fields_iol
            if #WRITE_TO_LOG then #writeToLog("wrote SYSR file")
            
            trimmedRequester$ = cvs(REQ$,11)
            
            if len(trimmedRequester$) >= 0 then
                
                issueKey! = cast(java.lang.String, #jsonDataMap!.get("issue_key"))
                if #WRITE_TO_LOG then #writeToLog("got issueKey! = " + issueKey!)
    
                recipients$ = trimmedRequester$ + "@notionsmarketing.com"
                subject$ = "SRQ " + srqNumber$ + " has been assigned to " + ASSIGN$ + ".  (aka JIRA " + issueKey! + ")"
                body$ = "Original SRQ Description: " + cvs(NOTES$,2)
                
                if #WRITE_TO_LOG then #writeToLog("before sendEmail")
                mailReturnCd = #sendEmail(recipients$, subject$, body$)
                if #WRITE_TO_LOG then #writeToLog("after sendEmail, mailReturnCd = " + str(mailReturnCd))
                
            endif
        endif
        
        
        no_rec_found_two:
        
        close(sysrChannel)      
        if #WRITE_TO_LOG then #writeToLog("after close SYSR file")
    
    methodend
    
    
    rem /**
    rem  * This method is only called as part of handling a test event.  It doesn't output anything very meaningful. 
    rem  */
    
    
    method private void getSampleResponseForGetMethod(java.lang.String urlPath!)

        print(#responseChannel) "<p>This is the response given if method is GET.<p>"
        
        decodedText$ = java.net.URLDecoder.decode("Hello%20there", "UTF-8")
        
        print(#responseChannel) "<p>This is the decodedText$ = " + decodedText$ + "</p>"
        

    methodend
    
    
classend
