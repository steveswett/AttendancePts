REM /**
REM  * BasisConnectionStatisticsDAO.bbj
REM  * @author stevett
REM  *
REM  * Written: December 9, 2015
REM  * 
REM  * Description: Data Access Object for table BasisConnectionStatistics
REM  *
REM  */

use java.util.HashMap
use java.util.LinkedHashMap

declare java.util.HashMap recordsMapIn!
declare java.util.HashMap oneRecordMap!

declare java.util.LinkedHashMap countsMapOut!


rem *- - - - - - - - - - CONSTANTS - - - - - - - - - -*

rem  This section never runs for multi-entry point called programs, so subroutine "setup_constants" is called
rem  for each entry point.


rem *- - - - - - - - - - FUNCTIONS - - - - - - - - - -*

functions:



rem *- - - - - - - - - - ENTRY POINTS - - - - - - - - - -*

entry_points:


add_connection_records:

    enter timestampIn$, recordsMapIn!

    gosub setup_constants
    
    gosub insert_connection_records
    
    exit
    
    
get_counts_for_all_users:

    enter yyyymmddFromIn$, yyyymmddToIn$, countsMapOut!
    
    gosub setup_constants
    gosub prepare_date_variables    
    gosub fetch_counts_for_all_users
    
    exit
    
    
get_counts_for_one_user:

    enter yyyymmddFromIn$, yyyymmddToIn$, userIdIn$, countsMapOut!
    
    gosub setup_constants
    gosub prepare_date_variables    
    gosub fetch_counts_for_one_user
    
    exit
    
    
get_counts_except_for_four_users:

    enter yyyymmddFromIn$, yyyymmddToIn$, userId1In$, userId2In$, userId3In$, userId4In$, countsMapOut!
    
    gosub setup_constants
    gosub prepare_date_variables    
    gosub fetch_counts_except_for_four_users
    
    exit


get_most_recent_collection_time:

    enter collectionTimeOut$
    
    gosub setup_constants
    gosub fetch_most_recent_collection_time

    exit

rem *- - - - - - - - - - SUBROUTINES - - - - - - - - - -*

subroutines:


REM  ------------------------------------------------------------------------------------------
REM  Add connection rows for all records in recordsMapIn!
REM  ------------------------------------------------------------------------------------------


insert_connection_records:

    call "DateUtilities.bbj::get_timestamp_as_datetime_string", timestampIn$, sqlTimeStamp$

    connectionsChannel = sqlunt
    sqlopen(connectionsChannel) dataWarehouseDataSource$

    sqlprep(connectionsChannel) INSERT_CONNECTIONS_STMT$
    
    iter! = recordsMapIn!.keySet().iterator()
    
    while iter!.hasNext()
    
        openIdKey! = iter!.next()
        oneRecordMap! = cast( java.util.HashMap, recordsMapIn!.get(openIdKey!) )

        user$ = oneRecordMap!.get("user")
        host$ = oneRecordMap!.get("host")
        dbName$ = oneRecordMap!.get("db_name")
        connectTime$ = oneRecordMap!.get("connect_time")

        sqlexec(connectionsChannel) sqlTimeStamp$, openIdKey!, user$, host$, dbName$, connectTime$            
    
    wend
    
    sqlclose(connectionsChannel)

    return
    
    
REM  ------------------------------------------------------------------------------------------
REM  Prepare date variables for use in queries
REM  ------------------------------------------------------------------------------------------

prepare_date_variables:

    call "DateUtilities.bbj::get_yyyymmdd_with_hyphen_separators", yyyymmddFromIn$, formattedFromDate$
    call "DateUtilities.bbj::get_yyyymmdd_with_hyphen_separators", yyyymmddToIn$, formattedToDate$
    
    fromSqlDate$ = formattedFromDate$ + " 00:00:00"  
    toSqlDate$ = formattedToDate$ + " 23:59:59"  

    return
    
REM  ------------------------------------------------------------------------------------------
REM  Fetch counts and load into countsMapOut!
REM  ------------------------------------------------------------------------------------------

fetch_counts_for_all_users:

    countsChannel = sqlunt
    sqlopen(countsChannel) dataWarehouseDataSource$

    sqlprep(countsChannel) SELECT_COUNTS_FOR_ALL_USERS_STMT$

    countsMapOut!.clear()

    sqlexec(countsChannel) fromSqlDate$, toSqlDate$ 
    dim resultRow$:sqltmpl(countsChannel)
    
    while TRUE
    
        resultRow$ = sqlfetch(countsChannel,err=*break)
        countsMapOut!.put(resultRow.CollectionTime$, resultRow.ConnectionCount )
        
    wend
    
    sqlclose(countsChannel)

    return
    
    
REM  ------------------------------------------------------------------------------------------
REM  Fetch counts and load into countsMapOut!
REM  ------------------------------------------------------------------------------------------

fetch_counts_for_one_user:

    countsChannel = sqlunt
    sqlopen(countsChannel) dataWarehouseDataSource$

    sqlprep(countsChannel) SELECT_COUNTS_FOR_ONE_USER_STMT$

    countsMapOut!.clear()

    sqlexec(countsChannel) fromSqlDate$, toSqlDate$, userIdIn$ 
    dim resultRow$:sqltmpl(countsChannel)
    
    while TRUE
    
        resultRow$ = sqlfetch(countsChannel,err=*break)
        countsMapOut!.put(resultRow.CollectionTime$, resultRow.ConnectionCount )
        
    wend
    
    sqlclose(countsChannel)

    return
    
    
REM  ------------------------------------------------------------------------------------------
REM  Fetch counts and load into countsMapOut!
REM  ------------------------------------------------------------------------------------------

fetch_counts_except_for_four_users:

    countsChannel = sqlunt
    sqlopen(countsChannel) dataWarehouseDataSource$

    sqlprep(countsChannel) SELECT_COUNTS_EXCEPT_FOR_FOUR_USERS_STMT$

    countsMapOut!.clear()

    sqlexec(countsChannel) fromSqlDate$, toSqlDate$, userId1In$, userId2In$, userId3In$, userId4In$ 
    dim resultRow$:sqltmpl(countsChannel)
    
    while TRUE
    
        resultRow$ = sqlfetch(countsChannel,err=*break)
        countsMapOut!.put(resultRow.CollectionTime$, resultRow.ConnectionCount )
        
    wend
    
    sqlclose(countsChannel)

    return

    
REM  ------------------------------------------------------------------------------------------
REM  Fetch the most recent collection time on file
REM  ------------------------------------------------------------------------------------------

fetch_most_recent_collection_time:

    countsChannel = sqlunt
    sqlopen(countsChannel) dataWarehouseDataSource$

    sqlprep(countsChannel) SELECT_MOST_RECENT_COLLECTION_TIME_STMT$

    sqlexec(countsChannel) 
    dim resultRow$:sqltmpl(countsChannel)
    
    collectionTimeOut$ = ""
    
    resultRow$ = sqlfetch(countsChannel,err=no_collection_time)
    
    collectionTimeOut$ = resultRow.CollectionTime$
    
    no_collection_time:
    
    sqlclose(countsChannel)

    return
    

REM  ------------------------------------------------------------------------------------------
REM  setup_constants
REM  ------------------------------------------------------------------------------------------

setup_constants:

    TRUE = 1
    FALSE = 0

    dataWarehouseDataSource$ = ""
    call "ConfigVarsDAO.bbj::get_value", "notions.data.warehouse.data.source.name", configVarFound, configVarDataType$, dataWarehouseDataSource$

    
    INSERT_CONNECTIONS_STMT$ = "insert into BasisConnectionStatistics (CollectionTime, OpenId, UserId, Host, DatabaseName, ConnectTime) " +
:       "values (?, ?, ?, ?, ?, ?)"


    SELECT_COUNTS_FOR_ALL_USERS_STMT$ = "select " + 
:       "CollectionTime, " + 
:       "count(*) as ConnectionCount " +
:       "from BasisConnectionStatistics " +
:       "where CollectionTime between ? and ? " +
:       "group by CollectionTime " +
:       "order by CollectionTime"


    SELECT_COUNTS_FOR_ONE_USER_STMT$ = "select " + 
:       "CollectionTime, " + 
:       "count(*) as ConnectionCount " +
:       "from BasisConnectionStatistics " +
:       "where CollectionTime between ? and ? and " +
:       "UserId = ? " +
:       "group by CollectionTime " +
:       "order by CollectionTime"


    SELECT_COUNTS_EXCEPT_FOR_FOUR_USERS_STMT$ = "select " + 
:       "CollectionTime, " + 
:       "count(*) as ConnectionCount " +
:       "from BasisConnectionStatistics " +
:       "where CollectionTime between ? and ? and " +
:       "UserId not in(?,?,?,?) " +
:       "group by CollectionTime " +
:       "order by CollectionTime"


    SELECT_MOST_RECENT_COLLECTION_TIME_STMT$ = "select top 1 CollectionTime " +
:       "from BasisConnectionStatistics " +
:       "order by CollectionTime desc"
    
    
    return
