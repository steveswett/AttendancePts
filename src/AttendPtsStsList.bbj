REM /**
REM  * AttendPtsStsList.bbj
REM  * @author stevett
REM  *
REM  * Written: September 2015
REM  * 
REM  * Description: List screen of Attendance Pts Status.
REM  *
REM  */


use java.util.LinkedHashMap
use java.util.HashMap

declare java.util.LinkedHashMap employeeRecordsMap!
declare java.util.HashMap employeeDataMap!
declare java.util.TreeMap sortedEmployeeRecordsMap!
declare java.util.LinkedHashMap levelsMap!


enter deptIdIn, deptNameIn$, shiftIn$, ptsFromIn, ptsToIn, orderByIn$, levelsMap! 


rem *- - - - - - - - - - CONSTANTS - - - - - - - - - -*

constants:


TRUE = 1
FALSE = 0

RECORDS_PER_PAGE = 14
COLUMNS_PER_PAGE = 1
RECORDS_PER_COLUMN = 14
ROWS_PER_RECORD = 1
START_ROW_FOR_LIST = 6
END_ROW_FOR_LIST = START_ROW_FOR_LIST + RECORDS_PER_COLUMN - 1 
SHOW_FIELD_TERMINATOR_PRESSED = FALSE

LINE_FIELD_NO = 1
LAST_FIELD_NO = 1



REM     Note about INPUTE:
REM     
REM     Any value less than 63 will cause the input function to exit setting the CTL value to the function value. 
REM     The "help" function causes an exit with CTL=-1.

REM     For consistency across programs regarding function keys (not edit keys):
REM     Input values: F1, F2, F3 ... F10 = $11$, $12$, $13$ ... $1A$
REM     Output values: F1, F2, F3 ... F10 = $01$, $02$, $03$ ... $0A$

F4_CUSTOM_INPUT_VALUE$ = $14$
F4_CTL_OUTPUT_VALUE$ = $04$

TAB_CUSTOM_INPUT_VALUE$ = $09$
TAB_CTL_OUTPUT_VALUE$ = $19$

BACKTAB_CUSTOM_INPUT_VALUE$ = $83$
BACKTAB_CTL_OUTPUT_VALUE$ = $1A$

PAGE_UP_CUSTOM_INPUT_VALUE$ = $84$
PAGE_UP_CTL_OUTPUT_VALUE$ = $1B$

PAGE_DOWN_CUSTOM_INPUT_VALUE$ = $85$
PAGE_DOWN_CTL_OUTPUT_VALUE$ = $1C$


rem *- - - - - - - - - - FUNCTIONS - - - - - - - - - -*

functions:


def fnHasRecordsBefore%(aDoIt)

    return topLeftMapIndex > 1

fnend


def fnHasRecordsAfter%(aDoIt)

    return topLeftMapIndex + RECORDS_PER_PAGE - 1 < sortedEmployeeRecordsMapSize

fnend


rem *- - - - - - - - - - MAIN ROUTINE - - - - - - - - - -*

main_routine:

    gosub init
    
    gosub display_screen_headings
    
    gosub display_data
    
    gosub handle_input


rem *- - - - - - - - - - EOJ - - - - - - - - - -*

eoj:

    exit


rem *- - - - - - - - - - SUBROUTINES - - - - - - - - - -*


    rem ------------------------------------------------------------------------------------------
    rem  One-time intialization
    rem ------------------------------------------------------------------------------------------

    
init:

    rem  These are variables only because I was experimenting.  But even dumb terminals can underline.
    begUnLin$ = 'BU'
    endUnLin$ = 'EU'

    lineNoInputCol = 6
    
    
        rem  The 'ET' (end type ahead control) below is VERY IMPORTANT when using SHIFT+TAB.  Without it, each
        rem  SHIFT+TAB would actually be treated as two inputs: SHIFT+TAB followed by TAB.

    print 'UC', 'CS', 'ET'
    
        rem Set color.  In the following, $03$ is the background (blue) and $3F$ is the foreground (white).
        rem The bits for that were: 0 0 1 1 1 1 1 1  (<-- foreground)   0 0 0 0 0 0 1 1  (<-- background)
        
    print 'RGB'($033F$);   rem blue background, white foreground
    rem print 'RGB'($033C$);   rem blue background, yellow foreground
    rem print 'RGB'($0330$);   rem blue background, red foreground
    
    print 'CURSOR'("rep_block");   rem This only works in BBj -- not Pro/5


        rem For info on function key programming, see this article: http://www.basis.com/kb00025
        rem Also see Basis help: PRO/5 > User's Ref > Character Devices > Terminals > Function and Edit Keys
    
        rem Below is how the 'FL' (function keys) and 'EL' (edit keys) mnemonics are used to assign a key a value
        
        rem "2" - load only one key
        rem $01$ - means the F2 key (0-based)
        rem chr(1) - means the custom value of the function key is 1 byte long
        rem F8_CUSTOM_INPUT_VALUE$ - is the custom INPUT value of the key
        
    print 'FL', "2", $03$, chr(1), F4_CUSTOM_INPUT_VALUE$,

    print 'EL', "2", $3C$, chr(1), BACKTAB_CUSTOM_INPUT_VALUE$,    
    print 'EL', "2", $06$, chr(1), PAGE_UP_CUSTOM_INPUT_VALUE$,
    print 'EL', "2", $07$, chr(1), PAGE_DOWN_CUSTOM_INPUT_VALUE$,
    
    f4Pair$ = F4_CUSTOM_INPUT_VALUE$ + F4_CTL_OUTPUT_VALUE$

    pageupPair$ = PAGE_UP_CUSTOM_INPUT_VALUE$ + PAGE_UP_CTL_OUTPUT_VALUE$
    pagedownPair$ = PAGE_DOWN_CUSTOM_INPUT_VALUE$ + PAGE_DOWN_CTL_OUTPUT_VALUE$
    tabPair$ = TAB_CUSTOM_INPUT_VALUE$ + TAB_CTL_OUTPUT_VALUE$
    backtabPair$ = BACKTAB_CUSTOM_INPUT_VALUE$ + BACKTAB_CTL_OUTPUT_VALUE$
    
    termsBefore$ = stbl("!TERMS")
    editBefore$ = stbl("!EDIT")  
    termsAfter$ = stbl("!TERMS", f4Pair$ + pageupPair$ + pagedownPair$ + tabPair$ + backtabPair$ + termsBefore$)
    editAfter$ = stbl("!EDIT", f4Pair$ + pageupPair$ + pagedownPair$ + tabPair$ + backtabPair$ + editBefore$)
    
REM     print "length of termsBefore$ = ", len(termsBefore$)
REM     print "length of termsAfter$ = ", len(termsAfter$)
REM     print "length of editBefore$ = ", len(editBefore$)
REM     print "length of editAfter$ = ", len(editAfter$)
REM     input "hit any key", ignoreInput$
    
    gosub load_employee_records_map
    topLeftMapIndex = 1
    
    return


    rem ------------------------------------------------------------------------------------------
    rem  Load the employeeRecordsMap! -- which holds a row of data per employee
    rem ------------------------------------------------------------------------------------------


load_employee_records_map:

    employeeRecordsMap! = new java.util.LinkedHashMap()
    
    call "WFMREmployeeDAO.bbj::get_operations_employees_by_dept_shift", deptIdIn, shiftIn$, employeeRecordsMap!
    
    call "AttendPtsDAO.bbj::add_pts_and_next_drop_info_to_map", employeeRecordsMap!
    
    sortedEmployeeRecordsMap! = new java.util.TreeMap()
    
    iter! = employeeRecordsMap!.keySet().iterator()
    
    while iter!.hasNext()
    
        badgeKey! = iter!.next()
        employeeDataMap! = cast( java.util.HashMap, employeeRecordsMap!.get(badgeKey!) )
        ptsTotal = employeeDataMap!.get("pts_total")

        if ptsTotal < ptsFromIn or ptsTotal > ptsToIn then continue
        
        fmtPtsTotal$ = str(ptsTotal:"000.0")
        
        if orderByIn$ = "1" then
            sortKey$ = fmtPtsTotal$ + employeeDataMap!.get("last_name") + ", " + employeeDataMap!.get("first_name") + badgeKey! 
        else
            sortKey$ = employeeDataMap!.get("last_name") + ", " + employeeDataMap!.get("first_name") + fmtPtsTotal$ + badgeKey! 
        endif
        
        sortedEmployeeRecordsMap!.put(sortKey$, employeeDataMap!)

    wend
    
    employeeRecordsMap!.clear()
    
    sortedEmployeeRecordsMapSize = sortedEmployeeRecordsMap!.size()

    return


    rem ------------------------------------------------------------------------------------------
    rem  Display the screen headings
    rem ------------------------------------------------------------------------------------------


display_screen_headings:

    call "TerminalUtilities.bbj::display_screen_headings", pgm(-2), "ATTENDANCE POINTS" 

    return

    
    rem ------------------------------------------------------------------------------------------
    rem  Display data on page, besides page headings
    rem ------------------------------------------------------------------------------------------

    
display_data:

    print @(0,0), 'CE', 'UC'
    
    gosub display_screen_headings
    
    print @(0,3), "Points: ", str(ptsFromIn:"##.0"), " - ", str(ptsToIn:"##.0")
    
    if deptIdIn > 0 then
        print @(22,3), "Dept: ", deptNameIn$
    endif
    
    print @(48,4), "CURR  WARN  NEXT PTS   PTS AFTER"
    
    print @(0,5), "LINE  DEPT  SHIFT  NAME"
    print @(48,5), "PTS   LEV   DROP DATE  DROP DATE"
    
    count = 0
    displayedCount = 0
    
    dim keysArray![1:RECORDS_PER_PAGE]

    if orderByIn$ = "1" then
        iter! = sortedEmployeeRecordsMap!.descendingKeySet().iterator()
    else
        iter! = sortedEmployeeRecordsMap!.keySet().iterator()
    endif
    
    
    while iter!.hasNext()
    
      key! = iter!.next()
      count = count + 1
      
      if count < topLeftMapIndex then continue
      if count > topLeftMapIndex + RECORDS_PER_PAGE - 1 then break
      
      displayedCount = displayedCount + 1
      
      keysArray![displayedCount] = key!

      employeeDataMap! = cast( java.util.HashMap, sortedEmployeeRecordsMap!.get(key!) )
      
      fmtName$ = employeeDataMap!.get("last_name") + ", " + employeeDataMap!.get("first_name")
      
      if len(fmtName$) > 28 then fmtName$ = fmtName$(1,28)
      
      totalPts =  employeeDataMap!.get("pts_total")

      rawNextPtsDropDate! = employeeDataMap!.get("ptdt")
      
      if rawNextPtsDropDate! = null() then
          fmtNextPtsDropDate$ = ""
          fmtPtsAfterDropDate$ = ""
      else
          unformattedDate$ = rawNextPtsDropDate! 
          call "DateUtilities.bbj::get_yymd_as_mdy_with_slashes", unformattedDate$, TRUE, fmtNextPtsDropDate$
          ptsToDrop = employeeDataMap!.get("pts")
          ptsAfterDropDate = totalPts - ptsToDrop
          
          if ptsAfterDropDate < 0 then ptsAfterDropDate = 0
          
          fmtPtsAfterDropDate$ =  str(ptsAfterDropDate:"##.0")
      endif
      
      warningLevel$ = ""
      levelsIter! = levelsMap!.keySet().iterator()

      while levelsIter!.hasNext()
          level! = levelsIter!.next()
          
          if totalPts >= level! then
            warningLevel$ = str(level!)
          endif
      wend
      
      
      row = START_ROW_FOR_LIST + displayedCount * ROWS_PER_RECORD - ROWS_PER_RECORD
      
      print @(0, row), str(displayedCount:"#0"), "." 
      print @(4, row), employeeDataMap!.get("department_id")
      print @(14,row), employeeDataMap!.get("shift")
      print @(19,row), fmtName$
      print @(48,row), str(totalPts:"##.0")
      print @(55,row), warningLevel$
      print @(60,row), fmtNextPtsDropDate$
      print @(72,row), fmtPtsAfterDropDate$
      
    wend
    
    line$ = "  "
    
    print @(0,21), "Line: ", begUnLin$, line$, endUnLin$
    
    canPageUp = fnHasRecordsBefore%(TRUE)
    canPageDown = fnHasRecordsAfter%(TRUE)
    
    actionLabel$ = "F4=Exit  "

    if canPageUp then actionLabel$ = actionLabel$ + "Page Up=Prev Page  " 
    if canPageDown then actionLabel$ = actionLabel$ + "Page Down=Next Page  "
    
    actionLabel$ = actionLabel$ + "Enter=Select"

    print @(13,21), actionLabel$ 

    
    if SHOW_FIELD_TERMINATOR_PRESSED then print @(5,22), 'CL', "Field terminator (savedCTL): ", savedCTL

    return

    
    rem ------------------------------------------------------------------------------------------
    rem  Handle input, which will be F4 or Page Up or Page Down
    rem ------------------------------------------------------------------------------------------

    
handle_input:

    currentFieldNo = LINE_FIELD_NO

    while TRUE
        
        if currentFieldNo = LINE_FIELD_NO then
            print @(lineNoInputCol, 21), begUnLin$
            inpute lineNoInputCol, 21, 2, "", line$ 
            print @(lineNoInputCol + 2, 21), endUnLin$ 
        endif
            
        gosub clear_err_msg

        savedCTL = CTL
        isTabbing = FALSE
        needToBreak = FALSE
        
        switch savedCTL
        
            case ASC(F4_CTL_OUTPUT_VALUE$)
                    needToBreak = TRUE
        
                    break
        
            case ASC(PAGE_UP_CTL_OUTPUT_VALUE$)
                    if canPageUp then
                        gosub set_top_left_map_index_for_page_up
                    endif
        
                    break
                    
            case ASC(PAGE_DOWN_CTL_OUTPUT_VALUE$)
                    if canPageDown then
                        gosub set_top_left_map_index_for_page_down
                    endif
                    
                    break
                    
            case ASC(TAB_CTL_OUTPUT_VALUE$)
                    isTabbing = TRUE
                    gosub set_field_no_after_tabbing
                    
                    break
                    
            case ASC(BACKTAB_CTL_OUTPUT_VALUE$)
                    isTabbing = TRUE
                    gosub set_field_no_after_back_tabbing
                    
                    break
                    
            case 0
                    gosub handle_enter_key
                    
                    break
                    
        swend

        if needToBreak then break

        if isTabbing and SHOW_FIELD_TERMINATOR_PRESSED then
            print @(55,21), 'CL', "CTL, savedCTL: ", CTL, ", ", savedCTL
        endif

        if !(isTabbing) and len(errMsg$) = 0 then
            gosub display_data
        endif
        
    wend
    
    return
    
    
    rem ------------------------------------------------------------------------------------------
    rem  Handle when Enter key pressed
    rem ------------------------------------------------------------------------------------------
    

handle_enter_key:

    REM  For backwards compatibility, an Enter without a line # will page forward (if more lines available)
    
    if len(cvs(line$, 2)) = 0 then

        if canPageDown then
            gosub set_top_left_map_index_for_page_down
        endif
        
        goto done_handling_enter
    endif
    
    gosub validate_input
    
    if len(errMsg$) > 0 then
        gosub display_err_msg
    else
        key! = keysArray![ num(line$) ]
        employeeDataMap! = cast( java.util.HashMap, sortedEmployeeRecordsMap!.get(key!) )
        badgeNumber$ = employeeDataMap!.get("badge_number")
        
        call "MaintainAttPtsListCalled.bbj", TRUE, badgeNumber$
        
        line$ = " "
        
    endif
    
    done_handling_enter:


    return
    

    
    rem ------------------------------------------------------------------------------------------
    rem  When Page Up is pressed, calculate a new topLeftMapIndex
    rem ------------------------------------------------------------------------------------------
    
    
set_top_left_map_index_for_page_up:

    topLeftMapIndex = topLeftMapIndex - RECORDS_PER_PAGE
    
    if topLeftMapIndex < 1 then topLeftMapIndex = 1

    return

    
    rem ------------------------------------------------------------------------------------------
    rem  When Page Down is pressed, calculate a new topLeftMapIndex
    rem ------------------------------------------------------------------------------------------
    
    
set_top_left_map_index_for_page_down:

    topLeftMapIndex = topLeftMapIndex + RECORDS_PER_PAGE
    
    if topLeftMapIndex > sortedEmployeeRecordsMapSize then topLeftMapIndex = sortedEmployeeRecordsMapSize

    return    
    
    
    rem ------------------------------------------------------------------------------------------
    rem  set_field_no_after_tabbing
    rem ------------------------------------------------------------------------------------------
    
    
set_field_no_after_tabbing:

    currentFieldNo = currentFieldNo + 1
    if currentFieldNo > LAST_FIELD_NO then currentFieldNo = 1
    
    return
    
    
    rem ------------------------------------------------------------------------------------------
    rem  set_field_no_after_back_tabbing
    rem ------------------------------------------------------------------------------------------
    
    
set_field_no_after_back_tabbing:

    currentFieldNo = currentFieldNo - 1
    if currentFieldNo < 1 then currentFieldNo = LAST_FIELD_NO
    
    return
    
    
    rem ------------------------------------------------------------------------------------------
    rem  clear_err_msg
    rem ------------------------------------------------------------------------------------------
    
    
clear_err_msg:

    print @(0,22), 'CL'
    errMsg$ = ""
        
    return
    
    
    rem ------------------------------------------------------------------------------------------
    rem  display_err_msg
    rem ------------------------------------------------------------------------------------------
    
    
display_err_msg:

    print @(0,22), 'CL', 'BR', pad(errMsg$, 80, "L", " "), 'ER'
        
    return
    
    
    rem ------------------------------------------------------------------------------------------
    rem  validate_input
    rem ------------------------------------------------------------------------------------------
    
    
validate_input:

    hasLineErr = FALSE
    
    line = num(line$,err=invalid_line_no_format)
    
    if line < 1 or line > displayedCount then
        hasLineErr = TRUE
    endif
    
    remainder = mod(line, 1)
    
    if remainder <> 0 then
        hasLineErr = TRUE
    endif
    
    goto skip_line_no_format
    
    invalid_line_no_format:
        hasLineErr = TRUE
    
    skip_line_no_format:
    
    if hasLineErr then
        errMsg$ = "Invalid line number."
        currentFieldNo = LINE_FIELD_NO
    endif
  
    skip_line_no_edit:
        
    return
